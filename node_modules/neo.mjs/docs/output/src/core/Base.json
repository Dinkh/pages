{
    "classData": [
        {
            "comment": "/**\n * The base class for (almost) all classes inside the Neo namespace\n * Exceptions are e.g. core.IdGenerator, vdom.VNode\n * @class Neo.core.Base\n */",
            "meta": {
                "filename": "Base.mjs",
                "lineno": 6,
                "columnno": 0,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {}
            },
            "description": "The base class for (almost) all classes inside the Neo namespace<br />Exceptions are e.g. core.IdGenerator, vdom.VNode",
            "kind": "class",
            "name": "Base",
            "memberof": "Neo.core",
            "longname": "Neo.core.Base",
            "scope": "static",
            "$longname": "Neo.core.Base",
            "$kind": "class",
            "id": 974,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * The return value will get applied to the class constructor\n     * @returns {Object} staticConfig\n     * @static\n     * @tutorial 02_ClassSystem\n     */",
            "meta": {
                "range": [
                    474,
                    816
                ],
                "filename": "Base.mjs",
                "lineno": 18,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100034536",
                    "name": "Base.getStaticConfig",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                }
            },
            "description": "The return value will get applied to the class constructor",
            "returns": [
                {
                    "type": {
                        "names": [
                            "Object"
                        ]
                    },
                    "description": "staticConfig"
                }
            ],
            "scope": "static",
            "tags": [
                {
                    "originalTitle": "tutorial",
                    "title": "tutorial",
                    "text": "02_ClassSystem",
                    "value": "02_ClassSystem"
                }
            ],
            "name": "getStaticConfig",
            "longname": "Base.getStaticConfig",
            "kind": "function",
            "memberof": "Base",
            "params": [],
            "$longname": "Base.getStaticConfig",
            "$kind": "method",
            "id": 975,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n         * Set this one to false in case you don't want to stick\n         * to the \"anti-pattern\" to apply classes to the global Neo or App namespace\n         * @member {Boolean} registerToGlobalNs=true\n         * @protected\n         * @static\n         */",
            "meta": {
                "filename": "Base.mjs",
                "lineno": 26,
                "columnno": 8,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {}
            },
            "description": "Set this one to false in case you don't want to stick<br />to the \"anti-pattern\" to apply classes to the global Neo or App namespace",
            "kind": "member",
            "name": "registerToGlobalNs",
            "type": {
                "names": [
                    "Boolean"
                ]
            },
            "defaultvalue": true,
            "access": "protected",
            "scope": "static",
            "longname": "registerToGlobalNs",
            "$longname": "registerToGlobalNs",
            "$kind": "property",
            "id": 976,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * The return value will get applied to each class instance\n     * @returns {Object} staticConfig\n     * @tutorial 02_ClassSystem\n     */",
            "meta": {
                "range": [
                    972,
                    2046
                ],
                "filename": "Base.mjs",
                "lineno": 34,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100034544",
                    "name": "Base.getConfig",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                }
            },
            "description": "The return value will get applied to each class instance",
            "returns": [
                {
                    "type": {
                        "names": [
                            "Object"
                        ]
                    },
                    "description": "staticConfig"
                }
            ],
            "tags": [
                {
                    "originalTitle": "tutorial",
                    "title": "tutorial",
                    "text": "02_ClassSystem",
                    "value": "02_ClassSystem"
                }
            ],
            "name": "getConfig",
            "longname": "Base.getConfig",
            "kind": "function",
            "memberof": "Base",
            "scope": "static",
            "params": [],
            "$longname": "Base.getConfig",
            "$kind": "method",
            "id": 977,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n         * The class name which will get mapped into the Neo or app namespace\n         * @member {String} className='Neo.core.Base'\n         * @protected\n         */",
            "meta": {
                "filename": "Base.mjs",
                "lineno": 40,
                "columnno": 8,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {}
            },
            "description": "The class name which will get mapped into the Neo or app namespace",
            "kind": "member",
            "name": "className",
            "type": {
                "names": [
                    "String"
                ]
            },
            "defaultvalue": "'Neo.core.Base'",
            "access": "protected",
            "longname": "className",
            "scope": "global",
            "$longname": "className",
            "$kind": "property",
            "id": 978,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n         * The class shortcut-name to use for e.g. creating child components inside a JSON-format\n         * @member {String} ntype='base'\n         * @protected\n         */",
            "meta": {
                "filename": "Base.mjs",
                "lineno": 46,
                "columnno": 8,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {}
            },
            "description": "The class shortcut-name to use for e.g. creating child components inside a JSON-format",
            "kind": "member",
            "name": "ntype",
            "type": {
                "names": [
                    "String"
                ]
            },
            "defaultvalue": "'base'",
            "access": "protected",
            "longname": "ntype",
            "scope": "global",
            "$longname": "ntype",
            "$kind": "property",
            "id": 979,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n         * Neo.create() will change this flag to true after the onConstructed() chain is done.\n         * @member {Boolean} isConstructed=false\n         * @protected\n         */",
            "meta": {
                "filename": "Base.mjs",
                "lineno": 52,
                "columnno": 8,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {}
            },
            "description": "Neo.create() will change this flag to true after the onConstructed() chain is done.",
            "kind": "member",
            "name": "isConstructed",
            "type": {
                "names": [
                    "Boolean"
                ]
            },
            "defaultvalue": false,
            "access": "protected",
            "longname": "isConstructed",
            "scope": "global",
            "$longname": "isConstructed",
            "$kind": "property",
            "id": 980,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n         * Add mixins as an array of classNames, imported modules or a mixed version\n         * @member {String[]|Neo.core.Base[]|null} mixins=null\n         */",
            "meta": {
                "filename": "Base.mjs",
                "lineno": 57,
                "columnno": 8,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {}
            },
            "description": "Add mixins as an array of classNames, imported modules or a mixed version",
            "kind": "member",
            "name": "mixins",
            "type": {
                "names": [
                    "Array.<String>",
                    "Array.<Neo.core.Base>",
                    "null"
                ]
            },
            "defaultvalue": null,
            "longname": "mixins",
            "scope": "global",
            "$longname": "mixins",
            "$kind": "property",
            "id": 981,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n         * You can create a new instance by passing an imported class (JS module default export)\n         * @member {Class} module=null\n         * @protected\n         */",
            "meta": {
                "filename": "Base.mjs",
                "lineno": 63,
                "columnno": 8,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {}
            },
            "description": "You can create a new instance by passing an imported class (JS module default export)",
            "kind": "member",
            "name": "module",
            "type": {
                "names": [
                    "Class"
                ]
            },
            "defaultvalue": null,
            "access": "protected",
            "longname": "module",
            "scope": "global",
            "$longname": "module",
            "$kind": "property",
            "id": 982,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * Consumes the static getConfig() object\n     * Applies the observable mixin if needed, grants remote access if needed\n     * @param {Object} config\n     */",
            "meta": {
                "range": [
                    2222,
                    3157
                ],
                "filename": "Base.mjs",
                "lineno": 71,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100034560",
                    "name": "Base",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "config"
                    ]
                },
                "vars": {
                    "": null
                }
            },
            "description": "Consumes the static getConfig() object<br />Applies the observable mixin if needed, grants remote access if needed",
            "params": [
                {
                    "type": {
                        "names": [
                            "Object"
                        ]
                    },
                    "name": "config"
                }
            ],
            "name": "Base",
            "longname": "Base",
            "kind": "class",
            "scope": "global",
            "$longname": "Base",
            "$kind": "constructor",
            "id": 983,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * Triggered after the droppable config got changed\n     * @param {Boolean} value\n     * @param {Boolean} oldValue\n     * @protected\n     */",
            "meta": {
                "range": [
                    3316,
                    3452
                ],
                "filename": "Base.mjs",
                "lineno": 118,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100034678",
                    "name": "Base#afterSetIsConstructed",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "value",
                        "oldValue"
                    ]
                },
                "vars": {
                    "": null
                }
            },
            "description": "Triggered after the droppable config got changed",
            "params": [
                {
                    "type": {
                        "names": [
                            "Boolean"
                        ]
                    },
                    "name": "value"
                },
                {
                    "type": {
                        "names": [
                            "Boolean"
                        ]
                    },
                    "name": "oldValue"
                }
            ],
            "access": "protected",
            "name": "afterSetIsConstructed",
            "longname": "Base#afterSetIsConstructed",
            "kind": "function",
            "memberof": "Base",
            "scope": "instance",
            "$longname": "Base#afterSetIsConstructed",
            "$kind": "method",
            "id": 984,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * Convenience method for beforeSet functions which test if a given value is inside a static array\n     * @param {String|Number} value\n     * @param {String|Number} oldValue\n     * @param {String} name config name\n     * @param {Array|String} [staticName=name + 's'] name of the static config array\n     * @returns {String|Number} value or oldValue\n     */",
            "meta": {
                "range": [
                    3827,
                    4194
                ],
                "filename": "Base.mjs",
                "lineno": 132,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100034695",
                    "name": "Base#beforeSetEnumValue",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "value",
                        "oldValue",
                        "name",
                        "staticName"
                    ]
                },
                "vars": {
                    "": null
                }
            },
            "description": "Convenience method for beforeSet functions which test if a given value is inside a static array",
            "params": [
                {
                    "type": {
                        "names": [
                            "String",
                            "Number"
                        ]
                    },
                    "name": "value"
                },
                {
                    "type": {
                        "names": [
                            "String",
                            "Number"
                        ]
                    },
                    "name": "oldValue"
                },
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    },
                    "description": "config name",
                    "name": "name"
                },
                {
                    "type": {
                        "names": [
                            "Array",
                            "String"
                        ]
                    },
                    "optional": true,
                    "defaultvalue": "name + 's'",
                    "description": "name of the static config array",
                    "name": "staticName"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "String",
                            "Number"
                        ]
                    },
                    "description": "value or oldValue"
                }
            ],
            "name": "beforeSetEnumValue",
            "longname": "Base#beforeSetEnumValue",
            "kind": "function",
            "memberof": "Base",
            "scope": "instance",
            "$longname": "Base#beforeSetEnumValue",
            "$kind": "method",
            "id": 985,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * Uses the IdGenerator to create an id if a static one is not explicitly set.\n     * Registers the instance to manager.Instance if this one is already created,\n     * otherwise stores it inside a tmp map.\n     * @param {String} id\n     */",
            "meta": {
                "range": [
                    4452,
                    4793
                ],
                "filename": "Base.mjs",
                "lineno": 149,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100034750",
                    "name": "Base#createId",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "id"
                    ]
                },
                "vars": {
                    "": null
                }
            },
            "description": "Uses the IdGenerator to create an id if a static one is not explicitly set.<br />Registers the instance to manager.Instance if this one is already created,<br />otherwise stores it inside a tmp map.",
            "params": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    },
                    "name": "id"
                }
            ],
            "name": "createId",
            "longname": "Base#createId",
            "kind": "function",
            "memberof": "Base",
            "scope": "instance",
            "$longname": "Base#createId",
            "$kind": "method",
            "id": 986,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * Unregisters this instance from Neo.manager.Instance\n     * and removes all object entries from this instance\n     */",
            "meta": {
                "range": [
                    4931,
                    5323
                ],
                "filename": "Base.mjs",
                "lineno": 169,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100034814",
                    "name": "Base#destroy",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                }
            },
            "description": "Unregisters this instance from Neo.manager.Instance<br />and removes all object entries from this instance",
            "name": "destroy",
            "longname": "Base#destroy",
            "kind": "function",
            "memberof": "Base",
            "scope": "instance",
            "params": [],
            "$longname": "Base#destroy",
            "$kind": "method",
            "id": 987,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * Used inside createId() as the default value passed to the IdGenerator.\n     * Override this method as needed.\n     * @returns {String}\n     */",
            "meta": {
                "range": [
                    5487,
                    5532
                ],
                "filename": "Base.mjs",
                "lineno": 190,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100034880",
                    "name": "Base#getIdKey",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                }
            },
            "description": "Used inside createId() as the default value passed to the IdGenerator.<br />Override this method as needed.",
            "returns": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    }
                }
            ],
            "name": "getIdKey",
            "longname": "Base#getIdKey",
            "kind": "function",
            "memberof": "Base",
            "scope": "instance",
            "params": [],
            "$longname": "Base#getIdKey",
            "$kind": "method",
            "id": 988,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * Returns the value of a static config key or the staticConfig object itself in case no value is set\n     * @param {String} [key] The key of a staticConfig defined inside static getStaticConfig\n     * @returns {*}\n     */",
            "meta": {
                "range": [
                    5773,
                    5889
                ],
                "filename": "Base.mjs",
                "lineno": 199,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100034888",
                    "name": "Base#getStaticConfig",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "key"
                    ]
                },
                "vars": {
                    "": null
                }
            },
            "description": "Returns the value of a static config key or the staticConfig object itself in case no value is set",
            "params": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    },
                    "optional": true,
                    "description": "The key of a staticConfig defined inside static getStaticConfig",
                    "name": "key"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "*"
                        ]
                    }
                }
            ],
            "name": "getStaticConfig",
            "longname": "Base#getStaticConfig",
            "kind": "function",
            "memberof": "Base",
            "scope": "instance",
            "$longname": "Base#getStaticConfig",
            "$kind": "method",
            "id": 989,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * Gets triggered after onConstructed() is done\n     * @see {@link Neo.core.Base#onConstructed onConstructed}\n     * @tutorial 02_ClassSystem\n     */",
            "meta": {
                "range": [
                    6057,
                    6066
                ],
                "filename": "Base.mjs",
                "lineno": 209,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100034908",
                    "name": "Base#init",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                }
            },
            "description": "Gets triggered after onConstructed() is done",
            "see": [
                "{@link Neo.core.Base#onConstructed onConstructed}"
            ],
            "tags": [
                {
                    "originalTitle": "tutorial",
                    "title": "tutorial",
                    "text": "02_ClassSystem",
                    "value": "02_ClassSystem"
                }
            ],
            "name": "init",
            "longname": "Base#init",
            "kind": "function",
            "memberof": "Base",
            "scope": "instance",
            "params": [],
            "$longname": "Base#init",
            "$kind": "method",
            "id": 990,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * Applies all class configs to this instance\n     * @param {Object} config\n     * @param {Boolean} [preventOriginalConfig] True prevents the instance from getting an originalConfig property\n     */",
            "meta": {
                "range": [
                    6283,
                    6473
                ],
                "filename": "Base.mjs",
                "lineno": 216,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100034912",
                    "name": "Base#initConfig",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "config",
                        "preventOriginalConfig"
                    ]
                },
                "vars": {
                    "": null
                }
            },
            "description": "Applies all class configs to this instance",
            "params": [
                {
                    "type": {
                        "names": [
                            "Object"
                        ]
                    },
                    "name": "config"
                },
                {
                    "type": {
                        "names": [
                            "Boolean"
                        ]
                    },
                    "optional": true,
                    "description": "True prevents the instance from getting an originalConfig property",
                    "name": "preventOriginalConfig"
                }
            ],
            "name": "initConfig",
            "longname": "Base#initConfig",
            "kind": "function",
            "memberof": "Base",
            "scope": "instance",
            "$longname": "Base#initConfig",
            "$kind": "method",
            "id": 991,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * Does get triggered with a delay to ensure that Neo.workerId & Neo.worker.Manager are defined\n     * Remote method access via promises\n     */",
            "meta": {
                "range": [
                    6636,
                    7464
                ],
                "filename": "Base.mjs",
                "lineno": 227,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100034941",
                    "name": "Base#initRemote",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                }
            },
            "description": "Does get triggered with a delay to ensure that Neo.workerId & Neo.worker.Manager are defined<br />Remote method access via promises",
            "name": "initRemote",
            "longname": "Base#initRemote",
            "kind": "function",
            "memberof": "Base",
            "scope": "instance",
            "params": [],
            "$longname": "Base#initRemote",
            "$kind": "method",
            "id": 992,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * Override this method to change the order configs are applied to this instance.\n     * @param {Object} config\n     * @param {Boolean} [preventOriginalConfig] True prevents the instance from getting an originalConfig property\n     * @returns {Object} config\n     */",
            "meta": {
                "range": [
                    7749,
                    8144
                ],
                "filename": "Base.mjs",
                "lineno": 256,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100035040",
                    "name": "Base#mergeConfig",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "config",
                        "preventOriginalConfig"
                    ]
                },
                "vars": {
                    "": null
                }
            },
            "description": "Override this method to change the order configs are applied to this instance.",
            "params": [
                {
                    "type": {
                        "names": [
                            "Object"
                        ]
                    },
                    "name": "config"
                },
                {
                    "type": {
                        "names": [
                            "Boolean"
                        ]
                    },
                    "optional": true,
                    "description": "True prevents the instance from getting an originalConfig property",
                    "name": "preventOriginalConfig"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Object"
                        ]
                    },
                    "description": "config"
                }
            ],
            "name": "mergeConfig",
            "longname": "Base#mergeConfig",
            "kind": "function",
            "memberof": "Base",
            "scope": "instance",
            "$longname": "Base#mergeConfig",
            "$kind": "method",
            "id": 993,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     *\n     */",
            "meta": {
                "range": [
                    8173,
                    8437
                ],
                "filename": "Base.mjs",
                "lineno": 274,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100035093",
                    "name": "Base#onAfterConstructed",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                }
            },
            "name": "onAfterConstructed",
            "longname": "Base#onAfterConstructed",
            "kind": "function",
            "memberof": "Base",
            "scope": "instance",
            "params": [],
            "$longname": "Base#onAfterConstructed",
            "$kind": "method",
            "id": 994,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * Gets triggered after all constructors are done\n     * @tutorial 02_ClassSystem\n     */",
            "meta": {
                "range": [
                    8545,
                    8563
                ],
                "filename": "Base.mjs",
                "lineno": 289,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100035121",
                    "name": "Base#onConstructed",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                }
            },
            "description": "Gets triggered after all constructors are done",
            "tags": [
                {
                    "originalTitle": "tutorial",
                    "title": "tutorial",
                    "text": "02_ClassSystem",
                    "value": "02_ClassSystem"
                }
            ],
            "name": "onConstructed",
            "longname": "Base#onConstructed",
            "kind": "function",
            "memberof": "Base",
            "scope": "instance",
            "params": [],
            "$longname": "Base#onConstructed",
            "$kind": "method",
            "id": 995,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * When using set(), configs without a trailing underscore can already be assigned,\n     * so the hasOwnProperty() check will return true\n     * @param {Boolean} [forceAssign=false]\n     */",
            "meta": {
                "range": [
                    8771,
                    9650
                ],
                "filename": "Base.mjs",
                "lineno": 296,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100035125",
                    "name": "Base#processConfigs",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "forceAssign"
                    ]
                },
                "vars": {
                    "": null
                }
            },
            "description": "When using set(), configs without a trailing underscore can already be assigned,<br />so the hasOwnProperty() check will return true",
            "params": [
                {
                    "type": {
                        "names": [
                            "Boolean"
                        ]
                    },
                    "optional": true,
                    "defaultvalue": false,
                    "name": "forceAssign"
                }
            ],
            "name": "processConfigs",
            "longname": "Base#processConfigs",
            "kind": "function",
            "memberof": "Base",
            "scope": "instance",
            "$longname": "Base#processConfigs",
            "$kind": "method",
            "id": 996,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     *\n     * @param {String} className\n     * @param {Object} remote\n     */",
            "meta": {
                "range": [
                    9742,
                    10228
                ],
                "filename": "Base.mjs",
                "lineno": 321,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100035193",
                    "name": "Base.sendRemotes",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "className",
                        "remote"
                    ]
                },
                "vars": {
                    "": null
                }
            },
            "params": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    },
                    "name": "className"
                },
                {
                    "type": {
                        "names": [
                            "Object"
                        ]
                    },
                    "name": "remote"
                }
            ],
            "name": "sendRemotes",
            "longname": "Base.sendRemotes",
            "kind": "function",
            "memberof": "Base",
            "scope": "static",
            "$longname": "Base.sendRemotes",
            "$kind": "method",
            "id": 997,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * Change multiple configs at once, ensuring that all afterSet methods get all new assigned values\n     * @param {Object} values={}\n     */",
            "meta": {
                "range": [
                    10386,
                    10790
                ],
                "filename": "Base.mjs",
                "lineno": 341,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100035251",
                    "name": "Base#set",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "values"
                    ]
                },
                "vars": {
                    "": null
                }
            },
            "description": "Change multiple configs at once, ensuring that all afterSet methods get all new assigned values",
            "params": [
                {
                    "type": {
                        "names": [
                            "Object"
                        ]
                    },
                    "defaultvalue": "{}",
                    "name": "values"
                }
            ],
            "name": "set",
            "longname": "Base#set",
            "kind": "function",
            "memberof": "Base",
            "scope": "instance",
            "$longname": "Base#set",
            "$kind": "method",
            "id": 998,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * Sets the value of a static config by a given key\n     * @param {String} key The key of a staticConfig defined inside static getStaticConfig\n     * @param {*} value\n     * @returns {Boolean} true in case the config exists and got changed\n     */",
            "meta": {
                "range": [
                    11056,
                    11295
                ],
                "filename": "Base.mjs",
                "lineno": 363,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100035298",
                    "name": "Base#setStaticConfig",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "key",
                        "value"
                    ]
                },
                "vars": {
                    "": null
                }
            },
            "description": "Sets the value of a static config by a given key",
            "params": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    },
                    "description": "The key of a staticConfig defined inside static getStaticConfig",
                    "name": "key"
                },
                {
                    "type": {
                        "names": [
                            "*"
                        ]
                    },
                    "name": "value"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Boolean"
                        ]
                    },
                    "description": "true in case the config exists and got changed"
                }
            ],
            "name": "setStaticConfig",
            "longname": "Base#setStaticConfig",
            "kind": "function",
            "memberof": "Base",
            "scope": "instance",
            "$longname": "Base#setStaticConfig",
            "$kind": "method",
            "id": 999,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * <p>Enhancing the toString() method, e.g.</p>\n     * `Neo.create('Neo.button.Base').toString() => \"[object Neo.button.Base (neo-button-1)]\"`\n     * @returns {String}\n     */",
            "meta": {
                "range": [
                    11489,
                    11576
                ],
                "filename": "Base.mjs",
                "lineno": 384,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100035329",
                    "name": "Base#Symbol.toStringTag",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                }
            },
            "description": "<p>Enhancing the toString() method, e.g.</p><br />`Neo.create('Neo.button.Base').toString() => \"[object Neo.button.Base (neo-button-1)]\"`",
            "returns": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    }
                }
            ],
            "name": "toStringTag",
            "longname": "Base#Symbol.toStringTag",
            "kind": "member",
            "memberof": "Base#Symbol",
            "scope": "static",
            "params": [],
            "$longname": "Base#Symbol.toStringTag",
            "$kind": "property",
            "id": 1000,
            "neoClassName": "Neo.core.Base"
        },
        {
            "comment": "/**\n     * <p>Enhancing the instanceof method. Without this change:</p>\n     * `Neo.collection.Base.prototype instanceof Neo.core.Base => true`\n     * <p>With this change:</p>\n     * `Neo.collection.Base.prototype instanceof Neo.core.Base => false`<br>\n     * `Neo.create(Neo.collection.Base) instanceof Neo.core.Base => true`\n     * @returns {Boolean}\n     */",
            "meta": {
                "range": [
                    11947,
                    12146
                ],
                "filename": "Base.mjs",
                "lineno": 391,
                "columnno": 4,
                "path": "/Users/Shared/github/neomjs/pages/node_modules/neo.mjs/src/core",
                "code": {
                    "id": "astnode100035346",
                    "name": "Base.Symbol.hasInstance",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "instance"
                    ]
                },
                "vars": {
                    "": null
                }
            },
            "description": "<p>Enhancing the instanceof method. Without this change:</p><br />`Neo.collection.Base.prototype instanceof Neo.core.Base => true`<br /><p>With this change:</p><br />`Neo.collection.Base.prototype instanceof Neo.core.Base => false`<br><br />`Neo.create(Neo.collection.Base) instanceof Neo.core.Base => true`",
            "returns": [
                {
                    "type": {
                        "names": [
                            "Boolean"
                        ]
                    }
                }
            ],
            "name": "hasInstance",
            "longname": "Base.Symbol.hasInstance",
            "kind": "function",
            "memberof": "Base.Symbol",
            "scope": "static",
            "params": [],
            "$longname": "Base.Symbol.hasInstance",
            "$kind": "method",
            "id": 1001,
            "neoClassName": "Neo.core.Base"
        }
    ]
}