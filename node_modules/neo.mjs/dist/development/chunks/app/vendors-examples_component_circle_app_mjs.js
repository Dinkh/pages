"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-examples_component_circle_app_mjs"],{

/***/ "./examples/component/circle/MainContainer.mjs":
/*!*****************************************************!*\
  !*** ./examples/component/circle/MainContainer.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _src_button_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../src/button/Base.mjs */ "./src/button/Base.mjs");
/* harmony import */ var _src_component_Circle_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../src/component/Circle.mjs */ "./src/component/Circle.mjs");
/* harmony import */ var _ConfigurationViewport_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ConfigurationViewport.mjs */ "./examples/ConfigurationViewport.mjs");
/* harmony import */ var _src_form_field_Range_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../src/form/field/Range.mjs */ "./src/form/field/Range.mjs");





/**
 * @class Neo.examples.component.circle.MainContainer
 * @extends Neo.examples.ConfigurationViewport
 */
class MainContainer extends _ConfigurationViewport_mjs__WEBPACK_IMPORTED_MODULE_2__["default"] {
    static getConfig() {return {
        className: 'Neo.examples.component.circle.MainContainer',
        autoMount: true,
        layout   : {ntype: 'hbox', align: 'stretch'}
    }}

    createConfigurationComponents() {
        let me = this;

        return [{
            module    :  _src_form_field_Range_mjs__WEBPACK_IMPORTED_MODULE_3__["default"],
            labelText : 'height',
            listeners : {change: me.onConfigChange.bind(me, 'height')},
            maxValue  : 800,
            minValue  : 200,
            stepSize  : 1,
            value     : me.exampleComponent.height
        }, {
            module    :  _src_form_field_Range_mjs__WEBPACK_IMPORTED_MODULE_3__["default"],
            labelText : 'innerRadius',
            listeners : {change: me.onConfigChange.bind(me, 'innerRadius')},
            maxValue  : 150,
            minValue  : 30,
            stepSize  : 1,
            value     : me.exampleComponent.innerRadius
        }, {
            module   : _src_form_field_Range_mjs__WEBPACK_IMPORTED_MODULE_3__["default"],
            labelText: 'itemSize',
            listeners: {change: me.onConfigChange.bind(me, 'itemSize')},
            maxValue : 70,
            minValue : 20,
            stepSize : 1,
            value    : me.exampleComponent.itemSize
        }, {
            module   : _src_form_field_Range_mjs__WEBPACK_IMPORTED_MODULE_3__["default"],
            labelText: 'maxItems',
            listeners: {change: me.onConfigChange.bind(me, 'maxItems')},
            maxValue : 15,
            minValue : 1,
            stepSize : 1,
            value    : me.exampleComponent.maxItems
        }, {
            module    :  _src_form_field_Range_mjs__WEBPACK_IMPORTED_MODULE_3__["default"],
            id        : me.id + '__' + 'rotateX',
            labelText : 'rotateX',
            listeners : {change: me.onConfigChange.bind(me, 'rotateX')},
            maxValue  : 180,
            minValue  : -180,
            stepSize  : 1,
            value     : me.exampleComponent.rotateX
        }, {
            module    :  _src_form_field_Range_mjs__WEBPACK_IMPORTED_MODULE_3__["default"],
            id        : me.id + '__' + 'rotateY',
            labelText : 'rotateY',
            listeners : {change: me.onConfigChange.bind(me, 'rotateY')},
            maxValue  : 180,
            minValue  : -180,
            stepSize  : 1,
            value     : me.exampleComponent.rotateY
        }, {
            module    :  _src_form_field_Range_mjs__WEBPACK_IMPORTED_MODULE_3__["default"],
            id        : me.id + '__' + 'rotateZ',
            labelText : 'rotateZ',
            listeners : {change: me.onConfigChange.bind(me, 'rotateZ')},
            maxValue  : 360,
            minValue  : 0,
            stepSize  : 1,
            value     : me.exampleComponent.rotateY
        }, {
            module    :  _src_form_field_Range_mjs__WEBPACK_IMPORTED_MODULE_3__["default"],
            labelText : 'width',
            listeners : {change: me.onConfigChange.bind(me, 'width')},
            maxValue  : 800,
            minValue  : 200,
            stepSize  : 1,
            value     : me.exampleComponent.width
        }, {
            module : _src_button_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
            handler: (() => {me.exampleComponent.expand()}),
            style  : {marginTop: '10px'},
            text   : 'Expand',
            width  : 110
        }, {
            module : _src_button_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
            handler: (() => {me.exampleComponent.collapse()}),
            text   : 'Collapse',
            width  : 110
        }, {
            module : _src_button_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
            text   : 'Reset Rotation',
            width  : 110,
            handler: me.onResetRotation.bind(me)
        }, {
            module : _src_button_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
            handler: (() => {me.exampleComponent.flipCircle()}),
            text   : 'Flip',
            width  : 110
        }];
    }

    createExampleComponent() {
        return Neo.create(_src_component_Circle_mjs__WEBPACK_IMPORTED_MODULE_1__["default"], {
            height: 500,
            width : 500
        });
    }

    onResetRotation() {
        let pre = this.id + '__';

        Neo.getComponent(pre + 'rotateX').value = 0;
        Neo.getComponent(pre + 'rotateY').value = 0;
        Neo.getComponent(pre + 'rotateZ').value = 0;
    }
}

Neo.applyClassConfig(MainContainer);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MainContainer);


/***/ }),

/***/ "./examples/component/circle/app.mjs":
/*!*******************************************!*\
  !*** ./examples/component/circle/app.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "onStart": () => (/* binding */ onStart)
/* harmony export */ });
/* harmony import */ var _MainContainer_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MainContainer.mjs */ "./examples/component/circle/MainContainer.mjs");


const onStart = () => Neo.app({
    mainView: _MainContainer_mjs__WEBPACK_IMPORTED_MODULE_0__["default"],
    name    : 'Neo.examples.component.circle'
});


/***/ }),

/***/ "./src/component/Circle.mjs":
/*!**********************************!*\
  !*** ./src/component/Circle.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _util_ClassSystem_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/ClassSystem.mjs */ "./src/util/ClassSystem.mjs");
/* harmony import */ var _selection_CircleModel_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../selection/CircleModel.mjs */ "./src/selection/CircleModel.mjs");
/* harmony import */ var _collection_Base_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../collection/Base.mjs */ "./src/collection/Base.mjs");
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Base.mjs */ "./src/component/Base.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/VDom.mjs */ "./src/util/VDom.mjs");







/**
 * @class Neo.component.Circle
 * @extends Neo.component.Base
 */
class Circle extends _Base_mjs__WEBPACK_IMPORTED_MODULE_3__["default"] {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.component.Circle'
         * @protected
         */
        className: 'Neo.component.Circle',
        /**
         * @member {String} ntype='circle'
         * @protected
         */
        ntype: 'circle',
        /**
         * Will get set inside the ctor to avoid issues inside the webpack builds
         * @member {String|null} backsideIconPath=Neo.config.resourcesPath + 'images/circle/'
         */
        backsideIconPath: null,
        /**
         * @member {Boolean} circleCenterHasTransitionCls=true
         * @protected
         */
        circleCenterHasTransitionCls: true,
        /**
         * @member {String[]} cls=['neo-circle-component']
         */
        cls: ['neo-circle-component'],
        /**
         * @member {Boolean} collapsed=true
         */
        collapsed: true,
        /**
         * Additional used keys for the selection model
         * @member {Object} keys
         */
        keys: {},
        /**
         * @member {Number} innerRadius_=60
         */
        innerRadius_: 100,
        /**
         * @member {Boolean} isFlipped=false
         */
        isFlipped: false,
        /**
         * Will get set inside the ctor to avoid issues inside the webpack builds
         * @member {String} itemImagePath=Neo.config.resourcesPath + 'examples/images/'
         */
        itemImagePath: null,
        /**
         * @member {Number} itemSize_=30
         */
        itemSize_: 60,
        /**
         * @member {Number} maxItems_=12
         */
        maxItems_: 12,
        /**
         * The amount in px which the outerRadius is bigger than the innerRadius
         * @member {Number} outerRadiusDelta_=10
         */
        outerRadiusDelta_: 10,
        /**
         * @member {Number} rotateX_=0
         */
        rotateX_:0,
        /**
         * @member {Number} rotateY_=0
         */
        rotateY_:0,
        /**
         * @member {Number} rotateZ_=0
         */
        rotateZ_:0,
        /**
         * @member {Neo.selection.Model} selectionModel_=null
         */
        selectionModel_: null,
        /**
         * @member {Neo.collection.Base} store_=null
         */
        store_: null,
        /**
         * @member {String} title_='Circle 1'
         */
        title_: 'Circle 1',
        /**
         * The url for the store to load the data
         * @member {String} url_='../resources/examples/data/ai_contacts.json'
         */
        url_: '../../resources/examples/data/circleContacts.json',
        /**
         * @member {Object} _vdom
         */
        _vdom:
        {tabIndex: -1, cn: [
            {cls: ['neo-circle-center'], style: {}, cn: [
                {cls: ['neo-circle-front'], cn: [
                    {cls: ['neo-circle'], style: {}, cn: [
                        {cls: ['neo-count-items']},
                        {cls: ['neo-circle-name']}
                    ]},
                    {cls: ['neo-outer-circle'], style: {}}
                ]},
                {cls: ['neo-circle-back'], cn: []}
            ]}
        ]}
    }}

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        Neo.main.DomEvents.registerPreventDefaultTargets({
            name: 'contextmenu',
            cls : ['neo-circle', 'neo-circle-back']
        });

        let me           = this,
            domListeners = me.domListeners,
            vdom         = me.vdom;

        if (!me.backsideIconPath) {
            me.backsideIconPath = Neo.config.resourcesPath + 'images/circle/';
        }

        if (!me.itemImagePath) {
            me.itemImagePath = Neo.config.resourcesPath + 'examples/';
        }

        domListeners.push({
            mouseenter: me.expand,
            mouseleave: me.collapse,
            scope     : me
        }, {
            contextmenu: me.onContextMenu,
            delegate   : 'neo-circle-back',
            scope      : me
        }, {
            click   : me.onBacksideIconClick,
            delegate: 'neo-backside-icon',
            scope   : me
        }, {
            mouseenter: me.expandItem,
            mouseleave: me.collapseItem,
            delegate  : 'neo-circle-item',
            scope     : me
        }, {
            contextmenu: me.onContextMenu,
            wheel      : me.onMouseWheel,
            delegate   : 'neo-circle',
            scope      : me
        });

        me.domListeners = domListeners;

        me.store = Neo.create(_collection_Base_mjs__WEBPACK_IMPORTED_MODULE_2__["default"], {
            keyProperty: 'id'
        });

        // silent updates
        me.createBacksideItems(true);
        me.updateInnerCircle(true);
        me.updateOuterCircle(true);
        me.updateTitle(true);

        me.vdom = vdom;
    }

    /**
     * Triggered after the innerRadius config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetInnerRadius(value, oldValue) {
        if (oldValue) {
            let me = this;

            me.updateItemPositions(true);
            me.updateInnerCircle(true);
            me.updateOuterCircle(false);
        }
    }

    /**
     * Triggered after the maxItems config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetMaxItems(value, oldValue) {
        if (oldValue && this.rendered) {
            let me      = this,
                frontEl = me.getFrontEl(),
                vdom    = me.vdom;

            if (value < oldValue) {
                if (me.collapsed) {
                    frontEl.cn.splice(value + 2);
                } else {
                    me.updateItemOpacity(0, true, value);

                    setTimeout(() => {
                        frontEl.cn.splice(value + 2);
                        me.vdom = vdom;
                    }, 300);
                }

                me.updateItemPositions(true);
                me.vdom = vdom;
            } else {
                me.createItems(oldValue, true);
                me.updateItemPositions(true);

                me.promiseVdomUpdate().then(() => {
                    if (!me.collapsed) {
                        me.updateItemOpacity(1, true, oldValue);
                        me.vdom = vdom;
                    }
                });
            }
        }
    }

    /**
     * Triggered after the itemSize config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetItemSize(value, oldValue) {
        let me = this;

        if (oldValue && me.rendered) {
            if (!me.collapsed) {
                me.updateOuterCircle(true);
            }

            me.updateItemPositions();
        }
    }

    /**
     * Triggered after the rotateX config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetRotateX(value, oldValue) {
        oldValue && this.rendered && this.rotate();
    }

    /**
     * Triggered after the rotateY config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetRotateY(value, oldValue) {
        oldValue && this.rendered && this.rotate();
    }

    /**
     * Triggered after the rotateZ config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetRotateZ(value, oldValue) {
        oldValue && this.rendered && this.rotate();
    }

    /**
     * Triggered after the selectionModel config got changed
     * @param {Neo.selection.Model} value
     * @param {Neo.selection.Model} oldValue
     * @protected
     */
    afterSetSelectionModel(value, oldValue) {
        this.rendered && value.register(this);
    }

    /**
     * Triggered after the title config got changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    afterSetTitle(value, oldValue) {
        oldValue && this.updateTitle();
    }

    /**
     * Triggered before the selectionModel config gets changed.
     * @param {Neo.selection.Model} value
     * @param {Neo.selection.Model} oldValue
     * @protected
     */
    beforeSetSelectionModel(value, oldValue) {
        oldValue && oldValue.destroy();

        return _util_ClassSystem_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].beforeSetInstance(value, _selection_CircleModel_mjs__WEBPACK_IMPORTED_MODULE_1__["default"]);
    }

    /**
     * @returns {Object[]}
     */
    calculateItemPositions() {
        let me        = this,
            angle     = 360 / me.maxItems,
            circlePos = [],
            itemSize  = me.itemSize,
            radius    = me.innerRadius + itemSize / 2 + 4,
            i         = 0,
            len       = me.maxItems,
            nr;

        for (; i < len; i++) {
            nr = (angle * i + 180) * Math.PI / 180;

            circlePos.push({
                left: -Math.round(radius * Math.sin(nr)) - itemSize / 2,
                top :  Math.round(radius * Math.cos(nr)) - itemSize / 2
            });
        }

        return circlePos;
    }

    /**
     *
     */
    collapse() {
        let me = this;

        if (!me.collapsed) {
            me.collapsed = true;
            me.updateOuterCircle(true);
            me.updateItemOpacity(0, false);
        }
    }

    /**
     * @param data
     */
    collapseItem(data) {
        let me    = this,
            item  = me.getItemEl(data.path[0].id),
            style = item.cn[0].style,
            vdom  = me.vdom;

        delete style.marginLeft;
        delete style.marginTop;
        delete style.zIndex;

        style.height = me.itemSize + 'px';
        style.width  = me.itemSize + 'px';

        me.vdom = vdom;
    }

    /**
     * @param {Boolean} [silent=false]
     */
    createBacksideItems(silent=false) {
        let me         = this,
            backEl     = me.getBackEl(),
            itemCls    = ['neo-flip', 'neo-pencil', 'neo-trash'],
            itemFile   = ['flip.png', 'pencil.png', 'trash.png'],
            countItems = 3,
            i          = 0,
            vdom       = me.vdom;

        backEl.cn.push(
            {cls: ['neo-count-items']},
            {cls: ['neo-circle-name']}
        );

        for (; i < countItems; i++) {
            backEl.cn.push({
                tag: 'img',
                cls: ['neo-backside-icon', itemCls[i]],
                src: me.backsideIconPath + itemFile[i]
            });
        }

        me[silent ? '_vdom' : 'vdom'] = vdom;
    }

    /**
     * @param {Number} [startIndex=0]
     * @param {Boolean} [silent=false]
     */
    createItems(startIndex=0, silent=false) {
        let me            = this,
            frontEl       = me.getFrontEl(),
            itemPositions = me.calculateItemPositions(),
            countItems    = Math.min(me.store.getCount(), me.maxItems),
            i             = startIndex,
            vdom          = me.vdom;

        for (; i < countItems; i++) {
            frontEl.cn.push({
                id      : me.getItemId(i),
                cls     : ['neo-circle-item'],
                tabIndex: -1,
                style: {
                    height: me.itemSize           + 'px',
                    left  : itemPositions[i].left + 'px',
                    top   : itemPositions[i].top  + 'px',
                    width : me.itemSize           + 'px'
                },
                cn: [{
                    tag  : 'img',
                    cls  : ['neo-circle-item-image'],
                    src  : me.itemImagePath + me.store.getAt(i).image,
                    style: {
                        height: me.itemSize + 'px',
                        width : me.itemSize + 'px'
                    }
                }]
            });
        }

        me[silent ? '_vdom' : 'vdom'] = vdom;
    }

    /**
     *
     */
    expand(data) {
        let me = this;

        if (me.collapsed) {
            me.collapsed = false;
            me.updateOuterCircle(true);
            me.updateItemOpacity(1, false);
        }
    }

    /**
     * @param data
     */
    expandItem(data) {
        let me   = this,
            item = me.getItemEl(data.path[0].id),
            vdom = me.vdom;

        item.cn[0].style = {
            height    : (me.itemSize + 20) + 'px',
            marginLeft: -10 + 'px',
            marginTop : -10 + 'px',
            width     : (me.itemSize + 20) + 'px',
            zIndex    : 40
        };

        me.vdom = vdom;
    }

    flipCircle() {
        let me   = this,
            vdom = me.vdom;

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_4__["default"][me.isFlipped ? 'remove': 'add'](vdom.cn[0].cls, 'neo-flipped');

        me.isFlipped = !me.isFlipped;
        me.vdom = vdom;
    }

    /**
     *
     */
    getBackEl() {
        return this.vdom.cn[0].cn[1];
    }

    /**
     *
     */
    getFrontEl() {
        return this.vdom.cn[0].cn[0];
    }

    /**
     *
     */
    getInnerCircle() {
        return this.vdom.cn[0].cn[0].cn[0];
    }

    /**
     * @param {String} itemId
     * @returns {Object}
     */
    getItemEl(itemId) {
        let item = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_5__["default"].findVdomChild(this.getFrontEl(), itemId);

        return item?.vdom;
    }

    /**
     * @param {Number} index
     * @returns {String}
     */
    getItemId(index) {
        let store = this.store;

        return this.id + '__' + store.getAt(index)[store.keyProperty];
    }

    /**
     * @param {String} vnodeId
     * @returns {String|Number} itemId
     */
    getItemRecordId(vnodeId) {
        let itemId   = vnodeId.split('__')[1],
            model    = this.store.model,
            keyField = model?.getField(model.keyProperty);

        if (keyField?.type.toLowerCase() === 'number') {
            itemId = parseInt(itemId);
        }

        return itemId;
    }

    /**
     *
     */
    getOuterCircle() {
        return this.vdom.cn[0].cn[0].cn[1];
    }

    /**
     *
     */
    loadData() {
        let me = this;

        // todo: use a real store, not defined here for the examples
        Neo.Xhr.promiseJson({
            insideNeo: true,
            url      : me.url
        }).then(data => {
            me.store.items = data.json.data;

            setTimeout(() => {
                me.updateTitle();
                me.createItems();
            }, 100);
        }).catch(err => {
            console.log('Error for Neo.Xhr.request', err, me.id);
        });
    }

    /**
     * @param {Object} data
     */
    onBacksideIconClick(data) {
        let me  = this,
            cls = data.path[0].cls;

             if (cls.includes('neo-flip'))   {me.flipCircle();}
        else if (cls.includes('neo-pencil')) {console.log('edit circle');}
        else if (cls.includes('neo-trash'))  {console.log('delete circle');}
    }

    /**
     *
     */
    onConstructed() {
        super.onConstructed();

        let me = this;

        if (me.selectionModel) {
            me.selectionModel.register(me);
        }

        me.loadData();
    }

    /**
     * @param {Object} data
     */
    onContextMenu(data) {
        this.flipCircle();
    }

    /**
     * @param {Object} data
     */
    onMouseWheel(data) {
        let me      = this,
            deltaY  = data.deltaY,
            rotateZ = me.rotateZ;

        if (deltaY >  1 || deltaY < -1) {rotateZ += deltaY;}

        if (rotateZ < 0) {
            rotateZ = 0;
        }

        if (!(me.rotateZ === 0 && rotateZ === 0)) {
            me.rotateZ = rotateZ;

            me.rotate();
        }
    }

    /**
     *
     */
    rotate() {
        let me             = this,
            vdom           = me.vdom,
            circleCenterEl = vdom.cn[0],
            transform = [
                'rotateX(' + me.rotateX + 'deg)',
                'rotateY(' + me.rotateY + 'deg)',
                'rotateZ(' + me.rotateZ + 'deg)'
            ].join(' ');

        if (me.circleCenterHasTransitionCls) {
            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_4__["default"].add(circleCenterEl.cls, 'no-transition');

            me.circleCenterHasTransitionCls = false;

            me.promiseVdomUpdate().then(() => {
                me.updateItemAngle(true);
                circleCenterEl.style.transform = transform;
                me.vdom = vdom;
            });
        } else {
            me.updateItemAngle(true);
            circleCenterEl.style.transform = transform;
            me.vdom = vdom;
        }
    }

    /**
     * @param {Boolean} [silent=false]
     */
    updateInnerCircle(silent=false) {
        let me           = this,
            innerCircle  = me.getInnerCircle(),
            innerRadius  = me.innerRadius,
            innerSize    = innerRadius * 2,
            vdom         = me.vdom;

        Object.assign(innerCircle.style, {
            height: innerSize + 'px',
            left  : '-' + innerRadius + 'px',
            top   : '-' + innerRadius + 'px',
            width : innerSize + 'px'
        });

        me[silent ? '_vdom' : 'vdom'] = vdom;
    }

    /**
     * @param {Boolean} [silent=false]
     */
    updateItemAngle(silent=false) {
        let me      = this,
            frontEl = me.getFrontEl(),
            vdom    = me.vdom,
            i       = 2,
            len     = frontEl.cn.length;

        for (; i < len; i++) {
            frontEl.cn[i].style.transform = 'rotateZ(' + (-me.rotateZ) + 'deg)';
        }

        me[silent ? '_vdom' : 'vdom'] = vdom;
    }

    /**
     * @param {Number} value
     * @param {Boolean} [silent=false]
     * @param {Number} [startIndex=0]
     */
    updateItemOpacity(value, silent=false, startIndex=0) {
        let me      = this,
            i       = startIndex + 2,
            frontEl = me.getFrontEl(),
            len     = frontEl.cn.length,
            vdom    = me.vdom;

        for (; i < len; i++) {
            frontEl.cn[i].style.opacity = value;
        }

        me[silent ? '_vdom' : 'vdom'] = vdom;
    }

    /**
     * @param {Boolean} [silent=false]
     */
    updateItemPositions(silent=false) {
        let me            = this,
            frontEl       = me.getFrontEl(),
            itemPositions = me.calculateItemPositions(),
            itemSize      = me.itemSize,
            vdom          = me.vdom,
            i             = 2,
            len           = Math.min(frontEl.cn.length, itemPositions.length + 2);

        for (; i < len; i++) {
            Object.assign(frontEl.cn[i].style, {
                height: itemSize                + 'px',
                left  : itemPositions[i-2].left + 'px',
                top   : itemPositions[i-2].top  + 'px',
                width : itemSize                + 'px'
            });

            Object.assign(frontEl.cn[i].cn[0].style, {
                height: itemSize + 'px',
                width : itemSize + 'px'
            });
        }

        me[silent ? '_vdom' : 'vdom'] = vdom;
    }

    /**
     * @param {Boolean} [silent=false]
     */
    updateOuterCircle(silent=false) {
        let me           = this,
            itemSize = me.itemSize,
            outerCircle  = me.getOuterCircle(),
            outerRadius  = me.innerRadius + me.outerRadiusDelta,
            outerSize    = me.collapsed ? outerRadius * 2 : (outerRadius + itemSize) * 2,
            vdom         = me.vdom,
            opts;

        if (me.collapsed) {
            opts = {
                height: outerSize + 'px',
                left  : '-' + outerRadius + 'px',
                top   : '-' + outerRadius + 'px',
                width : outerSize + 'px'
            };
        } else {
            opts = {
                height: outerSize + 'px',
                left  : '-' + (outerRadius + itemSize) + 'px',
                top   : '-' + (outerRadius + itemSize) + 'px',
                width : outerSize + 'px'
            };
        }

        Object.assign(outerCircle.style, opts);

        me[silent ? '_vdom' : 'vdom'] = vdom;
    }

    /**
     * @param {Boolean} [silent=false]
     */
    updateTitle(silent=false) {
        let me          = this,
            innerCircle = me.getInnerCircle(),
            vdom        = me.vdom;

        innerCircle.cn[0].html = me.store?.getCount() || 0;
        innerCircle.cn[1].html = me.title;

        me[silent ? '_vdom' : 'vdom'] = vdom;
    }
}

Neo.applyClassConfig(Circle);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Circle);


/***/ }),

/***/ "./src/form/field/Range.mjs":
/*!**********************************!*\
  !*** ./src/form/field/Range.mjs ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Number_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Number.mjs */ "./src/form/field/Number.mjs");


/**
 * @class Neo.form.field.Range
 * @extends Neo.form.field.Number
 */
class Range extends _Number_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.form.field.Range'
         * @protected
         */
        className: 'Neo.form.field.Range',
        /**
         * @member {String} ntype='rangefield'
         * @protected
         */
        ntype: 'rangefield',
        /**
         * True shows a clear trigger in case the field has a non empty value.
         * @member {Boolean} clearable=false
         */
        clearable: false,
        /**
         * @member {String[]} cls=['neo-rangefield','neo-textfield']
         */
        cls: ['neo-rangefield', 'neo-textfield'],
        /**
         * Value for the inputType_ textfield config
         * @member {String} inputType='range'
         */
        inputType: 'range',
        /**
         * @member {Array} tickmarks_=[]
         */
        tickmarks_: [],
        /**
         * @member {Boolean} useInputEvent=false
         */
        useInputEvent : false,
        /**
         * Disables the field.Number buttons
         * @member {Boolean} useInputEvent=false
         */
        useSpinButtons: false
    }}

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me           = this,
            domListeners = me.domListeners,
            inputEl      = me.vdom.cn[1];

        if (me.useInputEvent) {
            domListeners.push({
                input: {
                    fn    : me.onInputValueChange,
                    id    : me.vdom.cn[1].id,
                    scope : me
                }
            });

            me.domListeners = domListeners;
        }

        inputEl.cls = ['neo-rangefield-input']; // replace neo-textfield-input
    }

    /**
     * Triggered after the tickmarks config got changed
     * @param {Array} value
     * @param {Array} oldValue
     * @protected
     */
    afterSetTickmarks(value, oldValue) {
        // todo
    }
}

Neo.applyClassConfig(Range);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Range);


/***/ }),

/***/ "./src/selection/CircleModel.mjs":
/*!***************************************!*\
  !*** ./src/selection/CircleModel.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Model_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Model.mjs */ "./src/selection/Model.mjs");


/**
 * @class Neo.selection.CircleModel
 * @extends Neo.selection.Model
 */
class CircleModel extends _Model_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.selection.CircleModel'
         * @protected
         */
        className: 'Neo.selection.CircleModel',
        /**
         * @member {String} ntype='selection-circlemodel'
         * @protected
         */
        ntype: 'selection-circlemodel'
    }}

    /**
     * @param {Object} data
     */
    onKeyDownLeft(data) {
        this.onNavKey(data, -1);
    }

    /**
     * @param {Object} data
     */
    onKeyDownRight(data) {
        this.onNavKey(data, 1);
    }

    /**
     * @param {Object} data
     * @param {Number} step
     */
    onNavKey(data, step) {
        let me       = this,
            item     = data.path[0],
            view     = me.view,
            store    = view.store,
            maxItems = Math.min(store.getCount(), view.maxItems - 1),
            index, itemId, recordId;

        if (item.cls.includes('neo-circle-item')) {
            recordId = parseInt(view.getItemRecordId(item.id));
            index    = store.indexOf(recordId) + step;

                 if (index < 0)        {index = maxItems;}
            else if (index > maxItems) {index = 0;}
        } else {
            index = 0;
        }

        itemId = view.getItemId(index);

        me.select(itemId);
        view.focus(itemId);
    }

    /**
     * @param {Neo.component.Base} component
     */
    register(component) {
        super.register(component);

        let me   = this,
            id   = me.id,
            view = me.view;

        if (view.keys) {
            view.keys._keys.push(
                {fn: 'onKeyDownLeft'  ,key: 'Down'  ,scope: id},
                {fn: 'onKeyDownLeft'  ,key: 'Left'  ,scope: id},
                {fn: 'onKeyDownRight' ,key: 'Right' ,scope: id},
                {fn: 'onKeyDownRight' ,key: 'Up'    ,scope: id}
            );
        }
    }

    /**
     *
     */
    unregister() {
        let me   = this,
            id   = me.id,
            view = me.view;

        if (view.keys) {
            view.keys.removeKeys([
                {fn: 'onKeyDownLeft'  ,key: 'Down'  ,scope: id},
                {fn: 'onKeyDownLeft'  ,key: 'Left'  ,scope: id},
                {fn: 'onKeyDownRight' ,key: 'Right' ,scope: id},
                {fn: 'onKeyDownRight' ,key: 'Up'    ,scope: id}
            ]);
        }

        super.unregister();
    }
}

Neo.applyClassConfig(CircleModel);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CircleModel);


/***/ }),

/***/ "./src/selection/Model.mjs":
/*!*********************************!*\
  !*** ./src/selection/Model.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Base.mjs */ "./src/core/Base.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _core_Observable_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/Observable.mjs */ "./src/core/Observable.mjs");




/**
 * @class Neo.selection.Model
 * @extends Neo.core.Base
 */
class Model extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static getStaticConfig() {return {
        /**
         * True automatically applies the core/Observable.mjs mixin
         * @member {Boolean} observable=true
         * @static
         */
        observable: true
    }}

    static getConfig() {return {
        /**
         * @member {String} className='Neo.selection.Model'
         * @protected
         */
        className: 'Neo.selection.Model',
        /**
         * @member {String} ntype='selection-model'
         * @protected
         */
        ntype: 'selection-model',
        /**
         * Placeholder for extended classes to add a custom css rule to this owner component
         * @member {String|null} cls=null
         * @protected
         */
        cls: null,
        /**
         * @member {Array} items_=null
         * @protected
         */
        items_: null,
        /**
         * @member {String} selectedCls='selected'
         */
        selectedCls: 'neo-selected',
        /**
         * @member {Boolean} singleSelect=true
         */
        singleSelect: true,
        /**
         * Internally saves the view id, but the getter will return the matching instance
         * @member {Object} view_=null
         * @protected
         */
        view_: null
    }}

    /**
     * Gets triggered before getting the value of the items config
     * @param {Array|null} value
     * @returns {Array}
     */
    beforeGetItems(value) {
        if (!value) {
            this._items = value = [];
        }

        return value;
    }

    /**
     * Gets triggered before getting the value of the view config
     * @param {String} value
     * @returns {Neo.component.Base}
     */
    beforeGetView(value) {
        return Neo.getComponent(this._view);
    }

    /**
     * Gets triggered before setting the value of the view config
     * @returns {String} the view id
     */
    beforeSetView(value) {
        return value && value.id;
    }

    /**
     *
     */
    addDomListener() {}

    /**
     * @param {Object} item
     * @param {Boolean} [silent] true to prevent a vdom update
     * @param {Array} [itemCollection]
     * @param {String} [selectedCls]
     */
    deselect(item, silent, itemCollection, selectedCls) {
        let me   = this,
            view = me.view,
            vdom = view.vdom,
            node = view.getVdomChild(item), // todo: support for nodes (right now limited to ids)
            cls;

        if (node) {
            cls = node.cls || [];
            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(cls, selectedCls || me.selectedCls);
            node.cls = cls;
        }

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(itemCollection || me.items, item);

        if (!silent) {
            view.vdom = vdom;
        }
    }

    /**
     * @param {Boolean} [silent] true to prevent a vdom update
     */
    deselectAll(silent) {
        let me    = this,
            items = [...me.items],
            view  = me.view,
            vdom  = view.vdom;

        items.forEach(item => {
            me.deselect(item, true);
        });

        if (!silent && items.length > 0) {
            view.vdom = vdom;
        }
    }

    /**
     *
     */
    destroy() {
        this.unregister();
        super.destroy();
    }

    /**
     * @returns {Array} this.items
     */
    getSelection() {
        return this.items;
    }

    /**
     * @returns {Boolean} true in case there is a selection
     */
    hasSelection() {
        return this.items.length > 0;
    }

    /**
     * @param {String} id
     * @returns {Boolean} true in case the item is selected
     */
    isSelected(id) {
        return this.items.includes(id);
    }

    /**
     * @param {Neo.component.Base} component
     */
    register(component) {
        let me  = this,
            cls = component.cls || [];

        if (me.cls && !cls.includes(me.cls)) {
            cls.push(me.cls);
            component.cls = cls;
        }

        me.view = component;
        me.addDomListener();
    }

    /**
     *
     */
    removeDomListeners() {
        let me           = this,
            component    = me.view,
            domListeners = [...component.domListeners];

        component.domListeners.forEach(listener => {
            if (listener.scope === me) {
                _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(domListeners, listener);
            }
        });

        component.domListeners = domListeners;
    }

    /**
     * @param {Object|Object[]|String[]} items
     * @param {Array} [itemCollection]
     * @param {String} [selectedCls]
     */
    select(items, itemCollection, selectedCls) {
        items = Array.isArray(items) ? items : [items];

        let me   = this,
            view = me.view,
            vdom = view.vdom,
            cls;

        itemCollection = itemCollection || me.items;

        if (!Neo.isEqual(itemCollection, items)) {
            if (me.singleSelect) {
                me.deselectAll(true);
            }

            items.forEach(node => {
                if (typeof node === 'string') {
                    node = view.getVdomChild(node);
                }

                if (node) {
                    cls = node.cls || [];
                    _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(cls, selectedCls || me.selectedCls);
                    node.cls = cls;
                }
            });

            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].add(itemCollection, items);

            view[view.silentSelect ? '_vdom' : 'vdom'] = vdom;

            view.onSelect?.(items);
        }
    }

    /**
     * @param {Object} item
     */
    toggleSelection(item) {
        let me = this;

        if (me.isSelected(item)) {
            me.deselect(item);
        } else {
            me.select(item);
        }
    }

    /**
     *
     */
    unregister() {
        let me  = this,
            cls = me.view.cls || [];

        if (me.cls && cls.includes(me.cls)) {
            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].remove(cls, me.cls);
            me.view.cls = cls;
        }

        me.deselectAll();

        me.removeDomListeners();
    }
}

Neo.applyClassConfig(Model);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Model);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,