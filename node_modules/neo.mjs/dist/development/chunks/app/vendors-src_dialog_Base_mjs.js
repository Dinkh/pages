(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-src_dialog_Base_mjs"],{

/***/ "./src/dialog/Base.mjs":
/*!*****************************!*\
  !*** ./src/dialog/Base.mjs ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Base)
/* harmony export */ });
/* harmony import */ var _container_Panel_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../container/Panel.mjs */ "./src/container/Panel.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/VDom.mjs */ "./src/util/VDom.mjs");




let DragZone;

/**
 * @class Neo.dialog.Base
 * @extends Neo.container.Panel
 */
class Base extends _container_Panel_mjs__WEBPACK_IMPORTED_MODULE_0__.default {
    static getStaticConfig() {return {
        /**
         * Valid values for closeAction
         * @member {String[]} closeActions=['close', 'hide']
         * @protected
         * @static
         */
        iconPositions: ['top', 'right', 'bottom', 'left']
    }}

    static getConfig() {return {
        /**
         * @member {String} className='Neo.dialog.Base'
         * @protected
         */
        className: 'Neo.dialog.Base',
        /**
         * @member {String} ntype='dialog'
         * @protected
         */
        ntype: 'dialog',
        /**
         * @member {Boolean} animateOnDragEnd=false
         */
        animateOnDragEnd: false,
        /**
         * @member {String|null} animateTargetId_=null
         */
        animateTargetId_: null,
        /**
         * @member {Boolean} autoMount=true
         */
        autoMount: true,
        /**
         * @member {Boolean} autoRender=true
         */
        autoRender: true,
        /**
         * Either a dom node id, 'document.body' or null
         * @member {String|null} boundaryContainerId='document.body'
         */
        boundaryContainerId: 'document.body',
        /**
         * Define what happens in case you click on the close button
         * close will destroy the instance, hide will keep it for later re-use.
         * Valid values: close, hide
         * @member {String} closeAction='close'
         */
        closeAction: 'close',
        /**
         * @member {String[]} cls=['neo-dialog','neo-panel','neo-container']
         * @protected
         */
        cls: ['neo-dialog', 'neo-panel', 'neo-container'],
        /**
         * @member {Boolean} draggable_=true
         */
        draggable_: true,
        /**
         * @member {Boolean} dragListenersAdded=false
         * @protected
         */
        dragListenersAdded: false,
        /**
         * @member {Neo.draggable.DragZone|null} dragZone=null
         */
        dragZone: null,
        /**
         * @member {Object} dragZoneConfig=null
         */
        dragZoneConfig: null,
        /**
         * @member {Neo.container.Toolbar|null} headerToolbar=null
         */
        headerToolbar: null,
        /**
         * @member {Boolean} isDragging=false
         * @protected
         */
        isDragging: false,
        /**
         * @member {String} maximizeCls='far fa-window-maximize'
         */
        maximizeCls: 'far fa-window-maximize',
        /**
         * @member {Boolean} maximized_=false
         */
        maximized_: false,
        /**
         * @member {String} minimizeCls='far fa-window-minimize'
         */
        minimizeCls: 'far fa-window-minimize',
        /**
         * @member {Boolean} resizable_=true
         */
        resizable_: true,
        /**
         * @member {Object} resizablePluginConfig=null
         */
        resizablePluginConfig: null,
        /**
         * @member {String} title='Dialog Title'
         */
        title: 'Dialog Title',
        /**
         * @member {Object} _vdom
         */
        _vdom:
        {cls: ['neo-dialog-wrapper'], cn: [
            {cn: []}
        ]}
    }}

    /**
     *
     * @param {Object} config
     */
    constructor(config) {
        super(config);

        let me = this;

        me.vdom.id = me.getWrapperId();

        me.createHeader();

        if (me.animateTargetId) {
            me.animateShow();
        }
    }

    /**
     * Triggered after the animateTargetId config got changed
     * @param {String|null} value
     * @param {String|null} oldValue
     * @protected
     */
    afterSetAnimateTargetId(value, oldValue) {
        this.autoMount  = !value;
        this.autoRender = !value;
    }

    /**
     * Triggered after the appName config got changed
     * @param {String|null} value
     * @param {String|null} oldValue
     * @protected
     */
    afterSetAppName(value, oldValue) {
        let me        = this,
            resizable = me.getPlugin({flag: 'resizable'});

        if (me.dragZone) {
            me.dragZone.appName = value;
        }

        if (resizable) {
            resizable.appName = value;
        }

        super.afterSetAppName(value, oldValue);
    }

    /**
     * Triggered after the draggable config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetDraggable(value, oldValue) {
        let me           = this,
            domListeners = me.domListeners,
            cls;

        if (oldValue !== undefined && me.headerToolbar) {
            cls = me.headerToolbar.cls;
            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__.default[value ? 'add' : 'remove'](cls, 'neo-draggable');
            me.headerToolbar.cls = cls;
        }

        if (value) {
            __webpack_require__.e(/*! import() */ "vendors-src_draggable_DragZone_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ../draggable/DragZone.mjs */ "./src/draggable/DragZone.mjs")).then(module => {
                DragZone = module.default;

                if (!me.dragListenersAdded) {
                    domListeners.push(
                        {'drag:end'  : me.onDragEnd,   scope: me, delegate: '.neo-header-toolbar'},
                        {'drag:start': me.onDragStart, scope: me, delegate: '.neo-header-toolbar'}
                    );

                    if (me.dragZoneConfig && me.dragZoneConfig.alwaysFireDragMove) {
                        domListeners.push(
                            {'drag:move': me.onDragMove, scope: me, delegate: '.neo-header-toolbar'}
                        );
                    }

                    me.domListeners       = domListeners;
                    me.dragListenersAdded = true;
                }
            });
        }
    }

    /**
     * Triggered after the maximized config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetMaximized(value, oldValue) {
        let me   = this,
            vdom = me.vdom,
            cls  = vdom.cls;

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__.default[value ? 'add' : 'remove'](cls, 'neo-maximized');
        me.vdom = vdom;
    }

    /**
     * Triggered after the mounted config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetMounted(value, oldValue) {
        super.afterSetMounted(value, oldValue);

        if (value) {
            let me = this;

            if (me.animateTargetId) {
                Neo.currentWorker.promiseMessage('main', {
                    action : 'updateDom',
                    appName: me.appName,
                    deltas : [{
                        action: 'removeNode',
                        id    : me.getAnimateTargetId()
                    }]
                });
            }
        }
    }

    /**
     * Triggered after the resizable config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetResizable(value, oldValue) {
        if (value) {
            Promise.all(/*! import() */[__webpack_require__.e("vendors-src_draggable_DragZone_mjs"), __webpack_require__.e("vendors-src_plugin_Resizable_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ../plugin/Resizable.mjs */ "./src/plugin/Resizable.mjs")).then(module => {
                let me      = this,
                    plugins = me.plugins || [];

                if (!me.getPlugin({flag: 'resizable'})) {
                    plugins.push({
                        module       : module.default,
                        appName      : me.appName,
                        delegationCls: 'neo-dialog',
                        flag         : 'resizable',
                        ...me.resizablePluginConfig || {}
                    });

                    me.plugins = plugins;
                }
            });
        }
    }

    /**
     *
     */
    animateHide() {
        let me      = this,
            appName = me.appName,
            id      = me.getAnimateTargetId();

        Neo.main.DomAccess.getBoundingClientRect({
            appName: appName,
            id     : [me.id, me.animateTargetId]
        }).then(rects => {
            Neo.currentWorker.promiseMessage('main', {
                action  : 'mountDom',
                appName : appName,
                html    : `<div id="${id}" class="neo-animate-dialog neo-hide" style="height:${rects[0].height}px;left:${rects[0].left}px;top:${rects[0].top}px;width:${rects[0].width}px;"></div>`,
                parentId: 'document.body'
            }).then(() => {
                setTimeout(() => {
                    Neo.currentWorker.promiseMessage('main', {
                        action : 'updateDom',
                        appName: appName,
                        deltas : [{
                            id   : id,
                            style: {
                                height: `${rects[1].height}px`,
                                left  : `${rects[1].left  }px`,
                                top   : `${rects[1].top   }px`,
                                width : `${rects[1].width }px`
                            }
                        }]
                    }).then(() => {
                        setTimeout(() => {
                            Neo.currentWorker.promiseMessage('main', {
                                action : 'updateDom',
                                appName: appName,
                                deltas : [{
                                    action: 'removeNode',
                                    id    : id
                                }]
                            });
                        }, 250);
                    });
                }, 30);

                me.closeOrHide(false);
            });
        });
    }

    /**
     *
     */
    animateShow() {
        let me      = this,
            appName = me.appName,
            id      = me.getAnimateTargetId();

        Neo.main.DomAccess.getBoundingClientRect({
            appName: appName,
            id     : me.animateTargetId
        }).then(rect => {
            Neo.currentWorker.promiseMessage('main', {
                action  : 'mountDom',
                appName : appName,
                html    : `<div id="${id}" class="neo-animate-dialog" style="height:${rect.height}px;left:${rect.left}px;top:${rect.top}px;width:${rect.width}px;"></div>`,
                parentId: 'document.body'
            }).then(() => {
                setTimeout(() => {
                    Neo.currentWorker.promiseMessage('main', {
                        action  : 'updateDom',
                        appName : appName,

                        deltas: [{
                            id   : id,
                            style: {
                                height   : me.wrapperStyle && me.wrapperStyle.height || '50%',
                                left     : '50%',
                                top      : '50%',
                                transform: 'translate(-50%, -50%)',
                                width    : me.wrapperStyle && me.wrapperStyle.width || '50%'
                            }
                        }]
                    }).then(() => {
                        setTimeout(() => {
                            me.show(false);
                        }, 200);
                    });
                }, 30);
            });
        });
    }

    /**
     * Triggered before the closeAction config gets changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    beforeSetCloseAction(value, oldValue) {
        return this.beforeSetEnumValue(value, oldValue, 'closeAction');
    }

    /**
     *
     * @param {Boolean} [animate=!!this.animateTargetId]
     */
    close(animate=!!this.animateTargetId) {
        let me = this;

        if (animate) {
            me.animateHide();
        } else {
            me.fire('close');
            me.destroy(true);
        }
    }

    /**
     *
     * @param {Boolean} [animate=!!this.animateTargetId]
     */
    closeOrHide(animate=!!this.animateTargetId) {
        this[this.closeAction](animate);
    }

    /**
     *
     */
    createHeader() {
        let me      = this,
            cls     = ['neo-header-toolbar', 'neo-toolbar'],
            headers = me.headers || [];

        if (me.draggable) {
            cls.push('neo-draggable');
        }

        headers.unshift({
            cls  : cls,
            dock : 'top',
            id   : me.getHeaderToolbarId(),
            items: [{
                ntype: 'label',
                text : me.title
            }, '->', {
                iconCls: 'far fa-window-maximize',
                handler: me.maximize.bind(me)
            }, {
                iconCls: 'far fa-window-close',
                handler: me.closeOrHide.bind(me)
            }]
        });

        me.headers = headers;
    }

    /**
     * Returns the id of the animation node
     * @returns {String}
     */
    getAnimateTargetId() {
        return this.id + '-animate';
    }

    /**
     * Returns the id of the header toolbar
     * @returns {String}
     */
    getHeaderToolbarId() {
        return this.id + '-header-toolbar';
    }

    /**
     *
     * @returns {Object} vdom
     */
    getProxyVdom() {
        let vdom = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_2__.default.clone(this.vdom);

        // this call expects a fixed dialog structure
        // todo: a panel content container could get a flag which we can query for instead
        vdom.cn[0].cn[1].cn = [];

        return vdom;
    }

    /**
     *
     * @returns {Object} The new vdom root
     */
    getVdomRoot() {
        return this.vdom.cn[0];
    }

    /**
     *
     * @returns {Object} The new vnode root
     */
    getVnodeRoot() {
        return this.vnode.childNodes[0];
    }

    /**
     * Returns the id of the header toolbar
     * @returns {String}
     */
    getWrapperId() {
        return this.id + '-wrapper';
    }

    /**
     *
     * @param {Boolean} [animate=!!this.animateTargetId]
     */
    hide(animate=!!this.animateTargetId) {
        let me = this;

        if (animate) {
            me.animateHide();
        } else {
            me.unmount();
            me.fire('hide');
        }
    }

    /**
     * @param {Object} data
     */
    maximize(data) {
        let me = this;

        data.component.iconCls = me.maximized ? me.maximizeCls : me.minimizeCls;

        me.maximized = !me.maximized;
    }

    /**
     *
     */
    onConstructed() {
        super.onConstructed();

        let me = this;

        me.headerToolbar = me.down({
            id: me.getHeaderToolbarId()
        });
    }

    /**
     *
     * @param data
     */
    onDragEnd(data) {
        let me = this,
            initialTransitionProperty, wrapperStyle;

        if (!me.maximized) {
            Neo.main.DomAccess.getBoundingClientRect({
                appName: me.appName,
                id     : me.dragZone.dragProxy.id
            }).then(rect => {
                wrapperStyle = me.wrapperStyle;

                Object.assign(wrapperStyle, {
                    height   : `${rect.height}px`,
                    left     : `${rect.left}px`,
                    opacity  : 1,
                    top      : `${rect.top}px`,
                    transform: 'none',
                    width    : `${rect.width}px`
                });

                if (!me.animateOnDragEnd) {
                    initialTransitionProperty = wrapperStyle.transitionProperty || null;

                    wrapperStyle.transitionProperty = 'none';

                    setTimeout(() => {
                        wrapperStyle = me.wrapperStyle;

                        wrapperStyle.transitionProperty = initialTransitionProperty;

                        me.wrapperStyle = wrapperStyle;
                    }, 50);
                }

                me.wrapperStyle = wrapperStyle;

                me.dragZone.dragEnd(data);

                // we need a reset, otherwise we do not get a change event for the next onDragStart() call
                me.dragZone.boundaryContainerId = null;
                me.isDragging                   = false;
            });
        }
    }

    /**
     * This method will only get triggered in case alwaysFireDragMove is included inside the dragZoneConfig
     * @param data
     */
    onDragMove(data) {
        this.dragZone.dragMove(data);
    }

    /**
     *
     * @param data
     */
    onDragStart(data) {
        let me           = this,
            wrapperStyle = me.wrapperStyle || {},
            resizablePlugin;

        if (!me.maximized) {
            me.isDragging = true;

            resizablePlugin = me.getPlugin({flag: 'resizable'});

            if (resizablePlugin) {
                resizablePlugin.removeAllNodes();
            }

            if (!me.dragZone) {
                me.dragZone = Neo.create({
                    module             : DragZone,
                    appName            : me.appName,
                    bodyCursorStyle    : 'move !important',
                    boundaryContainerId: me.boundaryContainerId,
                    dragElement        : me.vdom,
                    dragProxyConfig    : {vdom: me.getProxyVdom()},
                    owner              : me,
                    useProxyWrapper    : false,
                    ...me.dragZoneConfig || {}
                });

                me.fire('dragZoneCreated', {
                    dragZone: me.dragZone,
                    id      : me.id
                });
            } else {
                me.dragZone.boundaryContainerId = me.boundaryContainerId;
            }

            me.dragZone.dragStart(data);

            wrapperStyle.opacity = 0.7;

            me.wrapperStyle = wrapperStyle;
        }
    }

    /**
     *
     * @param {Boolean} [animate=!!this.animateTargetId]
     */
    show(animate=!!this.animateTargetId) {
        let me = this;

        if (animate) {
            me.animateShow();
        } else {
            me.render(true);
            me.fire('show');
        }
    }
}

Neo.applyClassConfig(Base);




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL2RpYWxvZy9CYXNlLm1qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQThDO0FBQ0w7QUFDRDs7QUFFeEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIseURBQUs7QUFDeEIsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4QjtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE9BQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsWUFBWTtBQUNoQztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixZQUFZO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsNEJBQTRCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwyQkFBMkI7QUFDL0M7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0E7QUFD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QjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQSxrQ0FBa0MsWUFBWTtBQUM5QyxrQ0FBa0MsVUFBVTtBQUM1QztBQUNBLGtDQUFrQyxTQUFTO0FBQzNDO0FBQ0Esa0NBQWtDLFdBQVc7QUFDN0MsaUJBQWlCOztBQUVqQjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEOztBQUVBO0FBQ0E7O0FBRUEsNENBQTRDLGtCQUFrQjs7QUFFOUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHdCQUF3QjtBQUNsRTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUV5QiIsImZpbGUiOiJjaHVua3MvYXBwL3ZlbmRvcnMtc3JjX2RpYWxvZ19CYXNlX21qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQYW5lbCAgICBmcm9tICcuLi9jb250YWluZXIvUGFuZWwubWpzJztcbmltcG9ydCBOZW9BcnJheSBmcm9tICcuLi91dGlsL0FycmF5Lm1qcyc7XG5pbXBvcnQgVkRvbVV0aWwgZnJvbSAnLi4vdXRpbC9WRG9tLm1qcyc7XG5cbmxldCBEcmFnWm9uZTtcblxuLyoqXG4gKiBAY2xhc3MgTmVvLmRpYWxvZy5CYXNlXG4gKiBAZXh0ZW5kcyBOZW8uY29udGFpbmVyLlBhbmVsXG4gKi9cbmNsYXNzIEJhc2UgZXh0ZW5kcyBQYW5lbCB7XG4gICAgc3RhdGljIGdldFN0YXRpY0NvbmZpZygpIHtyZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogVmFsaWQgdmFsdWVzIGZvciBjbG9zZUFjdGlvblxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmdbXX0gY2xvc2VBY3Rpb25zPVsnY2xvc2UnLCAnaGlkZSddXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKi9cbiAgICAgICAgaWNvblBvc2l0aW9uczogWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXVxuICAgIH19XG5cbiAgICBzdGF0aWMgZ2V0Q29uZmlnKCkge3JldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLmRpYWxvZy5CYXNlJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8uZGlhbG9nLkJhc2UnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBudHlwZT0nZGlhbG9nJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBudHlwZTogJ2RpYWxvZycsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBhbmltYXRlT25EcmFnRW5kPWZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBhbmltYXRlT25EcmFnRW5kOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ3xudWxsfSBhbmltYXRlVGFyZ2V0SWRfPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIGFuaW1hdGVUYXJnZXRJZF86IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBhdXRvTW91bnQ9dHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgYXV0b01vdW50OiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gYXV0b1JlbmRlcj10cnVlXG4gICAgICAgICAqL1xuICAgICAgICBhdXRvUmVuZGVyOiB0cnVlLFxuICAgICAgICAvKipcbiAgICAgICAgICogRWl0aGVyIGEgZG9tIG5vZGUgaWQsICdkb2N1bWVudC5ib2R5JyBvciBudWxsXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ3xudWxsfSBib3VuZGFyeUNvbnRhaW5lcklkPSdkb2N1bWVudC5ib2R5J1xuICAgICAgICAgKi9cbiAgICAgICAgYm91bmRhcnlDb250YWluZXJJZDogJ2RvY3VtZW50LmJvZHknLFxuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lIHdoYXQgaGFwcGVucyBpbiBjYXNlIHlvdSBjbGljayBvbiB0aGUgY2xvc2UgYnV0dG9uXG4gICAgICAgICAqIGNsb3NlIHdpbGwgZGVzdHJveSB0aGUgaW5zdGFuY2UsIGhpZGUgd2lsbCBrZWVwIGl0IGZvciBsYXRlciByZS11c2UuXG4gICAgICAgICAqIFZhbGlkIHZhbHVlczogY2xvc2UsIGhpZGVcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbG9zZUFjdGlvbj0nY2xvc2UnXG4gICAgICAgICAqL1xuICAgICAgICBjbG9zZUFjdGlvbjogJ2Nsb3NlJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ1tdfSBjbHM9WyduZW8tZGlhbG9nJywnbmVvLXBhbmVsJywnbmVvLWNvbnRhaW5lciddXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsczogWyduZW8tZGlhbG9nJywgJ25lby1wYW5lbCcsICduZW8tY29udGFpbmVyJ10sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBkcmFnZ2FibGVfPXRydWVcbiAgICAgICAgICovXG4gICAgICAgIGRyYWdnYWJsZV86IHRydWUsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBkcmFnTGlzdGVuZXJzQWRkZWQ9ZmFsc2VcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgZHJhZ0xpc3RlbmVyc0FkZGVkOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge05lby5kcmFnZ2FibGUuRHJhZ1pvbmV8bnVsbH0gZHJhZ1pvbmU9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgZHJhZ1pvbmU6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IGRyYWdab25lQ29uZmlnPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIGRyYWdab25lQ29uZmlnOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7TmVvLmNvbnRhaW5lci5Ub29sYmFyfG51bGx9IGhlYWRlclRvb2xiYXI9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgaGVhZGVyVG9vbGJhcjogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGlzRHJhZ2dpbmc9ZmFsc2VcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgaXNEcmFnZ2luZzogZmFsc2UsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IG1heGltaXplQ2xzPSdmYXIgZmEtd2luZG93LW1heGltaXplJ1xuICAgICAgICAgKi9cbiAgICAgICAgbWF4aW1pemVDbHM6ICdmYXIgZmEtd2luZG93LW1heGltaXplJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IG1heGltaXplZF89ZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIG1heGltaXplZF86IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBtaW5pbWl6ZUNscz0nZmFyIGZhLXdpbmRvdy1taW5pbWl6ZSdcbiAgICAgICAgICovXG4gICAgICAgIG1pbmltaXplQ2xzOiAnZmFyIGZhLXdpbmRvdy1taW5pbWl6ZScsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSByZXNpemFibGVfPXRydWVcbiAgICAgICAgICovXG4gICAgICAgIHJlc2l6YWJsZV86IHRydWUsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IHJlc2l6YWJsZVBsdWdpbkNvbmZpZz1udWxsXG4gICAgICAgICAqL1xuICAgICAgICByZXNpemFibGVQbHVnaW5Db25maWc6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IHRpdGxlPSdEaWFsb2cgVGl0bGUnXG4gICAgICAgICAqL1xuICAgICAgICB0aXRsZTogJ0RpYWxvZyBUaXRsZScsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IF92ZG9tXG4gICAgICAgICAqL1xuICAgICAgICBfdmRvbTpcbiAgICAgICAge2NsczogWyduZW8tZGlhbG9nLXdyYXBwZXInXSwgY246IFtcbiAgICAgICAgICAgIHtjbjogW119XG4gICAgICAgIF19XG4gICAgfX1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICBzdXBlcihjb25maWcpO1xuXG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgbWUudmRvbS5pZCA9IG1lLmdldFdyYXBwZXJJZCgpO1xuXG4gICAgICAgIG1lLmNyZWF0ZUhlYWRlcigpO1xuXG4gICAgICAgIGlmIChtZS5hbmltYXRlVGFyZ2V0SWQpIHtcbiAgICAgICAgICAgIG1lLmFuaW1hdGVTaG93KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIGFuaW1hdGVUYXJnZXRJZCBjb25maWcgZ290IGNoYW5nZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xudWxsfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfG51bGx9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0QW5pbWF0ZVRhcmdldElkKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICB0aGlzLmF1dG9Nb3VudCAgPSAhdmFsdWU7XG4gICAgICAgIHRoaXMuYXV0b1JlbmRlciA9ICF2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIGFwcE5hbWUgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtTdHJpbmd8bnVsbH0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xudWxsfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldEFwcE5hbWUodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgcmVzaXphYmxlID0gbWUuZ2V0UGx1Z2luKHtmbGFnOiAncmVzaXphYmxlJ30pO1xuXG4gICAgICAgIGlmIChtZS5kcmFnWm9uZSkge1xuICAgICAgICAgICAgbWUuZHJhZ1pvbmUuYXBwTmFtZSA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc2l6YWJsZSkge1xuICAgICAgICAgICAgcmVzaXphYmxlLmFwcE5hbWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyLmFmdGVyU2V0QXBwTmFtZSh2YWx1ZSwgb2xkVmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgZHJhZ2dhYmxlIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0RHJhZ2dhYmxlKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBsZXQgbWUgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGRvbUxpc3RlbmVycyA9IG1lLmRvbUxpc3RlbmVycyxcbiAgICAgICAgICAgIGNscztcblxuICAgICAgICBpZiAob2xkVmFsdWUgIT09IHVuZGVmaW5lZCAmJiBtZS5oZWFkZXJUb29sYmFyKSB7XG4gICAgICAgICAgICBjbHMgPSBtZS5oZWFkZXJUb29sYmFyLmNscztcbiAgICAgICAgICAgIE5lb0FycmF5W3ZhbHVlID8gJ2FkZCcgOiAncmVtb3ZlJ10oY2xzLCAnbmVvLWRyYWdnYWJsZScpO1xuICAgICAgICAgICAgbWUuaGVhZGVyVG9vbGJhci5jbHMgPSBjbHM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGltcG9ydCgnLi4vZHJhZ2dhYmxlL0RyYWdab25lLm1qcycpLnRoZW4obW9kdWxlID0+IHtcbiAgICAgICAgICAgICAgICBEcmFnWm9uZSA9IG1vZHVsZS5kZWZhdWx0O1xuXG4gICAgICAgICAgICAgICAgaWYgKCFtZS5kcmFnTGlzdGVuZXJzQWRkZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9tTGlzdGVuZXJzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICB7J2RyYWc6ZW5kJyAgOiBtZS5vbkRyYWdFbmQsICAgc2NvcGU6IG1lLCBkZWxlZ2F0ZTogJy5uZW8taGVhZGVyLXRvb2xiYXInfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsnZHJhZzpzdGFydCc6IG1lLm9uRHJhZ1N0YXJ0LCBzY29wZTogbWUsIGRlbGVnYXRlOiAnLm5lby1oZWFkZXItdG9vbGJhcid9XG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lLmRyYWdab25lQ29uZmlnICYmIG1lLmRyYWdab25lQ29uZmlnLmFsd2F5c0ZpcmVEcmFnTW92ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9tTGlzdGVuZXJzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeydkcmFnOm1vdmUnOiBtZS5vbkRyYWdNb3ZlLCBzY29wZTogbWUsIGRlbGVnYXRlOiAnLm5lby1oZWFkZXItdG9vbGJhcid9XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbWUuZG9tTGlzdGVuZXJzICAgICAgID0gZG9tTGlzdGVuZXJzO1xuICAgICAgICAgICAgICAgICAgICBtZS5kcmFnTGlzdGVuZXJzQWRkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBtYXhpbWl6ZWQgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRNYXhpbWl6ZWQodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGxldCBtZSAgID0gdGhpcyxcbiAgICAgICAgICAgIHZkb20gPSBtZS52ZG9tLFxuICAgICAgICAgICAgY2xzICA9IHZkb20uY2xzO1xuXG4gICAgICAgIE5lb0FycmF5W3ZhbHVlID8gJ2FkZCcgOiAncmVtb3ZlJ10oY2xzLCAnbmVvLW1heGltaXplZCcpO1xuICAgICAgICBtZS52ZG9tID0gdmRvbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIG1vdW50ZWQgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb2xkVmFsdWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgYWZ0ZXJTZXRNb3VudGVkKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBzdXBlci5hZnRlclNldE1vdW50ZWQodmFsdWUsIG9sZFZhbHVlKTtcblxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmIChtZS5hbmltYXRlVGFyZ2V0SWQpIHtcbiAgICAgICAgICAgICAgICBOZW8uY3VycmVudFdvcmtlci5wcm9taXNlTWVzc2FnZSgnbWFpbicsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uIDogJ3VwZGF0ZURvbScsXG4gICAgICAgICAgICAgICAgICAgIGFwcE5hbWU6IG1lLmFwcE5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhcyA6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdyZW1vdmVOb2RlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkICAgIDogbWUuZ2V0QW5pbWF0ZVRhcmdldElkKClcbiAgICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCBhZnRlciB0aGUgcmVzaXphYmxlIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0UmVzaXphYmxlKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGltcG9ydCgnLi4vcGx1Z2luL1Jlc2l6YWJsZS5tanMnKS50aGVuKG1vZHVsZSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IG1lICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBwbHVnaW5zID0gbWUucGx1Z2lucyB8fCBbXTtcblxuICAgICAgICAgICAgICAgIGlmICghbWUuZ2V0UGx1Z2luKHtmbGFnOiAncmVzaXphYmxlJ30pKSB7XG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGUgICAgICAgOiBtb2R1bGUuZGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcE5hbWUgICAgICA6IG1lLmFwcE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0aW9uQ2xzOiAnbmVvLWRpYWxvZycsXG4gICAgICAgICAgICAgICAgICAgICAgICBmbGFnICAgICAgICAgOiAncmVzaXphYmxlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLm1lLnJlc2l6YWJsZVBsdWdpbkNvbmZpZyB8fCB7fVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBtZS5wbHVnaW5zID0gcGx1Z2lucztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgYW5pbWF0ZUhpZGUoKSB7XG4gICAgICAgIGxldCBtZSAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGFwcE5hbWUgPSBtZS5hcHBOYW1lLFxuICAgICAgICAgICAgaWQgICAgICA9IG1lLmdldEFuaW1hdGVUYXJnZXRJZCgpO1xuXG4gICAgICAgIE5lby5tYWluLkRvbUFjY2Vzcy5nZXRCb3VuZGluZ0NsaWVudFJlY3Qoe1xuICAgICAgICAgICAgYXBwTmFtZTogYXBwTmFtZSxcbiAgICAgICAgICAgIGlkICAgICA6IFttZS5pZCwgbWUuYW5pbWF0ZVRhcmdldElkXVxuICAgICAgICB9KS50aGVuKHJlY3RzID0+IHtcbiAgICAgICAgICAgIE5lby5jdXJyZW50V29ya2VyLnByb21pc2VNZXNzYWdlKCdtYWluJywge1xuICAgICAgICAgICAgICAgIGFjdGlvbiAgOiAnbW91bnREb20nLFxuICAgICAgICAgICAgICAgIGFwcE5hbWUgOiBhcHBOYW1lLFxuICAgICAgICAgICAgICAgIGh0bWwgICAgOiBgPGRpdiBpZD1cIiR7aWR9XCIgY2xhc3M9XCJuZW8tYW5pbWF0ZS1kaWFsb2cgbmVvLWhpZGVcIiBzdHlsZT1cImhlaWdodDoke3JlY3RzWzBdLmhlaWdodH1weDtsZWZ0OiR7cmVjdHNbMF0ubGVmdH1weDt0b3A6JHtyZWN0c1swXS50b3B9cHg7d2lkdGg6JHtyZWN0c1swXS53aWR0aH1weDtcIj48L2Rpdj5gLFxuICAgICAgICAgICAgICAgIHBhcmVudElkOiAnZG9jdW1lbnQuYm9keSdcbiAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBOZW8uY3VycmVudFdvcmtlci5wcm9taXNlTWVzc2FnZSgnbWFpbicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbiA6ICd1cGRhdGVEb20nLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwTmFtZTogYXBwTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhcyA6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQgICA6IGlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogYCR7cmVjdHNbMV0uaGVpZ2h0fXB4YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCAgOiBgJHtyZWN0c1sxXS5sZWZ0ICB9cHhgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3AgICA6IGAke3JlY3RzWzFdLnRvcCAgIH1weGAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoIDogYCR7cmVjdHNbMV0ud2lkdGggfXB4YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTmVvLmN1cnJlbnRXb3JrZXIucHJvbWlzZU1lc3NhZ2UoJ21haW4nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbiA6ICd1cGRhdGVEb20nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBOYW1lOiBhcHBOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWx0YXMgOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAncmVtb3ZlTm9kZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZCAgICA6IGlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAyNTApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCAzMCk7XG5cbiAgICAgICAgICAgICAgICBtZS5jbG9zZU9ySGlkZShmYWxzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBhbmltYXRlU2hvdygpIHtcbiAgICAgICAgbGV0IG1lICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgYXBwTmFtZSA9IG1lLmFwcE5hbWUsXG4gICAgICAgICAgICBpZCAgICAgID0gbWUuZ2V0QW5pbWF0ZVRhcmdldElkKCk7XG5cbiAgICAgICAgTmVvLm1haW4uRG9tQWNjZXNzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCh7XG4gICAgICAgICAgICBhcHBOYW1lOiBhcHBOYW1lLFxuICAgICAgICAgICAgaWQgICAgIDogbWUuYW5pbWF0ZVRhcmdldElkXG4gICAgICAgIH0pLnRoZW4ocmVjdCA9PiB7XG4gICAgICAgICAgICBOZW8uY3VycmVudFdvcmtlci5wcm9taXNlTWVzc2FnZSgnbWFpbicsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24gIDogJ21vdW50RG9tJyxcbiAgICAgICAgICAgICAgICBhcHBOYW1lIDogYXBwTmFtZSxcbiAgICAgICAgICAgICAgICBodG1sICAgIDogYDxkaXYgaWQ9XCIke2lkfVwiIGNsYXNzPVwibmVvLWFuaW1hdGUtZGlhbG9nXCIgc3R5bGU9XCJoZWlnaHQ6JHtyZWN0LmhlaWdodH1weDtsZWZ0OiR7cmVjdC5sZWZ0fXB4O3RvcDoke3JlY3QudG9wfXB4O3dpZHRoOiR7cmVjdC53aWR0aH1weDtcIj48L2Rpdj5gLFxuICAgICAgICAgICAgICAgIHBhcmVudElkOiAnZG9jdW1lbnQuYm9keSdcbiAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBOZW8uY3VycmVudFdvcmtlci5wcm9taXNlTWVzc2FnZSgnbWFpbicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbiAgOiAndXBkYXRlRG9tJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcE5hbWUgOiBhcHBOYW1lLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWx0YXM6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQgICA6IGlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCAgIDogbWUud3JhcHBlclN0eWxlICYmIG1lLndyYXBwZXJTdHlsZS5oZWlnaHQgfHwgJzUwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgICAgIDogJzUwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcCAgICAgIDogJzUwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNTAlLCAtNTAlKScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoICAgIDogbWUud3JhcHBlclN0eWxlICYmIG1lLndyYXBwZXJTdHlsZS53aWR0aCB8fCAnNTAlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuc2hvdyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCAzMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGJlZm9yZSB0aGUgY2xvc2VBY3Rpb24gY29uZmlnIGdldHMgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBiZWZvcmVTZXRDbG9zZUFjdGlvbih2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmVmb3JlU2V0RW51bVZhbHVlKHZhbHVlLCBvbGRWYWx1ZSwgJ2Nsb3NlQWN0aW9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFthbmltYXRlPSEhdGhpcy5hbmltYXRlVGFyZ2V0SWRdXG4gICAgICovXG4gICAgY2xvc2UoYW5pbWF0ZT0hIXRoaXMuYW5pbWF0ZVRhcmdldElkKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICAgIG1lLmFuaW1hdGVIaWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZS5maXJlKCdjbG9zZScpO1xuICAgICAgICAgICAgbWUuZGVzdHJveSh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbYW5pbWF0ZT0hIXRoaXMuYW5pbWF0ZVRhcmdldElkXVxuICAgICAqL1xuICAgIGNsb3NlT3JIaWRlKGFuaW1hdGU9ISF0aGlzLmFuaW1hdGVUYXJnZXRJZCkge1xuICAgICAgICB0aGlzW3RoaXMuY2xvc2VBY3Rpb25dKGFuaW1hdGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgY3JlYXRlSGVhZGVyKCkge1xuICAgICAgICBsZXQgbWUgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBjbHMgICAgID0gWyduZW8taGVhZGVyLXRvb2xiYXInLCAnbmVvLXRvb2xiYXInXSxcbiAgICAgICAgICAgIGhlYWRlcnMgPSBtZS5oZWFkZXJzIHx8IFtdO1xuXG4gICAgICAgIGlmIChtZS5kcmFnZ2FibGUpIHtcbiAgICAgICAgICAgIGNscy5wdXNoKCduZW8tZHJhZ2dhYmxlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBoZWFkZXJzLnVuc2hpZnQoe1xuICAgICAgICAgICAgY2xzICA6IGNscyxcbiAgICAgICAgICAgIGRvY2sgOiAndG9wJyxcbiAgICAgICAgICAgIGlkICAgOiBtZS5nZXRIZWFkZXJUb29sYmFySWQoKSxcbiAgICAgICAgICAgIGl0ZW1zOiBbe1xuICAgICAgICAgICAgICAgIG50eXBlOiAnbGFiZWwnLFxuICAgICAgICAgICAgICAgIHRleHQgOiBtZS50aXRsZVxuICAgICAgICAgICAgfSwgJy0+Jywge1xuICAgICAgICAgICAgICAgIGljb25DbHM6ICdmYXIgZmEtd2luZG93LW1heGltaXplJyxcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBtZS5tYXhpbWl6ZS5iaW5kKG1lKVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGljb25DbHM6ICdmYXIgZmEtd2luZG93LWNsb3NlJyxcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBtZS5jbG9zZU9ySGlkZS5iaW5kKG1lKVxuICAgICAgICAgICAgfV1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWUuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaWQgb2YgdGhlIGFuaW1hdGlvbiBub2RlXG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRBbmltYXRlVGFyZ2V0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkICsgJy1hbmltYXRlJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBpZCBvZiB0aGUgaGVhZGVyIHRvb2xiYXJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldEhlYWRlclRvb2xiYXJJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWQgKyAnLWhlYWRlci10b29sYmFyJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IHZkb21cbiAgICAgKi9cbiAgICBnZXRQcm94eVZkb20oKSB7XG4gICAgICAgIGxldCB2ZG9tID0gVkRvbVV0aWwuY2xvbmUodGhpcy52ZG9tKTtcblxuICAgICAgICAvLyB0aGlzIGNhbGwgZXhwZWN0cyBhIGZpeGVkIGRpYWxvZyBzdHJ1Y3R1cmVcbiAgICAgICAgLy8gdG9kbzogYSBwYW5lbCBjb250ZW50IGNvbnRhaW5lciBjb3VsZCBnZXQgYSBmbGFnIHdoaWNoIHdlIGNhbiBxdWVyeSBmb3IgaW5zdGVhZFxuICAgICAgICB2ZG9tLmNuWzBdLmNuWzFdLmNuID0gW107XG5cbiAgICAgICAgcmV0dXJuIHZkb207XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgbmV3IHZkb20gcm9vdFxuICAgICAqL1xuICAgIGdldFZkb21Sb290KCkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZG9tLmNuWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHJldHVybnMge09iamVjdH0gVGhlIG5ldyB2bm9kZSByb290XG4gICAgICovXG4gICAgZ2V0Vm5vZGVSb290KCkge1xuICAgICAgICByZXR1cm4gdGhpcy52bm9kZS5jaGlsZE5vZGVzWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGlkIG9mIHRoZSBoZWFkZXIgdG9vbGJhclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICovXG4gICAgZ2V0V3JhcHBlcklkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pZCArICctd3JhcHBlcic7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFthbmltYXRlPSEhdGhpcy5hbmltYXRlVGFyZ2V0SWRdXG4gICAgICovXG4gICAgaGlkZShhbmltYXRlPSEhdGhpcy5hbmltYXRlVGFyZ2V0SWQpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgbWUuYW5pbWF0ZUhpZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lLnVubW91bnQoKTtcbiAgICAgICAgICAgIG1lLmZpcmUoJ2hpZGUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgbWF4aW1pemUoZGF0YSkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgIGRhdGEuY29tcG9uZW50Lmljb25DbHMgPSBtZS5tYXhpbWl6ZWQgPyBtZS5tYXhpbWl6ZUNscyA6IG1lLm1pbmltaXplQ2xzO1xuXG4gICAgICAgIG1lLm1heGltaXplZCA9ICFtZS5tYXhpbWl6ZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBvbkNvbnN0cnVjdGVkKCkge1xuICAgICAgICBzdXBlci5vbkNvbnN0cnVjdGVkKCk7XG5cbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBtZS5oZWFkZXJUb29sYmFyID0gbWUuZG93bih7XG4gICAgICAgICAgICBpZDogbWUuZ2V0SGVhZGVyVG9vbGJhcklkKClcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqL1xuICAgIG9uRHJhZ0VuZChkYXRhKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXMsXG4gICAgICAgICAgICBpbml0aWFsVHJhbnNpdGlvblByb3BlcnR5LCB3cmFwcGVyU3R5bGU7XG5cbiAgICAgICAgaWYgKCFtZS5tYXhpbWl6ZWQpIHtcbiAgICAgICAgICAgIE5lby5tYWluLkRvbUFjY2Vzcy5nZXRCb3VuZGluZ0NsaWVudFJlY3Qoe1xuICAgICAgICAgICAgICAgIGFwcE5hbWU6IG1lLmFwcE5hbWUsXG4gICAgICAgICAgICAgICAgaWQgICAgIDogbWUuZHJhZ1pvbmUuZHJhZ1Byb3h5LmlkXG4gICAgICAgICAgICB9KS50aGVuKHJlY3QgPT4ge1xuICAgICAgICAgICAgICAgIHdyYXBwZXJTdHlsZSA9IG1lLndyYXBwZXJTdHlsZTtcblxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24od3JhcHBlclN0eWxlLCB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCAgIDogYCR7cmVjdC5oZWlnaHR9cHhgLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0ICAgICA6IGAke3JlY3QubGVmdH1weGAsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHkgIDogMSxcbiAgICAgICAgICAgICAgICAgICAgdG9wICAgICAgOiBgJHtyZWN0LnRvcH1weGAsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aCAgICA6IGAke3JlY3Qud2lkdGh9cHhgXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW1lLmFuaW1hdGVPbkRyYWdFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFRyYW5zaXRpb25Qcm9wZXJ0eSA9IHdyYXBwZXJTdHlsZS50cmFuc2l0aW9uUHJvcGVydHkgfHwgbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICB3cmFwcGVyU3R5bGUudHJhbnNpdGlvblByb3BlcnR5ID0gJ25vbmUnO1xuXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JhcHBlclN0eWxlID0gbWUud3JhcHBlclN0eWxlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVyU3R5bGUudHJhbnNpdGlvblByb3BlcnR5ID0gaW5pdGlhbFRyYW5zaXRpb25Qcm9wZXJ0eTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbWUud3JhcHBlclN0eWxlID0gd3JhcHBlclN0eWxlO1xuICAgICAgICAgICAgICAgICAgICB9LCA1MCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbWUud3JhcHBlclN0eWxlID0gd3JhcHBlclN0eWxlO1xuXG4gICAgICAgICAgICAgICAgbWUuZHJhZ1pvbmUuZHJhZ0VuZChkYXRhKTtcblxuICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgYSByZXNldCwgb3RoZXJ3aXNlIHdlIGRvIG5vdCBnZXQgYSBjaGFuZ2UgZXZlbnQgZm9yIHRoZSBuZXh0IG9uRHJhZ1N0YXJ0KCkgY2FsbFxuICAgICAgICAgICAgICAgIG1lLmRyYWdab25lLmJvdW5kYXJ5Q29udGFpbmVySWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIG1lLmlzRHJhZ2dpbmcgICAgICAgICAgICAgICAgICAgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCBvbmx5IGdldCB0cmlnZ2VyZWQgaW4gY2FzZSBhbHdheXNGaXJlRHJhZ01vdmUgaXMgaW5jbHVkZWQgaW5zaWRlIHRoZSBkcmFnWm9uZUNvbmZpZ1xuICAgICAqIEBwYXJhbSBkYXRhXG4gICAgICovXG4gICAgb25EcmFnTW92ZShkYXRhKSB7XG4gICAgICAgIHRoaXMuZHJhZ1pvbmUuZHJhZ01vdmUoZGF0YSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqL1xuICAgIG9uRHJhZ1N0YXJ0KGRhdGEpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICB3cmFwcGVyU3R5bGUgPSBtZS53cmFwcGVyU3R5bGUgfHwge30sXG4gICAgICAgICAgICByZXNpemFibGVQbHVnaW47XG5cbiAgICAgICAgaWYgKCFtZS5tYXhpbWl6ZWQpIHtcbiAgICAgICAgICAgIG1lLmlzRHJhZ2dpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICByZXNpemFibGVQbHVnaW4gPSBtZS5nZXRQbHVnaW4oe2ZsYWc6ICdyZXNpemFibGUnfSk7XG5cbiAgICAgICAgICAgIGlmIChyZXNpemFibGVQbHVnaW4pIHtcbiAgICAgICAgICAgICAgICByZXNpemFibGVQbHVnaW4ucmVtb3ZlQWxsTm9kZXMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFtZS5kcmFnWm9uZSkge1xuICAgICAgICAgICAgICAgIG1lLmRyYWdab25lID0gTmVvLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIG1vZHVsZSAgICAgICAgICAgICA6IERyYWdab25lLFxuICAgICAgICAgICAgICAgICAgICBhcHBOYW1lICAgICAgICAgICAgOiBtZS5hcHBOYW1lLFxuICAgICAgICAgICAgICAgICAgICBib2R5Q3Vyc29yU3R5bGUgICAgOiAnbW92ZSAhaW1wb3J0YW50JyxcbiAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlDb250YWluZXJJZDogbWUuYm91bmRhcnlDb250YWluZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgZHJhZ0VsZW1lbnQgICAgICAgIDogbWUudmRvbSxcbiAgICAgICAgICAgICAgICAgICAgZHJhZ1Byb3h5Q29uZmlnICAgIDoge3Zkb206IG1lLmdldFByb3h5VmRvbSgpfSxcbiAgICAgICAgICAgICAgICAgICAgb3duZXIgICAgICAgICAgICAgIDogbWUsXG4gICAgICAgICAgICAgICAgICAgIHVzZVByb3h5V3JhcHBlciAgICA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAuLi5tZS5kcmFnWm9uZUNvbmZpZyB8fCB7fVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbWUuZmlyZSgnZHJhZ1pvbmVDcmVhdGVkJywge1xuICAgICAgICAgICAgICAgICAgICBkcmFnWm9uZTogbWUuZHJhZ1pvbmUsXG4gICAgICAgICAgICAgICAgICAgIGlkICAgICAgOiBtZS5pZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZS5kcmFnWm9uZS5ib3VuZGFyeUNvbnRhaW5lcklkID0gbWUuYm91bmRhcnlDb250YWluZXJJZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWUuZHJhZ1pvbmUuZHJhZ1N0YXJ0KGRhdGEpO1xuXG4gICAgICAgICAgICB3cmFwcGVyU3R5bGUub3BhY2l0eSA9IDAuNztcblxuICAgICAgICAgICAgbWUud3JhcHBlclN0eWxlID0gd3JhcHBlclN0eWxlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFthbmltYXRlPSEhdGhpcy5hbmltYXRlVGFyZ2V0SWRdXG4gICAgICovXG4gICAgc2hvdyhhbmltYXRlPSEhdGhpcy5hbmltYXRlVGFyZ2V0SWQpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgbWUuYW5pbWF0ZVNob3coKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lLnJlbmRlcih0cnVlKTtcbiAgICAgICAgICAgIG1lLmZpcmUoJ3Nob3cnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuTmVvLmFwcGx5Q2xhc3NDb25maWcoQmFzZSk7XG5cbmV4cG9ydCB7QmFzZSBhcyBkZWZhdWx0fTtcbiJdLCJzb3VyY2VSb290IjoiIn0=