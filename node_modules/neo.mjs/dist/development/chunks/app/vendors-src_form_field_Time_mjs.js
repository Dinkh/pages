(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-src_form_field_Time_mjs"],{

/***/ "./src/component/Clock.mjs":
/*!*********************************!*\
  !*** ./src/component/Clock.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Clock)
/* harmony export */ });
/* harmony import */ var _Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base.mjs */ "./src/component/Base.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Array.mjs */ "./src/util/Array.mjs");



/**
 * Simple CSS based clock to get used inside form.field.trigger.Time
 * @class Neo.component.Clock
 * @extends Neo.component.Base
 */
class Clock extends _Base_mjs__WEBPACK_IMPORTED_MODULE_0__.default {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.component.Clock'
         * @protected
         */
        className: 'Neo.component.Clock',
        /**
         * @member {String} ntype='clock'
         * @protected
         */
        ntype: 'clock',
        /**
         * @member {String[]} cls=['neo-clock']
         */
        cls: ['neo-clock'],
        /**
         * Value in px
         * @member {Number} fontSize_=20
         */
        fontSize_: 20,
        /**
         * Show a small disc on the center of the clock (above the pointers)
         * @member {Boolean} showDisc_=true
         */
        showDisc_: true,
        /**
         * Value in px
         * @member {Number|null} size_=500
         */
        size_: 500,
        /**
         * Format: hh:mm
         * @member {String} time_='10:20'
         */
        time_: '00:00',
        /**
         * @member {Object} _vdom
         */
        _vdom:
        {cn: [
            {cls: ['neo-minutes'], style: {}},
            {cls: ['neo-hours'],   style: {}}
        ]}
    }}

    /**
     * Triggered after the fontSize config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetFontSize(value, oldValue) {
        let style = this.style;

        style.fontSize = `${value}px`;
        this.style = style;
    }

    /**
     * Triggered after the showDisc config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetShowDisc(value, oldValue) {
        let cls = this.cls;

        _util_Array_mjs__WEBPACK_IMPORTED_MODULE_1__.default[value ? 'add' : 'remove'](cls, 'neo-show-disc')
        this.cls = cls;
    }

    /**
     * Triggered after the size config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetSize(value, oldValue) {
        let style = this.style;

        if (Neo.isNumber(value)) {
            style.height = `${value}px`;
            style.width  = `${value}px`;
        } else {
            delete style.height;
            delete style.width;
        }

        this.style = style;
    }

    /**
     * Triggered after the time config got changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    afterSetTime(value, oldValue) {
        let timeArray    = value.split(':').map(e => Number(e)),
            hoursAngle   = 30 * (timeArray[0] % 12) + .5 * timeArray[1],
            minutesAngle = timeArray[1] * 6,
            vdom         = this.vdom;

        vdom.cn[0].style.transform = `rotate(${minutesAngle}deg)`;
        vdom.cn[1].style.transform = `rotate(${hoursAngle}deg)`;

        this.vdom = vdom;
    }
}

Neo.applyClassConfig(Clock);




/***/ }),

/***/ "./src/form/field/Time.mjs":
/*!*********************************!*\
  !*** ./src/form/field/Time.mjs ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Time)
/* harmony export */ });
/* harmony import */ var _collection_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../collection/Base.mjs */ "./src/collection/Base.mjs");
/* harmony import */ var _list_Base_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../list/Base.mjs */ "./src/list/Base.mjs");
/* harmony import */ var _Picker_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Picker.mjs */ "./src/form/field/Picker.mjs");
/* harmony import */ var _trigger_Time_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./trigger/Time.mjs */ "./src/form/field/trigger/Time.mjs");





/**
 *
 * @class Neo.form.field.Time
 * @extends Neo.form.field.Picker
 */
class Time extends _Picker_mjs__WEBPACK_IMPORTED_MODULE_2__.default {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.form.field.Time'
         * @protected
         */
        className: 'Neo.form.field.Time',
        /**
         * @member {String} ntype='timefield'
         * @protected
         */
        ntype: 'timefield',
        /**
         * @member {String[]} cls=['neo-timefield', 'neo-pickerfield', 'neo-textfield']
         */
        cls: ['neo-timefield', 'neo-pickerfield', 'neo-textfield'],
        /**
         * @member {Neo.collection.Base|null} collection=null
         */
        collection: null,
        /**
         * @member {String} inputType='time'
         */
        inputType: 'time',
        /**
         * Additional used keys for the selection model
         * @member {Object} keys
         */
        keys: {
            'Enter' : 'onKeyDownEnter',
            'Escape': 'onKeyDownEscape'
        },
        /**
         * @member {Neo.list.Base} list=null
         * @protected
         */
        list: null,
        /**
         * @member {Object|null} listConfig=null
         */
        listConfig: null,
        /**
         * @member {String} maxValue_='16:00'
         */
        maxValue_: '16:00',
        /**
         * @member {String} minValue_='08:00'
         */
        minValue_: '08:00',
        /**
         * The height of the picker container. Defaults to px.
         * @member {Number|null} pickerHeight=150
         */
        pickerHeight: 150,
        /**
         * Value in seconds, defaults to 5min
         * @member {Number} stepSize_=60*5
         */
        stepSize_: 60 * 5, // 5min
        /**
         * @member {Object|Object[]} triggers=[{module: TimeTrigger}]
         * @protected
         */
        triggers: [{
            module: _trigger_Time_mjs__WEBPACK_IMPORTED_MODULE_3__.default
        }],
        /**
         * @member {Intl.DateTimeFormat|null} valueFormat_=null
         * @protected
         */
        valueFormat_: null
    }}

    /**
     *
     * @param {Object} config
     */
    constructor(config) {
        super(config);

        let me           = this,
            clearTrigger = me.getTrigger('clear');

        me.originalConfig.value = me.formatTime(me.value);

        if (clearTrigger) {
            clearTrigger.onFieldChange();
        }

        me.collection = Neo.create({
            module     : _collection_Base_mjs__WEBPACK_IMPORTED_MODULE_0__.default,
            items      : me.createCollectionItems(),
            keyProperty: 'value'
        });

        me.list = Neo.create({
            module      : _list_Base_mjs__WEBPACK_IMPORTED_MODULE_1__.default,
            displayField: 'value',
            store       : me.collection,
            ...me.listConfig
        });

        me.list.keys._keys.push(
            {fn: 'onContainerKeyDownEnter',  key: 'Enter',  scope: me.id},
            {fn: 'onContainerKeyDownEscape', key: 'Escape', scope: me.id}
        );

        me.list.on({
            itemClick   : me.onListItemClick,
            itemNavigate: me.onListItemNavigate,
            scope       : me
        });
    }

    /**
     * Triggered after the maxValue config got changed
     * @param {Text} value
     * @param {Text} oldValue
     * @protected
     */
    afterSetMaxValue(value, oldValue) {
        this.changeInputElKey('max', value);

        if (oldValue !== undefined) {
            this.recreateListItems();
        }
    }

    /**
     * Triggered after the minValue config got changed
     * @param {Text} value
     * @param {Text} oldValue
     * @protected
     */
    afterSetMinValue(value, oldValue) {
        this.changeInputElKey('min', value);

        if (oldValue !== undefined) {
            this.recreateListItems();
        }
    }

    /**
     * Triggered after the pickerIsMounted config got changed
     * @param {Boolean} value
     * @param {Boolean} oldValue
     * @protected
     */
    afterSetPickerIsMounted(value, oldValue) {
        if (value) {
            this.selectCurrentListItem();
        }
    }

    /**
     * Triggered after the stepSize config got changed
     * @param {Number} value
     * @param {Number} oldValue
     * @protected
     */
    afterSetStepSize(value, oldValue) {
        this.changeInputElKey('step', value);

        // todo: adjust min & max value => see: form.field.Number
    }

    /**
     * Triggered after the value config got changed
     * @param {String|null} value
     * @param {String|null} oldValue
     * @param {Boolean} [preventListSelect=false]
     * @protected
     */
    afterSetValue(value, oldValue, preventListSelect=false) {
        super.afterSetValue(value, oldValue);

        let me = this;

        me.getTrigger('time').value = value;

        if (me.pickerIsMounted && !preventListSelect) {
            me.selectCurrentListItem(true);
        }
    }

    /**
     * Gets triggered before getting the value of the valueFormat config
     * @param {String} value
     * @param {String} oldValue
     * @protected
     * @returns {String}
     */
    beforeGetValueFormat(value, oldValue) {
        if (!value) {
            this._valueFormat = value = new Intl.DateTimeFormat(Neo.config.locale, {
                hour  : '2-digit',
                minute: '2-digit',
                second: this.stepSize < 60 ? '2-digit' : undefined,
                hour12: false
            });
        }

        return value;
    }

    /**
     * Triggered before the maxValue config gets changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     * @returns {String}
     */
    beforeSetMaxValue(value, oldValue) {
        if (value) {
            if (value.includes('24') || (value.startsWith('12') && value.includes('AM'))) {
                return '23:59:00';
            }
        }

        return this.formatTime(value);
    }

    /**
     * Triggered before the minValue config gets changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     * @returns {String}
     */
    beforeSetMinValue(value, oldValue) {
        return this.formatTime(value);
    }

    /**
     * Triggered before the value config gets changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     * @returns {String}
     */
    beforeSetValue(value, oldValue) {
        return this.formatTime(value);
    }

    /**
     *
     * @returns {String[]}
     */
    createCollectionItems() {
        let me          = this,
            currentDate = new Date(),
            end         = me.maxValue.split(':').map(Number),
            endDate     = new Date(),
            start       = me.minValue.split(':').map(Number),
            listItems   = [];

        const dt = new Intl.DateTimeFormat(Neo.config.locale, {
            hour  : '2-digit',
            minute: '2-digit',
            second: me.stepSize < 60 ? '2-digit' : undefined
        });

        currentDate.setHours(...start);
        endDate    .setHours(...end);

        while (currentDate <= endDate) {
            listItems.push({
                value: dt.format(currentDate)
            });

            currentDate.setSeconds(currentDate.getSeconds() + me.stepSize);
        }

        return listItems;
    }

    /**
     *
     * @returns {Neo.component.DateSelector}
     */
    createPickerComponent() {
        return this.list;
    }

    /**
     *
     * @param {Function} [callback]
     */
    focusInputEl(callback) {
        let me = this;

        Neo.main.DomAccess.focus({
            id: me.getInputElId()
        }).then(() => {
            if (callback) {
                callback.apply(me);
            }
        });
    }

    /**
     * Transforms AM / PM based times into a 24h format.
     * E.g. "08:00 AM" => "08:00"
     * @param {String|null} value
     * @protected
     * @returns {String|null}
     */
    formatTime(value) {
        if (value) {
            return this.valueFormat.format(new Date(`November 23, 2019  ${value}`));
        }

        return value;
    }

    /**
     * @param {Object} data
     * @protected
     */
    onContainerKeyDownEnter(data) {
        this.hidePicker();
    }

    /**
     * @param {Object} data
     * @protected
     */
    onContainerKeyDownEscape(data) {
        this.focusInputEl(this.hidePicker);
    }

    /**
     *
     * @param {Object} data
     * @protected
     */
    onKeyDownEnter(data) {
        let me = this;

        if (me.pickerIsMounted) {
            super.onKeyDownEnter(data);
            me.selectCurrentListItem();
        } else {
            super.onKeyDownEnter(data, me.selectCurrentListItem);
        }
    }

    /**
     *
     * @param {Object} record
     */
    onListItemClick(record) {
        let me       = this,
            oldValue = me.value,
            value    = record.value;

        if (me.value !== value) {
            value = me.formatTime(value);

            me._value = value;
            me.afterSetValue(value, oldValue, true); // prevent the list from getting selected / focused
        }
    }

    /**
     *
     * @param {Object} record
     */
    onListItemNavigate(record) {
        this.onListItemClick(record);
    }

    /**
     *
     */
    recreateListItems() {
        let me = this;

        me.collection.clear();
        me.collection.add(me.createCollectionItems());
        me.list.createItems();
    }

    /**
     * Resets the field to its original value or null depending on the clearToOriginalValue config
     * You can optionally pass a new value, which will adjust the originalConfig.value if needed.
     * @param {String|null} [value]
     */
    reset(value) {
        let me = this;

        if (value && me.clearToOriginalValue) {
            me.originalConfig.value = me.formatTime(value);
        }

        me.value = me.clearToOriginalValue ? me.originalConfig.value : null;
    }

    /**
     * @param {Boolean} [preventFocus=false]
     */
    selectCurrentListItem(preventFocus=false) {
        let me   = this,
            list = me.list,
            id   = list.getItemId(me.value);

        list.selectionModel.select(id);

        if (!preventFocus) {
            list.focus(id);
        } else {
            Neo.main.DomAccess.scrollIntoView({
                id: id
            });
        }
    }
}

Neo.applyClassConfig(Time);




/***/ }),

/***/ "./src/form/field/trigger/Time.mjs":
/*!*****************************************!*\
  !*** ./src/form/field/trigger/Time.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Time)
/* harmony export */ });
/* harmony import */ var _component_Clock_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../component/Clock.mjs */ "./src/component/Clock.mjs");
/* harmony import */ var _Picker_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Picker.mjs */ "./src/form/field/trigger/Picker.mjs");



/**
 * Used by form.field.Time
 * @class Neo.form.field.trigger.Time
 * @extends Neo.form.field.trigger.Picker
 */
class Time extends _Picker_mjs__WEBPACK_IMPORTED_MODULE_1__.default {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.form.field.trigger.Time'
         * @protected
         */
        className: 'Neo.form.field.trigger.Time',
        /**
         * @member {String} ntype='trigger-time'
         * @protected
         */
        ntype: 'trigger-time',
        /**
         * @member {String[]} cls=['neo-timefield-trigger','neo-field-trigger']
         */
        cls: ['neo-timefield-trigger', 'neo-field-trigger'],
        /**
         * @member {Neo.component.Clock|null} clock=null
         * @protected
         */
        clock: null,
        /**
         * @member {Object|null} clockConfig=null
         */
        clockConfig: null,
        /**
         * @member {String|null} iconCls=null
         */
        iconCls: null,
        /**
         * Internal flag used by field.getTrigger()
         * @member {String} type='time'
         */
        type: 'time',
        /**
         * Format: hh:mm
         * @member {String|null} value_=null
         */
        value_: null
    }}

    /**
     *
     * @param {Object} config
     */
    constructor(config) {
        super(config);

        let me   = this,
            vdom = me.vdom;

        me.clock = Neo.create({
            module  : _component_Clock_mjs__WEBPACK_IMPORTED_MODULE_0__.default,
            appName : me.appName,
            fontSize: .6,
            parentId: me.id,
            showDisc: false,
            size    : null,
            ...me.clockConfig
        });

        vdom.cn = [me.clock.vdom];
        me.vdom = vdom;
    }

    /**
     * Triggered after the appName config got changed
     * @param {String} value
     * @param {String|null} oldValue
     * @protected
     */
    afterSetAppName(value, oldValue) {
        super.afterSetAppName(value, oldValue);

        if (value) {
            this.clock.appName = value;
        }
    }

    /**
     * Triggered after the value config got changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    afterSetValue(value, oldValue) {
        if (value) {
            this.clock.time = value;
        }
    }
}

Neo.applyClassConfig(Time);




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,