"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-src_calendar_view_week_plugin_DragDrop_mjs"],{

/***/ "./src/calendar/view/week/EventDragZone.mjs":
/*!**************************************************!*\
  !*** ./src/calendar/view/week/EventDragZone.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EventDragZone)
/* harmony export */ });
/* harmony import */ var _util_Date_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../util/Date.mjs */ "./src/util/Date.mjs");
/* harmony import */ var _draggable_DragProxyComponent_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../draggable/DragProxyComponent.mjs */ "./src/draggable/DragProxyComponent.mjs");
/* harmony import */ var _draggable_DragZone_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../draggable/DragZone.mjs */ "./src/draggable/DragZone.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/VDom.mjs */ "./src/util/VDom.mjs");






/**
 * @class Neo.calendar.view.week.EventDragZone
 * @extends Neo.draggable.DragZone
 */
class EventDragZone extends _draggable_DragZone_mjs__WEBPACK_IMPORTED_MODULE_2__["default"] {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.calendar.view.week.EventDragZone'
         * @protected
         */
        className: 'Neo.calendar.view.week.EventDragZone',
        /**
         * @member {Boolean} addDragProxyCls=false
         */
        addDragProxyCls: false,
        /**
         * @member {Boolean} enableResizingAcrossOppositeEdge=true
         */
        enableResizingAcrossOppositeEdge: true,
        /**
         * @member {Number} axisEndTime=0
         */
        axisEndTime: 0,
        /**
         * @member {Number} axisStartTime=0
         */
        axisStartTime: 0,
        /**
         * @member {Number} columnHeight=0
         */
        columnHeight: 0,
        /**
         * @member {Number} columnTop=0
         */
        columnTop: 0,
        /**
         * @member {Number} currentInterval=0
         */
        currentInterval: 0,
        /**
         * time in minutes
         * @member {Number} eventDuration=0
         */
        eventDuration: 0,
        /**
         * @member {Object} eventRecord=null
         */
        eventRecord: null,
        /**
         * Internal flag.
         * If we resize across the opposite edge and then back, we need to update the related edge position once.
         * @member {Boolean} forceUpdate=false
         * @protected
         */
        forceUpdate: false,
        /**
         * Internal flag
         * @member {Boolean} hasOverflow=false
         * @protected
         */
        hasOverflow: false,
        /**
         * time in minutes
         * @member {Number} intervalSize=15
         */
        intervalSize: 15,
        /**
         * @member {Boolean} keepEndDate=false
         */
        keepEndDate: false,
        /**
         * @member {Boolean} keepStartDate=false
         */
        keepStartDate: false,
        /**
         * @member {Boolean} moveHorizontal=false
         */
        moveHorizontal: false,
        /**
         * @member {Boolean} moveInMainThread=false
         */
        moveInMainThread: false,
        /**
         * Internal flag.
         * @member {Date} newEndDate=null
         * @protected
         */
        newEndDate: null,
        /**
         * Internal flag.
         * @member {Date} newStartDate=null
         * @protected
         */
        newStartDate: null,
        /**
         * @member {Number} scrollFactorLeft=3
         */
        scrollFactorLeft: 3,
        /**
         * @member {Boolean} useProxyWrapper=false
         */
        useProxyWrapper: false
    }}

    /**
     *
     */
    addBodyCursorCls() {
        Neo.applyDeltas(this.appName, {id: 'document.body', cls: {add: ['neo-cursor-move']}});
    }

    /**
     * Resolves the 24:00 issue, where an event would end on the next day
     * @param {Date} date
     * @returns {Date}
     */
    adjustEndDate(date) {
        if (date.getHours() === 0 && date.getMinutes() === 0) {
            // if an event ends at 24:00, change it to 23:59 => otherwise the day increases by 1
            date.setMinutes(date.getMinutes() - 1);
        } else if (!(date.getHours() === 23 && date.getMinutes() === 59) && date.getMinutes() % this.intervalSize !== 0) {
            // otherwise switch non interval based values back
            date.setMinutes(date.getMinutes() + 1);
        }

        return date;
    }

    /**
     * Triggered after the proxyParentId config got changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    afterSetProxyParentId(value, oldValue) {
        if (value && oldValue !== undefined) {
            let me = this;

            // check if the node did not get removed yet
            if (me.dragProxy?.vdom.cn[0].id) {
                Neo.applyDeltas(me.appName, {
                    action  : 'moveNode',
                    id      : me.dragProxy.id,
                    index   : 0,
                    parentId: value
                });
            }
        }
    }

    /**
     * @param {Object} data
     */
    createDragProxy(data) {
        let me        = this,
            component = Neo.getComponent(me.getDragElementRoot().id) || me.owner,
            vdom      = me.dragProxyConfig?.vdom,
            clone     = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_4__["default"].clone(vdom ? vdom : me.dragElement);

            clone.cn[2].removeDom = false;

        const config = {
            module          : _draggable_DragProxyComponent_mjs__WEBPACK_IMPORTED_MODULE_1__["default"],
            appName         : me.appName,
            moveInMainThread: me.moveInMainThread,
            parentId        : me.proxyParentId,

            ...me.dragProxyConfig,

            vdom: me.useProxyWrapper ? {cn: [clone]} : clone // we want to override dragProxyConfig.vdom if needed
        };

        config.cls = config.cls || [];

        config.cls.push('neo-focus');

        if (component) {
            config.cls.push(component.getTheme());
        }

        if (clone.cls && !me.useProxyWrapper) {
            config.cls.push(...clone.cls);
        }

        if (me.addDragProxyCls) {
            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].add(config.cls, me.dragProxyCls);
        }

        Object.assign(config.style, {
            height: `${data.height}px`,
            top   : `${data.y - me.columnTop}px`,
            width : `${data.width}px`
        });

        me.dragProxy = Neo.create(config);
    }

    /**
     * DragEnd equals drop, since we can only drag to valid positions
     * todo: ESC key
     * @param {Object} data
     */
    dragEnd(data) {
        super.dragEnd(data);

        let me     = this,
            owner  = me.owner,
            record = me.eventRecord,
            endDate, startDate;

        if (me.keepStartDate) {
            endDate   = me.newEndDate;
            startDate = me.newStartDate || record.startDate;
        } else {
            startDate = new Date(_util_VDom_mjs__WEBPACK_IMPORTED_MODULE_4__["default"].findVdomChild(owner.vdom, me.proxyParentId).vdom.flag + 'T00:00:00');
            startDate.setHours(me.axisStartTime);
            startDate.setMinutes(me.currentInterval * me.intervalSize);

            if (me.keepEndDate) {
                endDate   = me.newEndDate   || record.endDate;
                startDate = me.newStartDate || startDate;
            } else {
                endDate = _util_Date_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].clone(startDate);
                endDate.setMinutes(endDate.getMinutes() + me.eventDuration);
            }
        }

        endDate = me.adjustEndDate(endDate);

        record.setSilent({
            endDate,
            startDate
        });

        Object.assign(me, {
            currentInterval: 0,
            hasOverflow    : false,
            keepEndDate    : false,
            keepStartDate  : false,
            newEndDate     : null,
            newStartDate   : null,
            proxyParentId  : null
        });

        // todo: updating a record field which is included inside a sorter should trigger collection.doSort()
        // see: https://github.com/neomjs/neo/issues/2392

        owner.getModel().getStore('events').doSort();
        owner.updateEvents();
    }

    /**
     * @param {Object} data
     */
    dragMove(data) {
        let me              = this,
            axisEndTime     = me.axisEndTime,
            axisStartTime   = me.axisStartTime,
            columnHeight    = me.columnHeight,
            eventDuration   = me.eventDuration,
            i               = 0,
            intervalSize    = me.intervalSize,
            keepEndDate     = me.keepEndDate,
            keepStartDate   = me.keepStartDate,
            path            = data.targetPath,
            len             = path.length,
            owner           = me.owner,
            record          = me.eventRecord,
            switchDirection = false,
            timeAxis        = owner.timeAxis,
            axisStartDate, currentInterval, deltas, duration, endDate, eventIntervals, height, intervalHeight,
            intervals, limitInterval, minimumEventIntervals, position, startDate, startInterval;

        if (me.dragProxy) {
            if (!keepEndDate && !keepStartDate) {
                for (; i < len; i++) {
                    if (path[i].cls.includes('neo-c-w-column')) {
                        me.proxyParentId = path[i].id;
                        break;
                    }
                }
            }

            intervals      = (axisEndTime - axisStartTime) * 60 / intervalSize; // 15 minutes each
            intervalHeight = columnHeight / intervals;

            position = Math.min(columnHeight, data.clientY - me.offsetY - me.columnTop);

            currentInterval = Math.floor(position / intervalHeight);

            endDate   = _util_Date_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].clone(record.endDate);
            startDate = _util_Date_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].clone(record.startDate);

            // events can have a smaller start time than the axis min value.
            // resizing via the north handle needs to adjust the duration to honor this.
            if (keepEndDate) {
                if (axisStartTime > startDate.getHours()) {
                    startDate.setHours(axisStartTime);
                    startDate.setMinutes(0);

                    eventDuration = (endDate - startDate) / 60 / 1000; // duration in minutes
                }
            }

            // events can have a bigger end time than the axis max value.
            // resizing via the south handle needs to adjust the duration to honor this.
            if (keepStartDate) {
                if (axisEndTime < endDate.getHours()) {
                    endDate.setHours(axisEndTime);
                    endDate.setMinutes(0);

                    eventDuration = (endDate - startDate) / 60 / 1000; // duration in minutes
                }
            }

            if (!keepEndDate) {
                // events must not end after the last visible interval
                currentInterval = Math.min(currentInterval, intervals - (eventDuration / intervalSize));
            }

            deltas = [{
                id   : me.dragProxy.id,
                style: {}
            }];

            if (keepEndDate || keepStartDate) {
                axisStartDate = _util_Date_mjs__WEBPACK_IMPORTED_MODULE_0__["default"].clone(record.startDate);
                axisStartDate.setHours(axisStartTime);
                axisStartDate.setMinutes(0);

                minimumEventIntervals = owner.minimumEventDuration / intervalSize;
                startInterval         = (record.startDate - axisStartDate) / intervalSize / 60 / 1000;

                if (keepEndDate) {
                    limitInterval = startInterval + (eventDuration / intervalSize);

                    if (me.enableResizingAcrossOppositeEdge) {
                        if (me.forceUpdate && currentInterval > limitInterval -minimumEventIntervals && currentInterval < limitInterval + minimumEventIntervals) {
                            // when we resize back to the original direction, keep the min interval until we snap back
                            return;
                        } else if (currentInterval >= limitInterval + minimumEventIntervals) {
                            switchDirection = true;
                            me.forceUpdate  = true;

                            endDate.setHours(axisStartTime);
                            endDate.setMinutes(currentInterval * intervalSize);
                            endDate = me.adjustEndDate(endDate);

                            me.newEndDate = endDate;

                            startDate.setHours(axisStartTime);
                            startDate.setMinutes(limitInterval * intervalSize);

                            me.newStartDate = startDate;

                            duration = (endDate - startDate) / 60 / 60 / 1000; // duration in hours
                            deltas[0].style.top = `calc(${limitInterval * intervalHeight / columnHeight * 100}% + 1px)`;
                        } else {
                            me.forceUpdate  = false;
                            me.newStartDate = null;
                        }
                    }

                    if (!switchDirection) {
                        currentInterval = Math.min(currentInterval, limitInterval - minimumEventIntervals);
                    }

                } else if (keepStartDate) {
                    limitInterval = startInterval - (eventDuration / intervalSize);

                    if (me.enableResizingAcrossOppositeEdge) {
                        // events must not start before the first visible interval
                        currentInterval = Math.max(-(eventDuration / intervalSize), currentInterval);

                        if (currentInterval <= limitInterval - minimumEventIntervals) {
                            switchDirection = true;
                            me.forceUpdate  = true;

                            endDate.setHours(axisStartTime);
                            endDate.setMinutes(eventDuration + limitInterval * intervalSize);
                            endDate = me.adjustEndDate(endDate);

                            me.newEndDate = endDate;

                            startDate.setHours(axisStartTime);
                            startDate.setMinutes(eventDuration + currentInterval * intervalSize);

                            me.newStartDate = startDate;

                            duration = (endDate - startDate) / 60 / 60 / 1000; // duration in hours

                            position = (eventDuration / intervalSize + currentInterval) * intervalHeight; // snap to valid intervals
                            position = position / columnHeight * 100;

                            deltas[0].style.top = `calc(${position}% + 1px)`;
                        } else if (me.forceUpdate && currentInterval < limitInterval + minimumEventIntervals) {
                            // when we resize back to the original direction, keep the min interval until we snap back
                            return;
                        } else if (me.forceUpdate && currentInterval >= limitInterval + minimumEventIntervals) {
                            if (me.currentInterval !== currentInterval) {
                                me.forceUpdate  = false;
                                me.newStartDate = null;
                                deltas[0].style.top = `calc(${startInterval * intervalHeight / columnHeight * 100}% + 1px)`;
                            }
                        }
                    }

                    if (!switchDirection) {
                        currentInterval = Math.max(currentInterval, limitInterval + minimumEventIntervals);
                    }
                }
            }

            if (!keepStartDate) {
                // events must not start before the first visible interval
                currentInterval = Math.max(0, currentInterval);
            }

            if (me.currentInterval !== currentInterval) {
                if (!switchDirection) {
                    if (!keepEndDate) {
                        endDate.setHours(axisStartTime);
                        endDate.setMinutes(eventDuration + currentInterval * intervalSize);
                    }

                    if (keepStartDate) {
                        me.newEndDate = endDate;
                        duration = (endDate - record.startDate) / 60 / 60 / 1000; // duration in hours
                    } else {
                        startDate.setHours(axisStartTime);
                        startDate.setMinutes(currentInterval * intervalSize);

                        position = currentInterval * intervalHeight; // snap to valid intervals
                        position = position / columnHeight * 100;

                        deltas[0].style.top = `calc(${position}% + 1px)`;
                    }

                    if (keepEndDate) {
                        duration = (record.endDate - startDate) / 60 / 60 / 1000; // duration in hours
                    }
                }

                endDate = me.adjustEndDate(endDate);

                deltas.push({
                    id       : me.dragProxy.vdom.cn[2].id,
                    innerHTML: owner.intlFormat_time.format(endDate)
                });

                if (keepEndDate || keepStartDate) {
                    height = Math.round(duration / (axisEndTime - axisStartTime) * 100 * 1000) / 1000;
                    deltas[0].style.height = `calc(${height}% - 2px)`;
                }

                deltas.push({
                    id       : me.dragProxy.vdom.cn[0].id,
                    innerHTML: owner.intlFormat_time.format(startDate)
                });

                // check if the node got added yet
                if (me.dragProxy.vdom.cn[0].id) {
                    eventIntervals = (duration && duration * 60 || eventDuration) / timeAxis.interval;

                    if (eventIntervals <= 2) {
                        if (timeAxis.rowHeight / eventIntervals < 25 && !me.hasOverflow) {
                            deltas.push({
                                id : me.dragProxy.id,
                                cls: {add: ['neo-overflow']}
                            });

                            me.hasOverflow = true;
                        }
                    } else if (me.hasOverflow) {
                        deltas.push({
                            id : me.dragProxy.id,
                            cls: {remove: ['neo-overflow']}
                        });

                        me.hasOverflow = false;
                    }

                    Neo.applyDeltas(me.appName, deltas);
                }
            }

            me.currentInterval = currentInterval;
        }
    }

    /**
     * @param {Object} data
     */
    dragStart(data) {
        let me = this,
            eventDuration, offsetX, offsetY;

        me.owner.getDomRect([me.getDragElementRoot().id, data.path[1].id]).then(rects => {
            eventDuration = (me.eventRecord.endDate - me.eventRecord.startDate) / 60 / 1000;
            offsetX       = data.clientX - rects[0].left;
            offsetY       = data.clientY - rects[0].top;

            Object.assign(me, {
                columnHeight   : rects[1].height,
                columnTop      : rects[1].top,
                dragElementRect: rects[0],
                eventDuration  : Math.round(eventDuration / me.intervalSize) * me.intervalSize,
                offsetX,
                offsetY
            });

            me.createDragProxy(rects[0]);

            me.fire('dragStart', {
                dragElementRect: rects[0],
                id             : me.id,
                offsetX,
                offsetY
            });

            me.dragMove(data);
        });
    }

    /**
     *
     */
    removeBodyCursorCls() {
        Neo.applyDeltas(this.appName, {id: 'document.body', cls: {remove: ['neo-cursor-move']}});
    }
}

Neo.applyClassConfig(EventDragZone);




/***/ }),

/***/ "./src/calendar/view/week/plugin/DragDrop.mjs":
/*!****************************************************!*\
  !*** ./src/calendar/view/week/plugin/DragDrop.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DragDrop)
/* harmony export */ });
/* harmony import */ var _plugin_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../plugin/Base.mjs */ "./src/plugin/Base.mjs");
/* harmony import */ var _util_Date_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../util/Date.mjs */ "./src/util/Date.mjs");
/* harmony import */ var _EventDragZone_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../EventDragZone.mjs */ "./src/calendar/view/week/EventDragZone.mjs");
/* harmony import */ var _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../util/VDom.mjs */ "./src/util/VDom.mjs");





/**
 * @class Neo.calendar.view.week.plugin.DragDrop
 * @extends Neo.plugin.Base
 */
class DragDrop extends _plugin_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.calendar.view.week.plugin.DragDrop'
         * @protected
         */
        className: 'Neo.calendar.view.week.plugin.DragDrop',
        /**
         * @member {Boolean} isDragging=false
         * @protected
         */
        isDragging: false
    }}

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me           = this,
            columnOpts   = {scope: me, delegate: '.neo-c-w-column'},
            eventOpts    = {scope: me, delegate: '.neo-event'},
            owner        = me.owner,
            domListeners = owner.domListeners;

        domListeners.push(
            {'drag:end'  : me.onColumnDragEnd,   ...columnOpts},
            {'drag:end'  : me.onEventDragEnd,    ...eventOpts},
            {'drag:move' : me.onColumnDragMove,  ...columnOpts},
            {'drag:move' : me.onEventDragMove,   ...eventOpts},
            {'drag:start': me.onColumnDragStart, ...columnOpts},
            {'drag:start': me.onEventDragStart,  ...eventOpts}
        );

        owner.domListeners = domListeners;
    }

    /**
     * Adjusts drag events which start on an event resize handle
     * @param {Object} data
     * @returns {Object}
     */
    adjustResizeEvent(data) {
        data.path.shift();
        data.targetPath.shift();
        data.target = data.path[0];

        return data;
    }

    /**
     * @param {Object} opts
     * @param {Object} opts.dragElement
     * @param {Boolean} opts.enableResizingAcrossOppositeEdge
     * @param {Object} opts.eventRecord
     * @param {String} opts.proxyParentId
     * @returns {Neo.calendar.view.week.EventDragZone}
     */
    getEventDragZone(opts) {
        let me            = this,
            owner         = me.owner,
            eventDragZone = owner.eventDragZone,
            timeAxis      = owner.timeAxis,

            config = {
                axisEndTime                     : timeAxis.getTime(owner.endTime),
                axisStartTime                   : timeAxis.getTime(owner.startTime),
                dragElement                     : opts.dragElement,
                enableResizingAcrossOppositeEdge: opts.enableResizingAcrossOppositeEdge,
                eventRecord                     : opts.eventRecord,
                proxyParentId                   : opts.proxyParentId
            };

        if (!eventDragZone) {
            owner.eventDragZone = eventDragZone = Neo.create({
                module           : _EventDragZone_mjs__WEBPACK_IMPORTED_MODULE_2__["default"],
                appName          : me.appName,
                owner            : owner,
                scrollContainerId: owner.getScrollContainer().id,
                ...config,

                dragProxyConfig: {
                    style: {
                        transition: 'none',
                        willChange: 'height'
                    }
                }
            });
        } else {
            eventDragZone.set(config);
        }

        return eventDragZone;
    }

    /**
     * @param {Object} path
     * @returns {Boolean}
     */
    isTopLevelColumn(path) {
        return path[0].cls.includes('neo-c-w-column');
    }

    /**
     * @param {Object} eventData
     * @returns {Boolean}
     */
    isTopLevelEvent(eventData) {
        return eventData.path[0].cls.includes('neo-event');
    }

    /**
     * @param {Object} data
     */
    onColumnDragEnd(data) {
        let me           = this,
            owner        = me.owner,
            recordSymbol = Symbol.for('addedRecord'),
            record       = me[recordSymbol];

        if (record && me.isTopLevelColumn(data.path)) {
            me.isDragging = false;

            delete me[recordSymbol];

            Neo.applyDeltas(me.appName, {
                id   : owner.getEventId(record.id),
                style: {opacity: 1}
            }).then(() => {
                owner.eventDragZone.dragEnd();
                owner.getPlugin({flag:'resizable'}).onDragEnd(data);
            });
        }
    }

    /**
     * @param {Object} data
     */
    onColumnDragMove(data) {
        if (this.isTopLevelColumn(data.path)) {
            this.owner.eventDragZone?.dragMove(data);
        }
    }

    /**
     * @param {Object} data
     */
    onColumnDragStart(data) {
        let me = this;

        if (me.isTopLevelColumn(data.targetPath)) {
            let owner           = me.owner,
                axisStartTime   = owner.timeAxis.getTime(owner.startTime),
                calendarStore   = owner.calendarStore,
                columnRect      = data.path[0].rect,
                intervalSize    = 15,
                intervals       = (owner.timeAxis.getTime(owner.endTime) - axisStartTime) * 60 / intervalSize,
                intervalHeight  = columnRect.height / intervals,
                position        = Math.min(columnRect.height, data.clientY - columnRect.top),
                currentInterval = Math.floor(position / intervalHeight),
                startDate       = new Date(_util_VDom_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].findVdomChild(owner.vdom, data.path[0].id).vdom.flag + 'T00:00:00'),
                dragElement, endDate, eventDragZone, eventId, record;

            me.isDragging = true;

            startDate.setHours(axisStartTime);
            startDate.setMinutes(Math.min(currentInterval * intervalSize, intervals * intervalSize - owner.minimumEventDuration));

            endDate = _util_Date_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].clone(startDate);

            endDate.setMinutes(endDate.getMinutes() + owner.minimumEventDuration);

            // 24:00 fix
            endDate.getHours() === 0 && endDate.getMinutes() === 0 && endDate.setMinutes(endDate.getMinutes() - 1);

            record = owner.eventStore.add({
                calendarId: owner.data.activeCalendarId || calendarStore.getAt(0)[calendarStore.keyProperty],
                endDate,
                startDate,
                title     : 'New Event'
            })[0];

            // we need to cache a reference to make the record accessible for onColumnDragEnd()
            me[Symbol.for('addedRecord')] = record;

            // wait until the new event got mounted
            setTimeout(() => {
                eventId     = owner.getEventId(record.id);
                dragElement = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].findVdomChild(owner.vdom, eventId).vdom;

                eventDragZone = me.getEventDragZone({
                    dragElement,
                    enableResizingAcrossOppositeEdge: true,
                    eventRecord                     : record,
                    proxyParentId                   : data.path[0].id
                });

                owner.getPlugin({flag:'resizable'}).onDragStart(data);
                eventDragZone.dragStart(data);

                setTimeout(() => {
                    me.isDragging && Neo.applyDeltas(me.appName, {
                        id   : eventId,
                        style: {opacity: 0}
                    });
                }, 50);
            }, 50);
        }
    }

    /**
     * @param {Object} data
     */
    onEventDragEnd(data) {
        let me    = this,
            owner = me.owner;

        if (owner.enableDrag) {
            owner.eventDragZone.dragEnd();

            if (!me.isTopLevelEvent(data)) {
                data = me.adjustResizeEvent(data);
                owner.getPlugin({flag:'resizable'}).onDragEnd(data);
            } else {
                owner.eventDragZone.removeBodyCursorCls();
            }

            me.isDragging = false;
        }
    }

    /**
     * @param {Object} data
     */
    onEventDragMove(data) {
        let me    = this,
            owner = me.owner;

        if (owner.enableDrag) {
            if (!me.isTopLevelEvent(data)) {
                data = me.adjustResizeEvent(data);
            }

            owner.eventDragZone.dragMove(data);
        }
    }

    /**
     * @param {Object} data
     */
    onEventDragStart(data) {
        let me        = this,
            owner     = me.owner,
            modelData = owner.data;

        if (owner.enableDrag) {
            let isTopLevelEvent = me.isTopLevelEvent(data),
                dragElement, eventDragZone;

            if (!isTopLevelEvent) {
                data = me.adjustResizeEvent(data);
            }

            me.isDragging = true;

            dragElement = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_3__["default"].findVdomChild(owner.vdom, data.path[0].id).vdom;

            eventDragZone = me.getEventDragZone({
                dragElement,
                enableResizingAcrossOppositeEdge: modelData.events.enableResizingAcrossOppositeEdge,
                eventRecord                     : owner.eventStore.get(dragElement.flag),
                proxyParentId                   : data.path[1].id
            });

            if (isTopLevelEvent) {
                eventDragZone.addBodyCursorCls();
            } else {
                owner.getPlugin({flag:'resizable'}).onDragStart(data);
            }

            eventDragZone.dragStart(data);
        }
    }
}

Neo.applyClassConfig(DragDrop);




/***/ }),

/***/ "./src/plugin/Base.mjs":
/*!*****************************!*\
  !*** ./src/plugin/Base.mjs ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Base)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Base.mjs */ "./src/core/Base.mjs");


/**
 * Plugins are intended to get put into the plugins config of component.Base
 * to enhance them or add additional features
 * @class Neo.plugin.Base
 * @extends Neo.core.Base
 */
class Base extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.plugin.Base'
         * @protected
         */
        className: 'Neo.plugin.Base',
        /**
         * @member {String} ntype='plugin'
         * @protected
         */
        ntype: 'plugin',
        /**
         * @member {Neo.component.Base} owner=null
         * @protected
         */
        owner: null
    }}

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);

        let me = this;

        me.owner.on('mounted', me.onOwnerMounted, me);
    }

    /**
     * Override this method to apply changes to the owner Component when it does get mounted
     */
    onOwnerMounted() {

    }
}

Neo.applyClassConfig(Base);




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2FwcC92ZW5kb3JzLXNyY19jYWxlbmRhcl92aWV3X3dlZWtfcGx1Z2luX0RyYWdEcm9wX21qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0Q7QUFDbUI7QUFDVjtBQUNSO0FBQ0Q7O0FBRXhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLCtEQUFRO0FBQ3BDLHdCQUF3QjtBQUN4QjtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixNQUFNO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsTUFBTTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFv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QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvQkFBb0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL2NhbGVuZGFyL3ZpZXcvd2Vlay9FdmVudERyYWdab25lLm1qcyIsIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL2NhbGVuZGFyL3ZpZXcvd2Vlay9wbHVnaW4vRHJhZ0Ryb3AubWpzIiwid2VicGFjazovL25lby5tanMvLi9zcmMvcGx1Z2luL0Jhc2UubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEYXRlVXRpbCAgICAgICAgICAgZnJvbSAnLi4vLi4vLi4vdXRpbC9EYXRlLm1qcyc7XG5pbXBvcnQgRHJhZ1Byb3h5Q29tcG9uZW50IGZyb20gJy4uLy4uLy4uL2RyYWdnYWJsZS9EcmFnUHJveHlDb21wb25lbnQubWpzJztcbmltcG9ydCBEcmFnWm9uZSAgICAgICAgICAgZnJvbSAnLi4vLi4vLi4vZHJhZ2dhYmxlL0RyYWdab25lLm1qcyc7XG5pbXBvcnQgTmVvQXJyYXkgICAgICAgICAgIGZyb20gJy4uLy4uLy4uL3V0aWwvQXJyYXkubWpzJztcbmltcG9ydCBWRG9tVXRpbCAgICAgICAgICAgZnJvbSAnLi4vLi4vLi4vdXRpbC9WRG9tLm1qcyc7XG5cbi8qKlxuICogQGNsYXNzIE5lby5jYWxlbmRhci52aWV3LndlZWsuRXZlbnREcmFnWm9uZVxuICogQGV4dGVuZHMgTmVvLmRyYWdnYWJsZS5EcmFnWm9uZVxuICovXG5jbGFzcyBFdmVudERyYWdab25lIGV4dGVuZHMgRHJhZ1pvbmUge1xuICAgIHN0YXRpYyBnZXRDb25maWcoKSB7cmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8uY2FsZW5kYXIudmlldy53ZWVrLkV2ZW50RHJhZ1pvbmUnXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGNsYXNzTmFtZTogJ05lby5jYWxlbmRhci52aWV3LndlZWsuRXZlbnREcmFnWm9uZScsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBhZGREcmFnUHJveHlDbHM9ZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGFkZERyYWdQcm94eUNsczogZmFsc2UsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBlbmFibGVSZXNpemluZ0Fjcm9zc09wcG9zaXRlRWRnZT10cnVlXG4gICAgICAgICAqL1xuICAgICAgICBlbmFibGVSZXNpemluZ0Fjcm9zc09wcG9zaXRlRWRnZTogdHJ1ZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcn0gYXhpc0VuZFRpbWU9MFxuICAgICAgICAgKi9cbiAgICAgICAgYXhpc0VuZFRpbWU6IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IGF4aXNTdGFydFRpbWU9MFxuICAgICAgICAgKi9cbiAgICAgICAgYXhpc1N0YXJ0VGltZTogMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcn0gY29sdW1uSGVpZ2h0PTBcbiAgICAgICAgICovXG4gICAgICAgIGNvbHVtbkhlaWdodDogMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcn0gY29sdW1uVG9wPTBcbiAgICAgICAgICovXG4gICAgICAgIGNvbHVtblRvcDogMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcn0gY3VycmVudEludGVydmFsPTBcbiAgICAgICAgICovXG4gICAgICAgIGN1cnJlbnRJbnRlcnZhbDogMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRpbWUgaW4gbWludXRlc1xuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IGV2ZW50RHVyYXRpb249MFxuICAgICAgICAgKi9cbiAgICAgICAgZXZlbnREdXJhdGlvbjogMCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gZXZlbnRSZWNvcmQ9bnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgZXZlbnRSZWNvcmQ6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnRlcm5hbCBmbGFnLlxuICAgICAgICAgKiBJZiB3ZSByZXNpemUgYWNyb3NzIHRoZSBvcHBvc2l0ZSBlZGdlIGFuZCB0aGVuIGJhY2ssIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSByZWxhdGVkIGVkZ2UgcG9zaXRpb24gb25jZS5cbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gZm9yY2VVcGRhdGU9ZmFsc2VcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgZm9yY2VVcGRhdGU6IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogSW50ZXJuYWwgZmxhZ1xuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBoYXNPdmVyZmxvdz1mYWxzZVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBoYXNPdmVyZmxvdzogZmFsc2UsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aW1lIGluIG1pbnV0ZXNcbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBpbnRlcnZhbFNpemU9MTVcbiAgICAgICAgICovXG4gICAgICAgIGludGVydmFsU2l6ZTogMTUsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBrZWVwRW5kRGF0ZT1mYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAga2VlcEVuZERhdGU6IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0ga2VlcFN0YXJ0RGF0ZT1mYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAga2VlcFN0YXJ0RGF0ZTogZmFsc2UsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBtb3ZlSG9yaXpvbnRhbD1mYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAgbW92ZUhvcml6b250YWw6IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gbW92ZUluTWFpblRocmVhZD1mYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAgbW92ZUluTWFpblRocmVhZDogZmFsc2UsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnRlcm5hbCBmbGFnLlxuICAgICAgICAgKiBAbWVtYmVyIHtEYXRlfSBuZXdFbmREYXRlPW51bGxcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgbmV3RW5kRGF0ZTogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEludGVybmFsIGZsYWcuXG4gICAgICAgICAqIEBtZW1iZXIge0RhdGV9IG5ld1N0YXJ0RGF0ZT1udWxsXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIG5ld1N0YXJ0RGF0ZTogbnVsbCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcn0gc2Nyb2xsRmFjdG9yTGVmdD0zXG4gICAgICAgICAqL1xuICAgICAgICBzY3JvbGxGYWN0b3JMZWZ0OiAzLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gdXNlUHJveHlXcmFwcGVyPWZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICB1c2VQcm94eVdyYXBwZXI6IGZhbHNlXG4gICAgfX1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgYWRkQm9keUN1cnNvckNscygpIHtcbiAgICAgICAgTmVvLmFwcGx5RGVsdGFzKHRoaXMuYXBwTmFtZSwge2lkOiAnZG9jdW1lbnQuYm9keScsIGNsczoge2FkZDogWyduZW8tY3Vyc29yLW1vdmUnXX19KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlcyB0aGUgMjQ6MDAgaXNzdWUsIHdoZXJlIGFuIGV2ZW50IHdvdWxkIGVuZCBvbiB0aGUgbmV4dCBkYXlcbiAgICAgKiBAcGFyYW0ge0RhdGV9IGRhdGVcbiAgICAgKiBAcmV0dXJucyB7RGF0ZX1cbiAgICAgKi9cbiAgICBhZGp1c3RFbmREYXRlKGRhdGUpIHtcbiAgICAgICAgaWYgKGRhdGUuZ2V0SG91cnMoKSA9PT0gMCAmJiBkYXRlLmdldE1pbnV0ZXMoKSA9PT0gMCkge1xuICAgICAgICAgICAgLy8gaWYgYW4gZXZlbnQgZW5kcyBhdCAyNDowMCwgY2hhbmdlIGl0IHRvIDIzOjU5ID0+IG90aGVyd2lzZSB0aGUgZGF5IGluY3JlYXNlcyBieSAxXG4gICAgICAgICAgICBkYXRlLnNldE1pbnV0ZXMoZGF0ZS5nZXRNaW51dGVzKCkgLSAxKTtcbiAgICAgICAgfSBlbHNlIGlmICghKGRhdGUuZ2V0SG91cnMoKSA9PT0gMjMgJiYgZGF0ZS5nZXRNaW51dGVzKCkgPT09IDU5KSAmJiBkYXRlLmdldE1pbnV0ZXMoKSAlIHRoaXMuaW50ZXJ2YWxTaXplICE9PSAwKSB7XG4gICAgICAgICAgICAvLyBvdGhlcndpc2Ugc3dpdGNoIG5vbiBpbnRlcnZhbCBiYXNlZCB2YWx1ZXMgYmFja1xuICAgICAgICAgICAgZGF0ZS5zZXRNaW51dGVzKGRhdGUuZ2V0TWludXRlcygpICsgMSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYWZ0ZXIgdGhlIHByb3h5UGFyZW50SWQgY29uZmlnIGdvdCBjaGFuZ2VkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9sZFZhbHVlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGFmdGVyU2V0UHJveHlQYXJlbnRJZCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICYmIG9sZFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBub2RlIGRpZCBub3QgZ2V0IHJlbW92ZWQgeWV0XG4gICAgICAgICAgICBpZiAobWUuZHJhZ1Byb3h5Py52ZG9tLmNuWzBdLmlkKSB7XG4gICAgICAgICAgICAgICAgTmVvLmFwcGx5RGVsdGFzKG1lLmFwcE5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uICA6ICdtb3ZlTm9kZScsXG4gICAgICAgICAgICAgICAgICAgIGlkICAgICAgOiBtZS5kcmFnUHJveHkuaWQsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ICAgOiAwLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRJZDogdmFsdWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgY3JlYXRlRHJhZ1Byb3h5KGRhdGEpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBjb21wb25lbnQgPSBOZW8uZ2V0Q29tcG9uZW50KG1lLmdldERyYWdFbGVtZW50Um9vdCgpLmlkKSB8fCBtZS5vd25lcixcbiAgICAgICAgICAgIHZkb20gICAgICA9IG1lLmRyYWdQcm94eUNvbmZpZz8udmRvbSxcbiAgICAgICAgICAgIGNsb25lICAgICA9IFZEb21VdGlsLmNsb25lKHZkb20gPyB2ZG9tIDogbWUuZHJhZ0VsZW1lbnQpO1xuXG4gICAgICAgICAgICBjbG9uZS5jblsyXS5yZW1vdmVEb20gPSBmYWxzZTtcblxuICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICBtb2R1bGUgICAgICAgICAgOiBEcmFnUHJveHlDb21wb25lbnQsXG4gICAgICAgICAgICBhcHBOYW1lICAgICAgICAgOiBtZS5hcHBOYW1lLFxuICAgICAgICAgICAgbW92ZUluTWFpblRocmVhZDogbWUubW92ZUluTWFpblRocmVhZCxcbiAgICAgICAgICAgIHBhcmVudElkICAgICAgICA6IG1lLnByb3h5UGFyZW50SWQsXG5cbiAgICAgICAgICAgIC4uLm1lLmRyYWdQcm94eUNvbmZpZyxcblxuICAgICAgICAgICAgdmRvbTogbWUudXNlUHJveHlXcmFwcGVyID8ge2NuOiBbY2xvbmVdfSA6IGNsb25lIC8vIHdlIHdhbnQgdG8gb3ZlcnJpZGUgZHJhZ1Byb3h5Q29uZmlnLnZkb20gaWYgbmVlZGVkXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uZmlnLmNscyA9IGNvbmZpZy5jbHMgfHwgW107XG5cbiAgICAgICAgY29uZmlnLmNscy5wdXNoKCduZW8tZm9jdXMnKTtcblxuICAgICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgICBjb25maWcuY2xzLnB1c2goY29tcG9uZW50LmdldFRoZW1lKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNsb25lLmNscyAmJiAhbWUudXNlUHJveHlXcmFwcGVyKSB7XG4gICAgICAgICAgICBjb25maWcuY2xzLnB1c2goLi4uY2xvbmUuY2xzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZS5hZGREcmFnUHJveHlDbHMpIHtcbiAgICAgICAgICAgIE5lb0FycmF5LmFkZChjb25maWcuY2xzLCBtZS5kcmFnUHJveHlDbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihjb25maWcuc3R5bGUsIHtcbiAgICAgICAgICAgIGhlaWdodDogYCR7ZGF0YS5oZWlnaHR9cHhgLFxuICAgICAgICAgICAgdG9wICAgOiBgJHtkYXRhLnkgLSBtZS5jb2x1bW5Ub3B9cHhgLFxuICAgICAgICAgICAgd2lkdGggOiBgJHtkYXRhLndpZHRofXB4YFxuICAgICAgICB9KTtcblxuICAgICAgICBtZS5kcmFnUHJveHkgPSBOZW8uY3JlYXRlKGNvbmZpZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRHJhZ0VuZCBlcXVhbHMgZHJvcCwgc2luY2Ugd2UgY2FuIG9ubHkgZHJhZyB0byB2YWxpZCBwb3NpdGlvbnNcbiAgICAgKiB0b2RvOiBFU0Mga2V5XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBkcmFnRW5kKGRhdGEpIHtcbiAgICAgICAgc3VwZXIuZHJhZ0VuZChkYXRhKTtcblxuICAgICAgICBsZXQgbWUgICAgID0gdGhpcyxcbiAgICAgICAgICAgIG93bmVyICA9IG1lLm93bmVyLFxuICAgICAgICAgICAgcmVjb3JkID0gbWUuZXZlbnRSZWNvcmQsXG4gICAgICAgICAgICBlbmREYXRlLCBzdGFydERhdGU7XG5cbiAgICAgICAgaWYgKG1lLmtlZXBTdGFydERhdGUpIHtcbiAgICAgICAgICAgIGVuZERhdGUgICA9IG1lLm5ld0VuZERhdGU7XG4gICAgICAgICAgICBzdGFydERhdGUgPSBtZS5uZXdTdGFydERhdGUgfHwgcmVjb3JkLnN0YXJ0RGF0ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKFZEb21VdGlsLmZpbmRWZG9tQ2hpbGQob3duZXIudmRvbSwgbWUucHJveHlQYXJlbnRJZCkudmRvbS5mbGFnICsgJ1QwMDowMDowMCcpO1xuICAgICAgICAgICAgc3RhcnREYXRlLnNldEhvdXJzKG1lLmF4aXNTdGFydFRpbWUpO1xuICAgICAgICAgICAgc3RhcnREYXRlLnNldE1pbnV0ZXMobWUuY3VycmVudEludGVydmFsICogbWUuaW50ZXJ2YWxTaXplKTtcblxuICAgICAgICAgICAgaWYgKG1lLmtlZXBFbmREYXRlKSB7XG4gICAgICAgICAgICAgICAgZW5kRGF0ZSAgID0gbWUubmV3RW5kRGF0ZSAgIHx8IHJlY29yZC5lbmREYXRlO1xuICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IG1lLm5ld1N0YXJ0RGF0ZSB8fCBzdGFydERhdGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVuZERhdGUgPSBEYXRlVXRpbC5jbG9uZShzdGFydERhdGUpO1xuICAgICAgICAgICAgICAgIGVuZERhdGUuc2V0TWludXRlcyhlbmREYXRlLmdldE1pbnV0ZXMoKSArIG1lLmV2ZW50RHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZW5kRGF0ZSA9IG1lLmFkanVzdEVuZERhdGUoZW5kRGF0ZSk7XG5cbiAgICAgICAgcmVjb3JkLnNldFNpbGVudCh7XG4gICAgICAgICAgICBlbmREYXRlLFxuICAgICAgICAgICAgc3RhcnREYXRlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24obWUsIHtcbiAgICAgICAgICAgIGN1cnJlbnRJbnRlcnZhbDogMCxcbiAgICAgICAgICAgIGhhc092ZXJmbG93ICAgIDogZmFsc2UsXG4gICAgICAgICAgICBrZWVwRW5kRGF0ZSAgICA6IGZhbHNlLFxuICAgICAgICAgICAga2VlcFN0YXJ0RGF0ZSAgOiBmYWxzZSxcbiAgICAgICAgICAgIG5ld0VuZERhdGUgICAgIDogbnVsbCxcbiAgICAgICAgICAgIG5ld1N0YXJ0RGF0ZSAgIDogbnVsbCxcbiAgICAgICAgICAgIHByb3h5UGFyZW50SWQgIDogbnVsbFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyB0b2RvOiB1cGRhdGluZyBhIHJlY29yZCBmaWVsZCB3aGljaCBpcyBpbmNsdWRlZCBpbnNpZGUgYSBzb3J0ZXIgc2hvdWxkIHRyaWdnZXIgY29sbGVjdGlvbi5kb1NvcnQoKVxuICAgICAgICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9uZW9tanMvbmVvL2lzc3Vlcy8yMzkyXG5cbiAgICAgICAgb3duZXIuZ2V0TW9kZWwoKS5nZXRTdG9yZSgnZXZlbnRzJykuZG9Tb3J0KCk7XG4gICAgICAgIG93bmVyLnVwZGF0ZUV2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgZHJhZ01vdmUoZGF0YSkge1xuICAgICAgICBsZXQgbWUgICAgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGF4aXNFbmRUaW1lICAgICA9IG1lLmF4aXNFbmRUaW1lLFxuICAgICAgICAgICAgYXhpc1N0YXJ0VGltZSAgID0gbWUuYXhpc1N0YXJ0VGltZSxcbiAgICAgICAgICAgIGNvbHVtbkhlaWdodCAgICA9IG1lLmNvbHVtbkhlaWdodCxcbiAgICAgICAgICAgIGV2ZW50RHVyYXRpb24gICA9IG1lLmV2ZW50RHVyYXRpb24sXG4gICAgICAgICAgICBpICAgICAgICAgICAgICAgPSAwLFxuICAgICAgICAgICAgaW50ZXJ2YWxTaXplICAgID0gbWUuaW50ZXJ2YWxTaXplLFxuICAgICAgICAgICAga2VlcEVuZERhdGUgICAgID0gbWUua2VlcEVuZERhdGUsXG4gICAgICAgICAgICBrZWVwU3RhcnREYXRlICAgPSBtZS5rZWVwU3RhcnREYXRlLFxuICAgICAgICAgICAgcGF0aCAgICAgICAgICAgID0gZGF0YS50YXJnZXRQYXRoLFxuICAgICAgICAgICAgbGVuICAgICAgICAgICAgID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgICBvd25lciAgICAgICAgICAgPSBtZS5vd25lcixcbiAgICAgICAgICAgIHJlY29yZCAgICAgICAgICA9IG1lLmV2ZW50UmVjb3JkLFxuICAgICAgICAgICAgc3dpdGNoRGlyZWN0aW9uID0gZmFsc2UsXG4gICAgICAgICAgICB0aW1lQXhpcyAgICAgICAgPSBvd25lci50aW1lQXhpcyxcbiAgICAgICAgICAgIGF4aXNTdGFydERhdGUsIGN1cnJlbnRJbnRlcnZhbCwgZGVsdGFzLCBkdXJhdGlvbiwgZW5kRGF0ZSwgZXZlbnRJbnRlcnZhbHMsIGhlaWdodCwgaW50ZXJ2YWxIZWlnaHQsXG4gICAgICAgICAgICBpbnRlcnZhbHMsIGxpbWl0SW50ZXJ2YWwsIG1pbmltdW1FdmVudEludGVydmFscywgcG9zaXRpb24sIHN0YXJ0RGF0ZSwgc3RhcnRJbnRlcnZhbDtcblxuICAgICAgICBpZiAobWUuZHJhZ1Byb3h5KSB7XG4gICAgICAgICAgICBpZiAoIWtlZXBFbmREYXRlICYmICFrZWVwU3RhcnREYXRlKSB7XG4gICAgICAgICAgICAgICAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGF0aFtpXS5jbHMuaW5jbHVkZXMoJ25lby1jLXctY29sdW1uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lLnByb3h5UGFyZW50SWQgPSBwYXRoW2ldLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGludGVydmFscyAgICAgID0gKGF4aXNFbmRUaW1lIC0gYXhpc1N0YXJ0VGltZSkgKiA2MCAvIGludGVydmFsU2l6ZTsgLy8gMTUgbWludXRlcyBlYWNoXG4gICAgICAgICAgICBpbnRlcnZhbEhlaWdodCA9IGNvbHVtbkhlaWdodCAvIGludGVydmFscztcblxuICAgICAgICAgICAgcG9zaXRpb24gPSBNYXRoLm1pbihjb2x1bW5IZWlnaHQsIGRhdGEuY2xpZW50WSAtIG1lLm9mZnNldFkgLSBtZS5jb2x1bW5Ub3ApO1xuXG4gICAgICAgICAgICBjdXJyZW50SW50ZXJ2YWwgPSBNYXRoLmZsb29yKHBvc2l0aW9uIC8gaW50ZXJ2YWxIZWlnaHQpO1xuXG4gICAgICAgICAgICBlbmREYXRlICAgPSBEYXRlVXRpbC5jbG9uZShyZWNvcmQuZW5kRGF0ZSk7XG4gICAgICAgICAgICBzdGFydERhdGUgPSBEYXRlVXRpbC5jbG9uZShyZWNvcmQuc3RhcnREYXRlKTtcblxuICAgICAgICAgICAgLy8gZXZlbnRzIGNhbiBoYXZlIGEgc21hbGxlciBzdGFydCB0aW1lIHRoYW4gdGhlIGF4aXMgbWluIHZhbHVlLlxuICAgICAgICAgICAgLy8gcmVzaXppbmcgdmlhIHRoZSBub3J0aCBoYW5kbGUgbmVlZHMgdG8gYWRqdXN0IHRoZSBkdXJhdGlvbiB0byBob25vciB0aGlzLlxuICAgICAgICAgICAgaWYgKGtlZXBFbmREYXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF4aXNTdGFydFRpbWUgPiBzdGFydERhdGUuZ2V0SG91cnMoKSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydERhdGUuc2V0SG91cnMoYXhpc1N0YXJ0VGltZSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZS5zZXRNaW51dGVzKDApO1xuXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50RHVyYXRpb24gPSAoZW5kRGF0ZSAtIHN0YXJ0RGF0ZSkgLyA2MCAvIDEwMDA7IC8vIGR1cmF0aW9uIGluIG1pbnV0ZXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGV2ZW50cyBjYW4gaGF2ZSBhIGJpZ2dlciBlbmQgdGltZSB0aGFuIHRoZSBheGlzIG1heCB2YWx1ZS5cbiAgICAgICAgICAgIC8vIHJlc2l6aW5nIHZpYSB0aGUgc291dGggaGFuZGxlIG5lZWRzIHRvIGFkanVzdCB0aGUgZHVyYXRpb24gdG8gaG9ub3IgdGhpcy5cbiAgICAgICAgICAgIGlmIChrZWVwU3RhcnREYXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF4aXNFbmRUaW1lIDwgZW5kRGF0ZS5nZXRIb3VycygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZERhdGUuc2V0SG91cnMoYXhpc0VuZFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICBlbmREYXRlLnNldE1pbnV0ZXMoMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZXZlbnREdXJhdGlvbiA9IChlbmREYXRlIC0gc3RhcnREYXRlKSAvIDYwIC8gMTAwMDsgLy8gZHVyYXRpb24gaW4gbWludXRlc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFrZWVwRW5kRGF0ZSkge1xuICAgICAgICAgICAgICAgIC8vIGV2ZW50cyBtdXN0IG5vdCBlbmQgYWZ0ZXIgdGhlIGxhc3QgdmlzaWJsZSBpbnRlcnZhbFxuICAgICAgICAgICAgICAgIGN1cnJlbnRJbnRlcnZhbCA9IE1hdGgubWluKGN1cnJlbnRJbnRlcnZhbCwgaW50ZXJ2YWxzIC0gKGV2ZW50RHVyYXRpb24gLyBpbnRlcnZhbFNpemUpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsdGFzID0gW3tcbiAgICAgICAgICAgICAgICBpZCAgIDogbWUuZHJhZ1Byb3h5LmlkLFxuICAgICAgICAgICAgICAgIHN0eWxlOiB7fVxuICAgICAgICAgICAgfV07XG5cbiAgICAgICAgICAgIGlmIChrZWVwRW5kRGF0ZSB8fCBrZWVwU3RhcnREYXRlKSB7XG4gICAgICAgICAgICAgICAgYXhpc1N0YXJ0RGF0ZSA9IERhdGVVdGlsLmNsb25lKHJlY29yZC5zdGFydERhdGUpO1xuICAgICAgICAgICAgICAgIGF4aXNTdGFydERhdGUuc2V0SG91cnMoYXhpc1N0YXJ0VGltZSk7XG4gICAgICAgICAgICAgICAgYXhpc1N0YXJ0RGF0ZS5zZXRNaW51dGVzKDApO1xuXG4gICAgICAgICAgICAgICAgbWluaW11bUV2ZW50SW50ZXJ2YWxzID0gb3duZXIubWluaW11bUV2ZW50RHVyYXRpb24gLyBpbnRlcnZhbFNpemU7XG4gICAgICAgICAgICAgICAgc3RhcnRJbnRlcnZhbCAgICAgICAgID0gKHJlY29yZC5zdGFydERhdGUgLSBheGlzU3RhcnREYXRlKSAvIGludGVydmFsU2l6ZSAvIDYwIC8gMTAwMDtcblxuICAgICAgICAgICAgICAgIGlmIChrZWVwRW5kRGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBsaW1pdEludGVydmFsID0gc3RhcnRJbnRlcnZhbCArIChldmVudER1cmF0aW9uIC8gaW50ZXJ2YWxTaXplKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobWUuZW5hYmxlUmVzaXppbmdBY3Jvc3NPcHBvc2l0ZUVkZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZS5mb3JjZVVwZGF0ZSAmJiBjdXJyZW50SW50ZXJ2YWwgPiBsaW1pdEludGVydmFsIC1taW5pbXVtRXZlbnRJbnRlcnZhbHMgJiYgY3VycmVudEludGVydmFsIDwgbGltaXRJbnRlcnZhbCArIG1pbmltdW1FdmVudEludGVydmFscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gd2UgcmVzaXplIGJhY2sgdG8gdGhlIG9yaWdpbmFsIGRpcmVjdGlvbiwga2VlcCB0aGUgbWluIGludGVydmFsIHVudGlsIHdlIHNuYXAgYmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudEludGVydmFsID49IGxpbWl0SW50ZXJ2YWwgKyBtaW5pbXVtRXZlbnRJbnRlcnZhbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2hEaXJlY3Rpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLmZvcmNlVXBkYXRlICA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmREYXRlLnNldEhvdXJzKGF4aXNTdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZERhdGUuc2V0TWludXRlcyhjdXJyZW50SW50ZXJ2YWwgKiBpbnRlcnZhbFNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZERhdGUgPSBtZS5hZGp1c3RFbmREYXRlKGVuZERhdGUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUubmV3RW5kRGF0ZSA9IGVuZERhdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydERhdGUuc2V0SG91cnMoYXhpc1N0YXJ0VGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlLnNldE1pbnV0ZXMobGltaXRJbnRlcnZhbCAqIGludGVydmFsU2l6ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5uZXdTdGFydERhdGUgPSBzdGFydERhdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IChlbmREYXRlIC0gc3RhcnREYXRlKSAvIDYwIC8gNjAgLyAxMDAwOyAvLyBkdXJhdGlvbiBpbiBob3Vyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhc1swXS5zdHlsZS50b3AgPSBgY2FsYygke2xpbWl0SW50ZXJ2YWwgKiBpbnRlcnZhbEhlaWdodCAvIGNvbHVtbkhlaWdodCAqIDEwMH0lICsgMXB4KWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLmZvcmNlVXBkYXRlICA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLm5ld1N0YXJ0RGF0ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXN3aXRjaERpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEludGVydmFsID0gTWF0aC5taW4oY3VycmVudEludGVydmFsLCBsaW1pdEludGVydmFsIC0gbWluaW11bUV2ZW50SW50ZXJ2YWxzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZWVwU3RhcnREYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbWl0SW50ZXJ2YWwgPSBzdGFydEludGVydmFsIC0gKGV2ZW50RHVyYXRpb24gLyBpbnRlcnZhbFNpemUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChtZS5lbmFibGVSZXNpemluZ0Fjcm9zc09wcG9zaXRlRWRnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXZlbnRzIG11c3Qgbm90IHN0YXJ0IGJlZm9yZSB0aGUgZmlyc3QgdmlzaWJsZSBpbnRlcnZhbFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEludGVydmFsID0gTWF0aC5tYXgoLShldmVudER1cmF0aW9uIC8gaW50ZXJ2YWxTaXplKSwgY3VycmVudEludGVydmFsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRJbnRlcnZhbCA8PSBsaW1pdEludGVydmFsIC0gbWluaW11bUV2ZW50SW50ZXJ2YWxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoRGlyZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5mb3JjZVVwZGF0ZSAgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kRGF0ZS5zZXRIb3VycyhheGlzU3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmREYXRlLnNldE1pbnV0ZXMoZXZlbnREdXJhdGlvbiArIGxpbWl0SW50ZXJ2YWwgKiBpbnRlcnZhbFNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZERhdGUgPSBtZS5hZGp1c3RFbmREYXRlKGVuZERhdGUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUubmV3RW5kRGF0ZSA9IGVuZERhdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydERhdGUuc2V0SG91cnMoYXhpc1N0YXJ0VGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlLnNldE1pbnV0ZXMoZXZlbnREdXJhdGlvbiArIGN1cnJlbnRJbnRlcnZhbCAqIGludGVydmFsU2l6ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5uZXdTdGFydERhdGUgPSBzdGFydERhdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IChlbmREYXRlIC0gc3RhcnREYXRlKSAvIDYwIC8gNjAgLyAxMDAwOyAvLyBkdXJhdGlvbiBpbiBob3Vyc1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSAoZXZlbnREdXJhdGlvbiAvIGludGVydmFsU2l6ZSArIGN1cnJlbnRJbnRlcnZhbCkgKiBpbnRlcnZhbEhlaWdodDsgLy8gc25hcCB0byB2YWxpZCBpbnRlcnZhbHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uIC8gY29sdW1uSGVpZ2h0ICogMTAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFzWzBdLnN0eWxlLnRvcCA9IGBjYWxjKCR7cG9zaXRpb259JSArIDFweClgO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtZS5mb3JjZVVwZGF0ZSAmJiBjdXJyZW50SW50ZXJ2YWwgPCBsaW1pdEludGVydmFsICsgbWluaW11bUV2ZW50SW50ZXJ2YWxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB3ZSByZXNpemUgYmFjayB0byB0aGUgb3JpZ2luYWwgZGlyZWN0aW9uLCBrZWVwIHRoZSBtaW4gaW50ZXJ2YWwgdW50aWwgd2Ugc25hcCBiYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtZS5mb3JjZVVwZGF0ZSAmJiBjdXJyZW50SW50ZXJ2YWwgPj0gbGltaXRJbnRlcnZhbCArIG1pbmltdW1FdmVudEludGVydmFscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZS5jdXJyZW50SW50ZXJ2YWwgIT09IGN1cnJlbnRJbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5mb3JjZVVwZGF0ZSAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUubmV3U3RhcnREYXRlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFzWzBdLnN0eWxlLnRvcCA9IGBjYWxjKCR7c3RhcnRJbnRlcnZhbCAqIGludGVydmFsSGVpZ2h0IC8gY29sdW1uSGVpZ2h0ICogMTAwfSUgKyAxcHgpYDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXN3aXRjaERpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEludGVydmFsID0gTWF0aC5tYXgoY3VycmVudEludGVydmFsLCBsaW1pdEludGVydmFsICsgbWluaW11bUV2ZW50SW50ZXJ2YWxzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFrZWVwU3RhcnREYXRlKSB7XG4gICAgICAgICAgICAgICAgLy8gZXZlbnRzIG11c3Qgbm90IHN0YXJ0IGJlZm9yZSB0aGUgZmlyc3QgdmlzaWJsZSBpbnRlcnZhbFxuICAgICAgICAgICAgICAgIGN1cnJlbnRJbnRlcnZhbCA9IE1hdGgubWF4KDAsIGN1cnJlbnRJbnRlcnZhbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtZS5jdXJyZW50SW50ZXJ2YWwgIT09IGN1cnJlbnRJbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIGlmICghc3dpdGNoRGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgha2VlcEVuZERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZERhdGUuc2V0SG91cnMoYXhpc1N0YXJ0VGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmREYXRlLnNldE1pbnV0ZXMoZXZlbnREdXJhdGlvbiArIGN1cnJlbnRJbnRlcnZhbCAqIGludGVydmFsU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoa2VlcFN0YXJ0RGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWUubmV3RW5kRGF0ZSA9IGVuZERhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IChlbmREYXRlIC0gcmVjb3JkLnN0YXJ0RGF0ZSkgLyA2MCAvIDYwIC8gMTAwMDsgLy8gZHVyYXRpb24gaW4gaG91cnNcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZS5zZXRIb3VycyhheGlzU3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZS5zZXRNaW51dGVzKGN1cnJlbnRJbnRlcnZhbCAqIGludGVydmFsU2l6ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gY3VycmVudEludGVydmFsICogaW50ZXJ2YWxIZWlnaHQ7IC8vIHNuYXAgdG8gdmFsaWQgaW50ZXJ2YWxzXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uIC8gY29sdW1uSGVpZ2h0ICogMTAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWx0YXNbMF0uc3R5bGUudG9wID0gYGNhbGMoJHtwb3NpdGlvbn0lICsgMXB4KWA7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoa2VlcEVuZERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gKHJlY29yZC5lbmREYXRlIC0gc3RhcnREYXRlKSAvIDYwIC8gNjAgLyAxMDAwOyAvLyBkdXJhdGlvbiBpbiBob3Vyc1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZW5kRGF0ZSA9IG1lLmFkanVzdEVuZERhdGUoZW5kRGF0ZSk7XG5cbiAgICAgICAgICAgICAgICBkZWx0YXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGlkICAgICAgIDogbWUuZHJhZ1Byb3h5LnZkb20uY25bMl0uaWQsXG4gICAgICAgICAgICAgICAgICAgIGlubmVySFRNTDogb3duZXIuaW50bEZvcm1hdF90aW1lLmZvcm1hdChlbmREYXRlKVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGtlZXBFbmREYXRlIHx8IGtlZXBTdGFydERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5yb3VuZChkdXJhdGlvbiAvIChheGlzRW5kVGltZSAtIGF4aXNTdGFydFRpbWUpICogMTAwICogMTAwMCkgLyAxMDAwO1xuICAgICAgICAgICAgICAgICAgICBkZWx0YXNbMF0uc3R5bGUuaGVpZ2h0ID0gYGNhbGMoJHtoZWlnaHR9JSAtIDJweClgO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRlbHRhcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgaWQgICAgICAgOiBtZS5kcmFnUHJveHkudmRvbS5jblswXS5pZCxcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJIVE1MOiBvd25lci5pbnRsRm9ybWF0X3RpbWUuZm9ybWF0KHN0YXJ0RGF0ZSlcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBub2RlIGdvdCBhZGRlZCB5ZXRcbiAgICAgICAgICAgICAgICBpZiAobWUuZHJhZ1Byb3h5LnZkb20uY25bMF0uaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRJbnRlcnZhbHMgPSAoZHVyYXRpb24gJiYgZHVyYXRpb24gKiA2MCB8fCBldmVudER1cmF0aW9uKSAvIHRpbWVBeGlzLmludGVydmFsO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudEludGVydmFscyA8PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZUF4aXMucm93SGVpZ2h0IC8gZXZlbnRJbnRlcnZhbHMgPCAyNSAmJiAhbWUuaGFzT3ZlcmZsb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWx0YXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkIDogbWUuZHJhZ1Byb3h5LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbHM6IHthZGQ6IFsnbmVvLW92ZXJmbG93J119XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5oYXNPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWUuaGFzT3ZlcmZsb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZCA6IG1lLmRyYWdQcm94eS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbHM6IHtyZW1vdmU6IFsnbmVvLW92ZXJmbG93J119XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbWUuaGFzT3ZlcmZsb3cgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIE5lby5hcHBseURlbHRhcyhtZS5hcHBOYW1lLCBkZWx0YXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWUuY3VycmVudEludGVydmFsID0gY3VycmVudEludGVydmFsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBkcmFnU3RhcnQoZGF0YSkge1xuICAgICAgICBsZXQgbWUgPSB0aGlzLFxuICAgICAgICAgICAgZXZlbnREdXJhdGlvbiwgb2Zmc2V0WCwgb2Zmc2V0WTtcblxuICAgICAgICBtZS5vd25lci5nZXREb21SZWN0KFttZS5nZXREcmFnRWxlbWVudFJvb3QoKS5pZCwgZGF0YS5wYXRoWzFdLmlkXSkudGhlbihyZWN0cyA9PiB7XG4gICAgICAgICAgICBldmVudER1cmF0aW9uID0gKG1lLmV2ZW50UmVjb3JkLmVuZERhdGUgLSBtZS5ldmVudFJlY29yZC5zdGFydERhdGUpIC8gNjAgLyAxMDAwO1xuICAgICAgICAgICAgb2Zmc2V0WCAgICAgICA9IGRhdGEuY2xpZW50WCAtIHJlY3RzWzBdLmxlZnQ7XG4gICAgICAgICAgICBvZmZzZXRZICAgICAgID0gZGF0YS5jbGllbnRZIC0gcmVjdHNbMF0udG9wO1xuXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKG1lLCB7XG4gICAgICAgICAgICAgICAgY29sdW1uSGVpZ2h0ICAgOiByZWN0c1sxXS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgY29sdW1uVG9wICAgICAgOiByZWN0c1sxXS50b3AsXG4gICAgICAgICAgICAgICAgZHJhZ0VsZW1lbnRSZWN0OiByZWN0c1swXSxcbiAgICAgICAgICAgICAgICBldmVudER1cmF0aW9uICA6IE1hdGgucm91bmQoZXZlbnREdXJhdGlvbiAvIG1lLmludGVydmFsU2l6ZSkgKiBtZS5pbnRlcnZhbFNpemUsXG4gICAgICAgICAgICAgICAgb2Zmc2V0WCxcbiAgICAgICAgICAgICAgICBvZmZzZXRZXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbWUuY3JlYXRlRHJhZ1Byb3h5KHJlY3RzWzBdKTtcblxuICAgICAgICAgICAgbWUuZmlyZSgnZHJhZ1N0YXJ0Jywge1xuICAgICAgICAgICAgICAgIGRyYWdFbGVtZW50UmVjdDogcmVjdHNbMF0sXG4gICAgICAgICAgICAgICAgaWQgICAgICAgICAgICAgOiBtZS5pZCxcbiAgICAgICAgICAgICAgICBvZmZzZXRYLFxuICAgICAgICAgICAgICAgIG9mZnNldFlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBtZS5kcmFnTW92ZShkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICByZW1vdmVCb2R5Q3Vyc29yQ2xzKCkge1xuICAgICAgICBOZW8uYXBwbHlEZWx0YXModGhpcy5hcHBOYW1lLCB7aWQ6ICdkb2N1bWVudC5ib2R5JywgY2xzOiB7cmVtb3ZlOiBbJ25lby1jdXJzb3ItbW92ZSddfX0pO1xuICAgIH1cbn1cblxuTmVvLmFwcGx5Q2xhc3NDb25maWcoRXZlbnREcmFnWm9uZSk7XG5cbmV4cG9ydCB7RXZlbnREcmFnWm9uZSBhcyBkZWZhdWx0fTtcbiIsImltcG9ydCBCYXNlICAgICAgICAgIGZyb20gJy4uLy4uLy4uLy4uL3BsdWdpbi9CYXNlLm1qcyc7XG5pbXBvcnQgRGF0ZVV0aWwgICAgICBmcm9tICcuLi8uLi8uLi8uLi91dGlsL0RhdGUubWpzJztcbmltcG9ydCBFdmVudERyYWdab25lIGZyb20gJy4uL0V2ZW50RHJhZ1pvbmUubWpzJztcbmltcG9ydCBWRG9tVXRpbCAgICAgIGZyb20gJy4uLy4uLy4uLy4uL3V0aWwvVkRvbS5tanMnO1xuXG4vKipcbiAqIEBjbGFzcyBOZW8uY2FsZW5kYXIudmlldy53ZWVrLnBsdWdpbi5EcmFnRHJvcFxuICogQGV4dGVuZHMgTmVvLnBsdWdpbi5CYXNlXG4gKi9cbmNsYXNzIERyYWdEcm9wIGV4dGVuZHMgQmFzZSB7XG4gICAgc3RhdGljIGdldENvbmZpZygpIHtyZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5jYWxlbmRhci52aWV3LndlZWsucGx1Z2luLkRyYWdEcm9wJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8uY2FsZW5kYXIudmlldy53ZWVrLnBsdWdpbi5EcmFnRHJvcCcsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBpc0RyYWdnaW5nPWZhbHNlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGlzRHJhZ2dpbmc6IGZhbHNlXG4gICAgfX1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3QoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyLmNvbnN0cnVjdChjb25maWcpO1xuXG4gICAgICAgIGxldCBtZSAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgY29sdW1uT3B0cyAgID0ge3Njb3BlOiBtZSwgZGVsZWdhdGU6ICcubmVvLWMtdy1jb2x1bW4nfSxcbiAgICAgICAgICAgIGV2ZW50T3B0cyAgICA9IHtzY29wZTogbWUsIGRlbGVnYXRlOiAnLm5lby1ldmVudCd9LFxuICAgICAgICAgICAgb3duZXIgICAgICAgID0gbWUub3duZXIsXG4gICAgICAgICAgICBkb21MaXN0ZW5lcnMgPSBvd25lci5kb21MaXN0ZW5lcnM7XG5cbiAgICAgICAgZG9tTGlzdGVuZXJzLnB1c2goXG4gICAgICAgICAgICB7J2RyYWc6ZW5kJyAgOiBtZS5vbkNvbHVtbkRyYWdFbmQsICAgLi4uY29sdW1uT3B0c30sXG4gICAgICAgICAgICB7J2RyYWc6ZW5kJyAgOiBtZS5vbkV2ZW50RHJhZ0VuZCwgICAgLi4uZXZlbnRPcHRzfSxcbiAgICAgICAgICAgIHsnZHJhZzptb3ZlJyA6IG1lLm9uQ29sdW1uRHJhZ01vdmUsICAuLi5jb2x1bW5PcHRzfSxcbiAgICAgICAgICAgIHsnZHJhZzptb3ZlJyA6IG1lLm9uRXZlbnREcmFnTW92ZSwgICAuLi5ldmVudE9wdHN9LFxuICAgICAgICAgICAgeydkcmFnOnN0YXJ0JzogbWUub25Db2x1bW5EcmFnU3RhcnQsIC4uLmNvbHVtbk9wdHN9LFxuICAgICAgICAgICAgeydkcmFnOnN0YXJ0JzogbWUub25FdmVudERyYWdTdGFydCwgIC4uLmV2ZW50T3B0c31cbiAgICAgICAgKTtcblxuICAgICAgICBvd25lci5kb21MaXN0ZW5lcnMgPSBkb21MaXN0ZW5lcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRqdXN0cyBkcmFnIGV2ZW50cyB3aGljaCBzdGFydCBvbiBhbiBldmVudCByZXNpemUgaGFuZGxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqL1xuICAgIGFkanVzdFJlc2l6ZUV2ZW50KGRhdGEpIHtcbiAgICAgICAgZGF0YS5wYXRoLnNoaWZ0KCk7XG4gICAgICAgIGRhdGEudGFyZ2V0UGF0aC5zaGlmdCgpO1xuICAgICAgICBkYXRhLnRhcmdldCA9IGRhdGEucGF0aFswXTtcblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzLmRyYWdFbGVtZW50XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvcHRzLmVuYWJsZVJlc2l6aW5nQWNyb3NzT3Bwb3NpdGVFZGdlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMuZXZlbnRSZWNvcmRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5wcm94eVBhcmVudElkXG4gICAgICogQHJldHVybnMge05lby5jYWxlbmRhci52aWV3LndlZWsuRXZlbnREcmFnWm9uZX1cbiAgICAgKi9cbiAgICBnZXRFdmVudERyYWdab25lKG9wdHMpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgb3duZXIgICAgICAgICA9IG1lLm93bmVyLFxuICAgICAgICAgICAgZXZlbnREcmFnWm9uZSA9IG93bmVyLmV2ZW50RHJhZ1pvbmUsXG4gICAgICAgICAgICB0aW1lQXhpcyAgICAgID0gb3duZXIudGltZUF4aXMsXG5cbiAgICAgICAgICAgIGNvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICBheGlzRW5kVGltZSAgICAgICAgICAgICAgICAgICAgIDogdGltZUF4aXMuZ2V0VGltZShvd25lci5lbmRUaW1lKSxcbiAgICAgICAgICAgICAgICBheGlzU3RhcnRUaW1lICAgICAgICAgICAgICAgICAgIDogdGltZUF4aXMuZ2V0VGltZShvd25lci5zdGFydFRpbWUpLFxuICAgICAgICAgICAgICAgIGRyYWdFbGVtZW50ICAgICAgICAgICAgICAgICAgICAgOiBvcHRzLmRyYWdFbGVtZW50LFxuICAgICAgICAgICAgICAgIGVuYWJsZVJlc2l6aW5nQWNyb3NzT3Bwb3NpdGVFZGdlOiBvcHRzLmVuYWJsZVJlc2l6aW5nQWNyb3NzT3Bwb3NpdGVFZGdlLFxuICAgICAgICAgICAgICAgIGV2ZW50UmVjb3JkICAgICAgICAgICAgICAgICAgICAgOiBvcHRzLmV2ZW50UmVjb3JkLFxuICAgICAgICAgICAgICAgIHByb3h5UGFyZW50SWQgICAgICAgICAgICAgICAgICAgOiBvcHRzLnByb3h5UGFyZW50SWRcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFldmVudERyYWdab25lKSB7XG4gICAgICAgICAgICBvd25lci5ldmVudERyYWdab25lID0gZXZlbnREcmFnWm9uZSA9IE5lby5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIG1vZHVsZSAgICAgICAgICAgOiBFdmVudERyYWdab25lLFxuICAgICAgICAgICAgICAgIGFwcE5hbWUgICAgICAgICAgOiBtZS5hcHBOYW1lLFxuICAgICAgICAgICAgICAgIG93bmVyICAgICAgICAgICAgOiBvd25lcixcbiAgICAgICAgICAgICAgICBzY3JvbGxDb250YWluZXJJZDogb3duZXIuZ2V0U2Nyb2xsQ29udGFpbmVyKCkuaWQsXG4gICAgICAgICAgICAgICAgLi4uY29uZmlnLFxuXG4gICAgICAgICAgICAgICAgZHJhZ1Byb3h5Q29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWxsQ2hhbmdlOiAnaGVpZ2h0J1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBldmVudERyYWdab25lLnNldChjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV2ZW50RHJhZ1pvbmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBhdGhcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpc1RvcExldmVsQ29sdW1uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHBhdGhbMF0uY2xzLmluY2x1ZGVzKCduZW8tYy13LWNvbHVtbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudERhdGFcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpc1RvcExldmVsRXZlbnQoZXZlbnREYXRhKSB7XG4gICAgICAgIHJldHVybiBldmVudERhdGEucGF0aFswXS5jbHMuaW5jbHVkZXMoJ25lby1ldmVudCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgb25Db2x1bW5EcmFnRW5kKGRhdGEpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBvd25lciAgICAgICAgPSBtZS5vd25lcixcbiAgICAgICAgICAgIHJlY29yZFN5bWJvbCA9IFN5bWJvbC5mb3IoJ2FkZGVkUmVjb3JkJyksXG4gICAgICAgICAgICByZWNvcmQgICAgICAgPSBtZVtyZWNvcmRTeW1ib2xdO1xuXG4gICAgICAgIGlmIChyZWNvcmQgJiYgbWUuaXNUb3BMZXZlbENvbHVtbihkYXRhLnBhdGgpKSB7XG4gICAgICAgICAgICBtZS5pc0RyYWdnaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGRlbGV0ZSBtZVtyZWNvcmRTeW1ib2xdO1xuXG4gICAgICAgICAgICBOZW8uYXBwbHlEZWx0YXMobWUuYXBwTmFtZSwge1xuICAgICAgICAgICAgICAgIGlkICAgOiBvd25lci5nZXRFdmVudElkKHJlY29yZC5pZCksXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtvcGFjaXR5OiAxfVxuICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgb3duZXIuZXZlbnREcmFnWm9uZS5kcmFnRW5kKCk7XG4gICAgICAgICAgICAgICAgb3duZXIuZ2V0UGx1Z2luKHtmbGFnOidyZXNpemFibGUnfSkub25EcmFnRW5kKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIG9uQ29sdW1uRHJhZ01vdmUoZGF0YSkge1xuICAgICAgICBpZiAodGhpcy5pc1RvcExldmVsQ29sdW1uKGRhdGEucGF0aCkpIHtcbiAgICAgICAgICAgIHRoaXMub3duZXIuZXZlbnREcmFnWm9uZT8uZHJhZ01vdmUoZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqL1xuICAgIG9uQ29sdW1uRHJhZ1N0YXJ0KGRhdGEpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBpZiAobWUuaXNUb3BMZXZlbENvbHVtbihkYXRhLnRhcmdldFBhdGgpKSB7XG4gICAgICAgICAgICBsZXQgb3duZXIgICAgICAgICAgID0gbWUub3duZXIsXG4gICAgICAgICAgICAgICAgYXhpc1N0YXJ0VGltZSAgID0gb3duZXIudGltZUF4aXMuZ2V0VGltZShvd25lci5zdGFydFRpbWUpLFxuICAgICAgICAgICAgICAgIGNhbGVuZGFyU3RvcmUgICA9IG93bmVyLmNhbGVuZGFyU3RvcmUsXG4gICAgICAgICAgICAgICAgY29sdW1uUmVjdCAgICAgID0gZGF0YS5wYXRoWzBdLnJlY3QsXG4gICAgICAgICAgICAgICAgaW50ZXJ2YWxTaXplICAgID0gMTUsXG4gICAgICAgICAgICAgICAgaW50ZXJ2YWxzICAgICAgID0gKG93bmVyLnRpbWVBeGlzLmdldFRpbWUob3duZXIuZW5kVGltZSkgLSBheGlzU3RhcnRUaW1lKSAqIDYwIC8gaW50ZXJ2YWxTaXplLFxuICAgICAgICAgICAgICAgIGludGVydmFsSGVpZ2h0ICA9IGNvbHVtblJlY3QuaGVpZ2h0IC8gaW50ZXJ2YWxzLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uICAgICAgICA9IE1hdGgubWluKGNvbHVtblJlY3QuaGVpZ2h0LCBkYXRhLmNsaWVudFkgLSBjb2x1bW5SZWN0LnRvcCksXG4gICAgICAgICAgICAgICAgY3VycmVudEludGVydmFsID0gTWF0aC5mbG9vcihwb3NpdGlvbiAvIGludGVydmFsSGVpZ2h0KSxcbiAgICAgICAgICAgICAgICBzdGFydERhdGUgICAgICAgPSBuZXcgRGF0ZShWRG9tVXRpbC5maW5kVmRvbUNoaWxkKG93bmVyLnZkb20sIGRhdGEucGF0aFswXS5pZCkudmRvbS5mbGFnICsgJ1QwMDowMDowMCcpLFxuICAgICAgICAgICAgICAgIGRyYWdFbGVtZW50LCBlbmREYXRlLCBldmVudERyYWdab25lLCBldmVudElkLCByZWNvcmQ7XG5cbiAgICAgICAgICAgIG1lLmlzRHJhZ2dpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICBzdGFydERhdGUuc2V0SG91cnMoYXhpc1N0YXJ0VGltZSk7XG4gICAgICAgICAgICBzdGFydERhdGUuc2V0TWludXRlcyhNYXRoLm1pbihjdXJyZW50SW50ZXJ2YWwgKiBpbnRlcnZhbFNpemUsIGludGVydmFscyAqIGludGVydmFsU2l6ZSAtIG93bmVyLm1pbmltdW1FdmVudER1cmF0aW9uKSk7XG5cbiAgICAgICAgICAgIGVuZERhdGUgPSBEYXRlVXRpbC5jbG9uZShzdGFydERhdGUpO1xuXG4gICAgICAgICAgICBlbmREYXRlLnNldE1pbnV0ZXMoZW5kRGF0ZS5nZXRNaW51dGVzKCkgKyBvd25lci5taW5pbXVtRXZlbnREdXJhdGlvbik7XG5cbiAgICAgICAgICAgIC8vIDI0OjAwIGZpeFxuICAgICAgICAgICAgZW5kRGF0ZS5nZXRIb3VycygpID09PSAwICYmIGVuZERhdGUuZ2V0TWludXRlcygpID09PSAwICYmIGVuZERhdGUuc2V0TWludXRlcyhlbmREYXRlLmdldE1pbnV0ZXMoKSAtIDEpO1xuXG4gICAgICAgICAgICByZWNvcmQgPSBvd25lci5ldmVudFN0b3JlLmFkZCh7XG4gICAgICAgICAgICAgICAgY2FsZW5kYXJJZDogb3duZXIuZGF0YS5hY3RpdmVDYWxlbmRhcklkIHx8IGNhbGVuZGFyU3RvcmUuZ2V0QXQoMClbY2FsZW5kYXJTdG9yZS5rZXlQcm9wZXJ0eV0sXG4gICAgICAgICAgICAgICAgZW5kRGF0ZSxcbiAgICAgICAgICAgICAgICBzdGFydERhdGUsXG4gICAgICAgICAgICAgICAgdGl0bGUgICAgIDogJ05ldyBFdmVudCdcbiAgICAgICAgICAgIH0pWzBdO1xuXG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGNhY2hlIGEgcmVmZXJlbmNlIHRvIG1ha2UgdGhlIHJlY29yZCBhY2Nlc3NpYmxlIGZvciBvbkNvbHVtbkRyYWdFbmQoKVxuICAgICAgICAgICAgbWVbU3ltYm9sLmZvcignYWRkZWRSZWNvcmQnKV0gPSByZWNvcmQ7XG5cbiAgICAgICAgICAgIC8vIHdhaXQgdW50aWwgdGhlIG5ldyBldmVudCBnb3QgbW91bnRlZFxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgZXZlbnRJZCAgICAgPSBvd25lci5nZXRFdmVudElkKHJlY29yZC5pZCk7XG4gICAgICAgICAgICAgICAgZHJhZ0VsZW1lbnQgPSBWRG9tVXRpbC5maW5kVmRvbUNoaWxkKG93bmVyLnZkb20sIGV2ZW50SWQpLnZkb207XG5cbiAgICAgICAgICAgICAgICBldmVudERyYWdab25lID0gbWUuZ2V0RXZlbnREcmFnWm9uZSh7XG4gICAgICAgICAgICAgICAgICAgIGRyYWdFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBlbmFibGVSZXNpemluZ0Fjcm9zc09wcG9zaXRlRWRnZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRSZWNvcmQgICAgICAgICAgICAgICAgICAgICA6IHJlY29yZCxcbiAgICAgICAgICAgICAgICAgICAgcHJveHlQYXJlbnRJZCAgICAgICAgICAgICAgICAgICA6IGRhdGEucGF0aFswXS5pZFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgb3duZXIuZ2V0UGx1Z2luKHtmbGFnOidyZXNpemFibGUnfSkub25EcmFnU3RhcnQoZGF0YSk7XG4gICAgICAgICAgICAgICAgZXZlbnREcmFnWm9uZS5kcmFnU3RhcnQoZGF0YSk7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbWUuaXNEcmFnZ2luZyAmJiBOZW8uYXBwbHlEZWx0YXMobWUuYXBwTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQgICA6IGV2ZW50SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge29wYWNpdHk6IDB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgb25FdmVudERyYWdFbmQoZGF0YSkge1xuICAgICAgICBsZXQgbWUgICAgPSB0aGlzLFxuICAgICAgICAgICAgb3duZXIgPSBtZS5vd25lcjtcblxuICAgICAgICBpZiAob3duZXIuZW5hYmxlRHJhZykge1xuICAgICAgICAgICAgb3duZXIuZXZlbnREcmFnWm9uZS5kcmFnRW5kKCk7XG5cbiAgICAgICAgICAgIGlmICghbWUuaXNUb3BMZXZlbEV2ZW50KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IG1lLmFkanVzdFJlc2l6ZUV2ZW50KGRhdGEpO1xuICAgICAgICAgICAgICAgIG93bmVyLmdldFBsdWdpbih7ZmxhZzoncmVzaXphYmxlJ30pLm9uRHJhZ0VuZChkYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3duZXIuZXZlbnREcmFnWm9uZS5yZW1vdmVCb2R5Q3Vyc29yQ2xzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1lLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgb25FdmVudERyYWdNb3ZlKGRhdGEpIHtcbiAgICAgICAgbGV0IG1lICAgID0gdGhpcyxcbiAgICAgICAgICAgIG93bmVyID0gbWUub3duZXI7XG5cbiAgICAgICAgaWYgKG93bmVyLmVuYWJsZURyYWcpIHtcbiAgICAgICAgICAgIGlmICghbWUuaXNUb3BMZXZlbEV2ZW50KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IG1lLmFkanVzdFJlc2l6ZUV2ZW50KGRhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvd25lci5ldmVudERyYWdab25lLmRyYWdNb3ZlKGRhdGEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBvbkV2ZW50RHJhZ1N0YXJ0KGRhdGEpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBvd25lciAgICAgPSBtZS5vd25lcixcbiAgICAgICAgICAgIG1vZGVsRGF0YSA9IG93bmVyLmRhdGE7XG5cbiAgICAgICAgaWYgKG93bmVyLmVuYWJsZURyYWcpIHtcbiAgICAgICAgICAgIGxldCBpc1RvcExldmVsRXZlbnQgPSBtZS5pc1RvcExldmVsRXZlbnQoZGF0YSksXG4gICAgICAgICAgICAgICAgZHJhZ0VsZW1lbnQsIGV2ZW50RHJhZ1pvbmU7XG5cbiAgICAgICAgICAgIGlmICghaXNUb3BMZXZlbEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IG1lLmFkanVzdFJlc2l6ZUV2ZW50KGRhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtZS5pc0RyYWdnaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgZHJhZ0VsZW1lbnQgPSBWRG9tVXRpbC5maW5kVmRvbUNoaWxkKG93bmVyLnZkb20sIGRhdGEucGF0aFswXS5pZCkudmRvbTtcblxuICAgICAgICAgICAgZXZlbnREcmFnWm9uZSA9IG1lLmdldEV2ZW50RHJhZ1pvbmUoe1xuICAgICAgICAgICAgICAgIGRyYWdFbGVtZW50LFxuICAgICAgICAgICAgICAgIGVuYWJsZVJlc2l6aW5nQWNyb3NzT3Bwb3NpdGVFZGdlOiBtb2RlbERhdGEuZXZlbnRzLmVuYWJsZVJlc2l6aW5nQWNyb3NzT3Bwb3NpdGVFZGdlLFxuICAgICAgICAgICAgICAgIGV2ZW50UmVjb3JkICAgICAgICAgICAgICAgICAgICAgOiBvd25lci5ldmVudFN0b3JlLmdldChkcmFnRWxlbWVudC5mbGFnKSxcbiAgICAgICAgICAgICAgICBwcm94eVBhcmVudElkICAgICAgICAgICAgICAgICAgIDogZGF0YS5wYXRoWzFdLmlkXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGlzVG9wTGV2ZWxFdmVudCkge1xuICAgICAgICAgICAgICAgIGV2ZW50RHJhZ1pvbmUuYWRkQm9keUN1cnNvckNscygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvd25lci5nZXRQbHVnaW4oe2ZsYWc6J3Jlc2l6YWJsZSd9KS5vbkRyYWdTdGFydChkYXRhKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZXZlbnREcmFnWm9uZS5kcmFnU3RhcnQoZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbk5lby5hcHBseUNsYXNzQ29uZmlnKERyYWdEcm9wKTtcblxuZXhwb3J0IHtEcmFnRHJvcCBhcyBkZWZhdWx0fTtcbiIsImltcG9ydCBDb3JlQmFzZSBmcm9tICcuLi9jb3JlL0Jhc2UubWpzJztcblxuLyoqXG4gKiBQbHVnaW5zIGFyZSBpbnRlbmRlZCB0byBnZXQgcHV0IGludG8gdGhlIHBsdWdpbnMgY29uZmlnIG9mIGNvbXBvbmVudC5CYXNlXG4gKiB0byBlbmhhbmNlIHRoZW0gb3IgYWRkIGFkZGl0aW9uYWwgZmVhdHVyZXNcbiAqIEBjbGFzcyBOZW8ucGx1Z2luLkJhc2VcbiAqIEBleHRlbmRzIE5lby5jb3JlLkJhc2VcbiAqL1xuY2xhc3MgQmFzZSBleHRlbmRzIENvcmVCYXNlIHtcbiAgICBzdGF0aWMgZ2V0Q29uZmlnKCkge3JldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLnBsdWdpbi5CYXNlJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8ucGx1Z2luLkJhc2UnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBudHlwZT0ncGx1Z2luJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBudHlwZTogJ3BsdWdpbicsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOZW8uY29tcG9uZW50LkJhc2V9IG93bmVyPW51bGxcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgb3duZXI6IG51bGxcbiAgICB9fVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdChjb25maWcpIHtcbiAgICAgICAgc3VwZXIuY29uc3RydWN0KGNvbmZpZyk7XG5cbiAgICAgICAgbGV0IG1lID0gdGhpcztcblxuICAgICAgICBtZS5vd25lci5vbignbW91bnRlZCcsIG1lLm9uT3duZXJNb3VudGVkLCBtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gYXBwbHkgY2hhbmdlcyB0byB0aGUgb3duZXIgQ29tcG9uZW50IHdoZW4gaXQgZG9lcyBnZXQgbW91bnRlZFxuICAgICAqL1xuICAgIG9uT3duZXJNb3VudGVkKCkge1xuXG4gICAgfVxufVxuXG5OZW8uYXBwbHlDbGFzc0NvbmZpZyhCYXNlKTtcblxuZXhwb3J0IHtCYXNlIGFzIGRlZmF1bHR9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9