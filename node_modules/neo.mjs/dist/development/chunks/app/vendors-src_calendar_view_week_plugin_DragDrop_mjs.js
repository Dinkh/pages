"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["vendors-src_calendar_view_week_plugin_DragDrop_mjs"],{

/***/ "./src/calendar/view/week/EventDragZone.mjs":
/*!**************************************************!*\
  !*** ./src/calendar/view/week/EventDragZone.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EventDragZone)
/* harmony export */ });
/* harmony import */ var _util_Date_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../util/Date.mjs */ "./src/util/Date.mjs");
/* harmony import */ var _draggable_DragProxyComponent_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../draggable/DragProxyComponent.mjs */ "./src/draggable/DragProxyComponent.mjs");
/* harmony import */ var _draggable_DragZone_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../draggable/DragZone.mjs */ "./src/draggable/DragZone.mjs");
/* harmony import */ var _util_Array_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../util/Array.mjs */ "./src/util/Array.mjs");
/* harmony import */ var _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../util/VDom.mjs */ "./src/util/VDom.mjs");






/**
 * @class Neo.calendar.view.week.EventDragZone
 * @extends Neo.draggable.DragZone
 */
class EventDragZone extends _draggable_DragZone_mjs__WEBPACK_IMPORTED_MODULE_2__.default {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.calendar.view.week.EventDragZone'
         * @protected
         */
        className: 'Neo.calendar.view.week.EventDragZone',
        /**
         * @member {Boolean} addDragProxyCls=false
         */
        addDragProxyCls: false,
        /**
         * @member {Boolean} enableResizingAcrossOppositeEdge=true
         */
        enableResizingAcrossOppositeEdge: true,
        /**
         * @member {Number} axisEndTime=0
         */
        axisEndTime: 0,
        /**
         * @member {Number} axisStartTime=0
         */
        axisStartTime: 0,
        /**
         * @member {Number} columnHeight=0
         */
        columnHeight: 0,
        /**
         * @member {Number} columnTop=0
         */
        columnTop: 0,
        /**
         * @member {Number} currentInterval=0
         */
        currentInterval: 0,
        /**
         * time in minutes
         * @member {Number} eventDuration=0
         */
        eventDuration: 0,
        /**
         * @member {Object} eventRecord=null
         */
        eventRecord: null,
        /**
         * Internal flag.
         * If we resize across the opposite edge and then back, we need to update the related edge position once.
         * @member {Boolean} forceUpdate=false
         * @protected
         */
        forceUpdate: false,
        /**
         * Internal flag
         * @member {Boolean} hasOverflow=false
         * @protected
         */
        hasOverflow: false,
        /**
         * time in minutes
         * @member {Number} intervalSize=15
         */
        intervalSize: 15,
        /**
         * @member {Boolean} keepEndDate=false
         */
        keepEndDate: false,
        /**
         * @member {Boolean} keepStartDate=false
         */
        keepStartDate: false,
        /**
         * @member {Boolean} moveHorizontal=false
         */
        moveHorizontal: false,
        /**
         * @member {Boolean} moveInMainThread=false
         */
        moveInMainThread: false,
        /**
         * Internal flag.
         * @member {Date} newEndDate=null
         * @protected
         */
        newEndDate: null,
        /**
         * Internal flag.
         * @member {Date} newStartDate=null
         * @protected
         */
        newStartDate: null,
        /**
         * @member {Number} scrollFactorLeft=3
         */
        scrollFactorLeft: 3,
        /**
         * @member {Boolean} useProxyWrapper=false
         */
        useProxyWrapper: false
    }}

    /**
     *
     */
    addBodyCursorCls() {
        Neo.applyDeltas(this.appName, {id: 'document.body', cls: {add: ['neo-cursor-move']}});
    }

    /**
     * Resolves the 24:00 issue, where an event would end on the next day
     * @param {Date} date
     * @returns {Date}
     */
    adjustEndDate(date) {
        if (date.getHours() === 0 && date.getMinutes() === 0) {
            // if an event ends at 24:00, change it to 23:59 => otherwise the day increases by 1
            date.setMinutes(date.getMinutes() - 1);
        } else if (!(date.getHours() === 23 && date.getMinutes() === 59) && date.getMinutes() % this.intervalSize !== 0) {
            // otherwise switch non interval based values back
            date.setMinutes(date.getMinutes() + 1);
        }

        return date;
    }

    /**
     * Triggered after the proxyParentId config got changed
     * @param {String} value
     * @param {String} oldValue
     * @protected
     */
    afterSetProxyParentId(value, oldValue) {
        if (value && oldValue !== undefined) {
            let me = this;

            // check if the node did not get removed yet
            if (me.dragProxy?.vdom.cn[0].id) {
                Neo.applyDeltas(me.appName, {
                    action  : 'moveNode',
                    id      : me.dragProxy.id,
                    index   : 0,
                    parentId: value
                });
            }
        }
    }

    /**
     *
     * @param {Object} data
     */
    createDragProxy(data) {
        let me        = this,
            component = Neo.getComponent(me.getDragElementRoot().id) || me.owner,
            vdom      = me.dragProxyConfig?.vdom,
            clone     = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_4__.default.clone(vdom ? vdom : me.dragElement);

            clone.cn[2].removeDom = false;

        const config = {
            module          : _draggable_DragProxyComponent_mjs__WEBPACK_IMPORTED_MODULE_1__.default,
            appName         : me.appName,
            moveInMainThread: me.moveInMainThread,
            parentId        : me.proxyParentId,

            ...me.dragProxyConfig,

            vdom: me.useProxyWrapper ? {cn: [clone]} : clone // we want to override dragProxyConfig.vdom if needed
        };

        config.cls = config.cls || [];

        config.cls.push('neo-focus');

        if (component) {
            config.cls.push(component.getTheme());
        }

        if (clone.cls && !me.useProxyWrapper) {
            config.cls.push(...clone.cls);
        }

        if (me.addDragProxyCls) {
            _util_Array_mjs__WEBPACK_IMPORTED_MODULE_3__.default.add(config.cls, me.dragProxyCls);
        }

        Object.assign(config.style, {
            height: `${data.height}px`,
            top   : `${data.y - me.columnTop}px`,
            width : `${data.width}px`
        });

        me.dragProxy = Neo.create(config);
    }

    /**
     * DragEnd equals drop, since we can only drag to valid positions
     * todo: ESC key
     * @param {Object} data
     */
    dragEnd(data) {
        super.dragEnd(data);

        let me     = this,
            owner  = me.owner,
            record = me.eventRecord,
            endDate, startDate;

        if (me.keepStartDate) {
            endDate   = me.newEndDate;
            startDate = me.newStartDate || record.startDate;
        } else {
            startDate = new Date(_util_VDom_mjs__WEBPACK_IMPORTED_MODULE_4__.default.findVdomChild(owner.vdom, me.proxyParentId).vdom.flag + 'T00:00:00');
            startDate.setHours(me.axisStartTime);
            startDate.setMinutes(me.currentInterval * me.intervalSize);

            if (me.keepEndDate) {
                endDate   = me.newEndDate   || record.endDate;
                startDate = me.newStartDate || startDate;
            } else {
                endDate = _util_Date_mjs__WEBPACK_IMPORTED_MODULE_0__.default.clone(startDate);
                endDate.setMinutes(endDate.getMinutes() + me.eventDuration);
            }
        }

        endDate = me.adjustEndDate(endDate);

        record.setSilent({
            endDate,
            startDate
        });

        Object.assign(me, {
            currentInterval: 0,
            hasOverflow    : false,
            keepEndDate    : false,
            keepStartDate  : false,
            newEndDate     : null,
            newStartDate   : null,
            proxyParentId  : null
        });

        // todo: updating a record field which is included inside a sorter should trigger collection.doSort()
        // see: https://github.com/neomjs/neo/issues/2392

        owner.getModel().getStore('events').doSort();
        owner.updateEvents();
    }

    /**
     *
     * @param {Object} data
     */
    dragMove(data) {
        let me              = this,
            axisEndTime     = me.axisEndTime,
            axisStartTime   = me.axisStartTime,
            columnHeight    = me.columnHeight,
            eventDuration   = me.eventDuration,
            i               = 0,
            intervalSize    = me.intervalSize,
            keepEndDate     = me.keepEndDate,
            keepStartDate   = me.keepStartDate,
            path            = data.targetPath,
            len             = path.length,
            owner           = me.owner,
            record          = me.eventRecord,
            switchDirection = false,
            timeAxis        = owner.timeAxis,
            axisStartDate, currentInterval, deltas, duration, endDate, eventIntervals, height, intervalHeight,
            intervals, limitInterval, minimumEventIntervals, position, startDate, startInterval;

        if (me.dragProxy) {
            if (!keepEndDate && !keepStartDate) {
                for (; i < len; i++) {
                    if (path[i].cls.includes('neo-c-w-column')) {
                        me.proxyParentId = path[i].id;
                        break;
                    }
                }
            }

            intervals      = (axisEndTime - axisStartTime) * 60 / intervalSize; // 15 minutes each
            intervalHeight = columnHeight / intervals;

            position = Math.min(columnHeight, data.clientY - me.offsetY - me.columnTop);

            currentInterval = Math.floor(position / intervalHeight);

            endDate   = _util_Date_mjs__WEBPACK_IMPORTED_MODULE_0__.default.clone(record.endDate);
            startDate = _util_Date_mjs__WEBPACK_IMPORTED_MODULE_0__.default.clone(record.startDate);

            // events can have a smaller start time than the axis min value.
            // resizing via the north handle needs to adjust the duration to honor this.
            if (keepEndDate) {
                if (axisStartTime > startDate.getHours()) {
                    startDate.setHours(axisStartTime);
                    startDate.setMinutes(0);

                    eventDuration = (endDate - startDate) / 60 / 1000; // duration in minutes
                }
            }

            // events can have a bigger end time than the axis max value.
            // resizing via the south handle needs to adjust the duration to honor this.
            if (keepStartDate) {
                if (axisEndTime < endDate.getHours()) {
                    endDate.setHours(axisEndTime);
                    endDate.setMinutes(0);

                    eventDuration = (endDate - startDate) / 60 / 1000; // duration in minutes
                }
            }

            if (!keepEndDate) {
                // events must not end after the last visible interval
                currentInterval = Math.min(currentInterval, intervals - (eventDuration / intervalSize));
            }

            deltas = [{
                id   : me.dragProxy.id,
                style: {}
            }];

            if (keepEndDate || keepStartDate) {
                axisStartDate = _util_Date_mjs__WEBPACK_IMPORTED_MODULE_0__.default.clone(record.startDate);
                axisStartDate.setHours(axisStartTime);
                axisStartDate.setMinutes(0);

                minimumEventIntervals = owner.minimumEventDuration / intervalSize;
                startInterval         = (record.startDate - axisStartDate) / intervalSize / 60 / 1000;

                if (keepEndDate) {
                    limitInterval = startInterval + (eventDuration / intervalSize);

                    if (me.enableResizingAcrossOppositeEdge) {
                        if (me.forceUpdate && currentInterval > limitInterval -minimumEventIntervals && currentInterval < limitInterval + minimumEventIntervals) {
                            // when we resize back to the original direction, keep the min interval until we snap back
                            return;
                        } else if (currentInterval >= limitInterval + minimumEventIntervals) {
                            switchDirection = true;
                            me.forceUpdate  = true;

                            endDate.setHours(axisStartTime);
                            endDate.setMinutes(currentInterval * intervalSize);
                            endDate = me.adjustEndDate(endDate);

                            me.newEndDate = endDate;

                            startDate.setHours(axisStartTime);
                            startDate.setMinutes(limitInterval * intervalSize);

                            me.newStartDate = startDate;

                            duration = (endDate - startDate) / 60 / 60 / 1000; // duration in hours
                            deltas[0].style.top = `calc(${limitInterval * intervalHeight / columnHeight * 100}% + 1px)`;
                        } else {
                            me.forceUpdate  = false;
                            me.newStartDate = null;
                        }
                    }

                    if (!switchDirection) {
                        currentInterval = Math.min(currentInterval, limitInterval - minimumEventIntervals);
                    }

                } else if (keepStartDate) {
                    limitInterval = startInterval - (eventDuration / intervalSize);

                    if (me.enableResizingAcrossOppositeEdge) {
                        // events must not start before the first visible interval
                        currentInterval = Math.max(-(eventDuration / intervalSize), currentInterval);

                        if (currentInterval <= limitInterval - minimumEventIntervals) {
                            switchDirection = true;
                            me.forceUpdate  = true;

                            endDate.setHours(axisStartTime);
                            endDate.setMinutes(eventDuration + limitInterval * intervalSize);
                            endDate = me.adjustEndDate(endDate);

                            me.newEndDate = endDate;

                            startDate.setHours(axisStartTime);
                            startDate.setMinutes(eventDuration + currentInterval * intervalSize);

                            me.newStartDate = startDate;

                            duration = (endDate - startDate) / 60 / 60 / 1000; // duration in hours

                            position = (eventDuration / intervalSize + currentInterval) * intervalHeight; // snap to valid intervals
                            position = position / columnHeight * 100;

                            deltas[0].style.top = `calc(${position}% + 1px)`;
                        } else if (me.forceUpdate && currentInterval < limitInterval + minimumEventIntervals) {
                            // when we resize back to the original direction, keep the min interval until we snap back
                            return;
                        } else if (me.forceUpdate && currentInterval >= limitInterval + minimumEventIntervals) {
                            if (me.currentInterval !== currentInterval) {
                                me.forceUpdate  = false;
                                me.newStartDate = null;
                                deltas[0].style.top = `calc(${startInterval * intervalHeight / columnHeight * 100}% + 1px)`;
                            }
                        }
                    }

                    if (!switchDirection) {
                        currentInterval = Math.max(currentInterval, limitInterval + minimumEventIntervals);
                    }
                }
            }

            if (!keepStartDate) {
                // events must not start before the first visible interval
                currentInterval = Math.max(0, currentInterval);
            }

            if (me.currentInterval !== currentInterval) {
                if (!switchDirection) {
                    if (!keepEndDate) {
                        endDate.setHours(axisStartTime);
                        endDate.setMinutes(eventDuration + currentInterval * intervalSize);
                    }

                    if (keepStartDate) {
                        me.newEndDate = endDate;
                        duration = (endDate - record.startDate) / 60 / 60 / 1000; // duration in hours
                    } else {
                        startDate.setHours(axisStartTime);
                        startDate.setMinutes(currentInterval * intervalSize);

                        position = currentInterval * intervalHeight; // snap to valid intervals
                        position = position / columnHeight * 100;

                        deltas[0].style.top = `calc(${position}% + 1px)`;
                    }

                    if (keepEndDate) {
                        duration = (record.endDate - startDate) / 60 / 60 / 1000; // duration in hours
                    }
                }

                endDate = me.adjustEndDate(endDate);

                deltas.push({
                    id       : me.dragProxy.vdom.cn[2].id,
                    innerHTML: owner.intlFormat_time.format(endDate)
                });

                if (keepEndDate || keepStartDate) {
                    height = Math.round(duration / (axisEndTime - axisStartTime) * 100 * 1000) / 1000;
                    deltas[0].style.height = `calc(${height}% - 2px)`;
                }

                deltas.push({
                    id       : me.dragProxy.vdom.cn[0].id,
                    innerHTML: owner.intlFormat_time.format(startDate)
                });

                // check if the node got added yet
                if (me.dragProxy.vdom.cn[0].id) {
                    eventIntervals = (duration && duration * 60 || eventDuration) / timeAxis.interval;

                    if (eventIntervals <= 2) {
                        if (timeAxis.rowHeight / eventIntervals < 25 && !me.hasOverflow) {
                            deltas.push({
                                id : me.dragProxy.id,
                                cls: {add: ['neo-overflow']}
                            });

                            me.hasOverflow = true;
                        }
                    } else if (me.hasOverflow) {
                        deltas.push({
                            id : me.dragProxy.id,
                            cls: {remove: ['neo-overflow']}
                        });

                        me.hasOverflow = false;
                    }

                    Neo.applyDeltas(me.appName, deltas);
                }
            }

            me.currentInterval = currentInterval;
        }
    }

    /**
     *
     * @param {Object} data
     */
    dragStart(data) {
        let me = this,
            eventDuration, offsetX, offsetY;

        Neo.main.DomAccess.getBoundingClientRect({
            id: [me.getDragElementRoot().id, data.path[1].id]
        }).then(rects => {
            eventDuration = (me.eventRecord.endDate - me.eventRecord.startDate) / 60 / 1000;
            offsetX       = data.clientX - rects[0].left;
            offsetY       = data.clientY - rects[0].top;

            Object.assign(me, {
                columnHeight   : rects[1].height,
                columnTop      : rects[1].top,
                dragElementRect: rects[0],
                eventDuration  : Math.round(eventDuration / me.intervalSize) * me.intervalSize,
                offsetX,
                offsetY
            });

            me.createDragProxy(rects[0]);

            me.fire('dragStart', {
                dragElementRect: rects[0],
                id             : me.id,
                offsetX,
                offsetY
            });

            me.dragMove(data);
        });
    }

    /**
     *
     */
    removeBodyCursorCls() {
        Neo.applyDeltas(this.appName, {id: 'document.body', cls: {remove: ['neo-cursor-move']}});
    }
}

Neo.applyClassConfig(EventDragZone);




/***/ }),

/***/ "./src/calendar/view/week/plugin/DragDrop.mjs":
/*!****************************************************!*\
  !*** ./src/calendar/view/week/plugin/DragDrop.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DragDrop)
/* harmony export */ });
/* harmony import */ var _plugin_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../plugin/Base.mjs */ "./src/plugin/Base.mjs");
/* harmony import */ var _util_Date_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../util/Date.mjs */ "./src/util/Date.mjs");
/* harmony import */ var _EventDragZone_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../EventDragZone.mjs */ "./src/calendar/view/week/EventDragZone.mjs");
/* harmony import */ var _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../util/VDom.mjs */ "./src/util/VDom.mjs");





/**
 * @class Neo.calendar.view.week.plugin.DragDrop
 * @extends Neo.plugin.Base
 */
class DragDrop extends _plugin_Base_mjs__WEBPACK_IMPORTED_MODULE_0__.default {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.calendar.view.week.plugin.DragDrop'
         * @protected
         */
        className: 'Neo.calendar.view.week.plugin.DragDrop',
        /**
         * @member {Boolean} isDragging=false
         * @protected
         */
        isDragging: false
    }}

    /**
     *
     * @param {Object} config
     */
    constructor(config) {
        super(config);

        let me           = this,
            columnOpts   = {scope: me, delegate: '.neo-c-w-column'},
            eventOpts    = {scope: me, delegate: '.neo-event'},
            owner        = me.owner,
            domListeners = owner.domListeners;

        domListeners.push(
            {'drag:end'  : me.onColumnDragEnd,   ...columnOpts},
            {'drag:end'  : me.onEventDragEnd,    ...eventOpts},
            {'drag:move' : me.onColumnDragMove,  ...columnOpts},
            {'drag:move' : me.onEventDragMove,   ...eventOpts},
            {'drag:start': me.onColumnDragStart, ...columnOpts},
            {'drag:start': me.onEventDragStart,  ...eventOpts}
        );

        owner.domListeners = domListeners;
    }

    /**
     * Adjusts drag events which start on an event resize handle
     * @param {Object} data
     * @returns {Object}
     */
    adjustResizeEvent(data) {
        data.path.shift();
        data.targetPath.shift();
        data.target = data.path[0];

        return data;
    }

    /**
     *
     * @param {Object} opts
     * @param {Object} opts.dragElement
     * @param {Boolean} opts.enableResizingAcrossOppositeEdge
     * @param {Object} opts.eventRecord
     * @param {String} opts.proxyParentId
     * @returns {Neo.calendar.view.week.EventDragZone}
     */
    getEventDragZone(opts) {
        let me            = this,
            owner         = me.owner,
            eventDragZone = owner.eventDragZone,
            timeAxis      = owner.timeAxis,

            config = {
                axisEndTime                     : timeAxis.getTime(owner.endTime),
                axisStartTime                   : timeAxis.getTime(owner.startTime),
                dragElement                     : opts.dragElement,
                enableResizingAcrossOppositeEdge: opts.enableResizingAcrossOppositeEdge,
                eventRecord                     : opts.eventRecord,
                proxyParentId                   : opts.proxyParentId
            };

        if (!eventDragZone) {
            owner.eventDragZone = eventDragZone = Neo.create({
                module           : _EventDragZone_mjs__WEBPACK_IMPORTED_MODULE_2__.default,
                appName          : me.appName,
                owner            : owner,
                scrollContainerId: owner.getScrollContainer().id,
                ...config,

                dragProxyConfig: {
                    style: {
                        transition: 'none',
                        willChange: 'height'
                    }
                }
            });
        } else {
            eventDragZone.set(config);
        }

        return eventDragZone;
    }

    /**
     *
     * @param {Object} path
     * @returns {Boolean}
     */
    isTopLevelColumn(path) {
        return path[0].cls.includes('neo-c-w-column');
    }

    /**
     *
     * @param {Object} eventData
     * @returns {Boolean}
     */
    isTopLevelEvent(eventData) {
        return eventData.path[0].cls.includes('neo-event');
    }

    /**
     *
     * @param {Object} data
     */
    onColumnDragEnd(data) {
        let me           = this,
            owner        = me.owner,
            recordSymbol = Symbol.for('addedRecord'),
            record       = me[recordSymbol];

        if (record && me.isTopLevelColumn(data.path)) {
            me.isDragging = false;

            delete me[recordSymbol];

            Neo.applyDeltas(me.appName, {
                id   : owner.getEventId(record.id),
                style: {opacity: 1}
            }).then(() => {
                owner.eventDragZone.dragEnd();
                owner.getPlugin({flag:'resizable'}).onDragEnd(data);
            });
        }
    }

    /**
     *
     * @param {Object} data
     */
    onColumnDragMove(data) {
        if (this.isTopLevelColumn(data.path)) {
            this.owner.eventDragZone?.dragMove(data);
        }
    }

    /**
     *
     * @param {Object} data
     */
    onColumnDragStart(data) {
        let me = this;

        if (me.isTopLevelColumn(data.targetPath)) {
            let owner           = me.owner,
                axisStartTime   = owner.timeAxis.getTime(owner.startTime),
                calendarStore   = owner.calendarStore,
                columnRect      = data.path[0].rect,
                intervalSize    = 15,
                intervals       = (owner.timeAxis.getTime(owner.endTime) - axisStartTime) * 60 / intervalSize,
                intervalHeight  = columnRect.height / intervals,
                position        = Math.min(columnRect.height, data.clientY - columnRect.top),
                currentInterval = Math.floor(position / intervalHeight),
                startDate       = new Date(_util_VDom_mjs__WEBPACK_IMPORTED_MODULE_3__.default.findVdomChild(owner.vdom, data.path[0].id).vdom.flag + 'T00:00:00'),
                dragElement, endDate, eventDragZone, eventId, record;

            me.isDragging = true;

            startDate.setHours(axisStartTime);
            startDate.setMinutes(Math.min(currentInterval * intervalSize, intervals * intervalSize - owner.minimumEventDuration));

            endDate = _util_Date_mjs__WEBPACK_IMPORTED_MODULE_1__.default.clone(startDate);

            endDate.setMinutes(endDate.getMinutes() + owner.minimumEventDuration);

            // 24:00 fix
            endDate.getHours() === 0 && endDate.getMinutes() === 0 && endDate.setMinutes(endDate.getMinutes() - 1);

            record = owner.eventStore.add({
                calendarId: owner.data.activeCalendarId || calendarStore.getAt(0)[calendarStore.keyProperty],
                endDate,
                startDate,
                title     : 'New Event'
            })[0];

            // we need to cache a reference to make the record accessible for onColumnDragEnd()
            me[Symbol.for('addedRecord')] = record;

            // wait until the new event got mounted
            setTimeout(() => {
                eventId     = owner.getEventId(record.id);
                dragElement = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_3__.default.findVdomChild(owner.vdom, eventId).vdom;

                eventDragZone = me.getEventDragZone({
                    dragElement,
                    enableResizingAcrossOppositeEdge: true,
                    eventRecord                     : record,
                    proxyParentId                   : data.path[0].id
                });

                owner.getPlugin({flag:'resizable'}).onDragStart(data);
                eventDragZone.dragStart(data);

                setTimeout(() => {
                    me.isDragging && Neo.applyDeltas(me.appName, {
                        id   : eventId,
                        style: {opacity: 0}
                    });
                }, 50);
            }, 50);
        }
    }

    /**
     *
     * @param {Object} data
     */
    onEventDragEnd(data) {
        let me    = this,
            owner = me.owner;

        if (owner.enableDrag) {
            owner.eventDragZone.dragEnd();

            if (!me.isTopLevelEvent(data)) {
                data = me.adjustResizeEvent(data);
                owner.getPlugin({flag:'resizable'}).onDragEnd(data);
            } else {
                owner.eventDragZone.removeBodyCursorCls();
            }

            me.isDragging = false;
        }
    }

    /**
     *
     * @param {Object} data
     */
    onEventDragMove(data) {
        let me    = this,
            owner = me.owner;

        if (owner.enableDrag) {
            if (!me.isTopLevelEvent(data)) {
                data = me.adjustResizeEvent(data);
            }

            owner.eventDragZone.dragMove(data);
        }
    }

    /**
     *
     * @param {Object} data
     */
    onEventDragStart(data) {
        let me        = this,
            owner     = me.owner,
            modelData = owner.data;

        if (owner.enableDrag) {
            let isTopLevelEvent = me.isTopLevelEvent(data),
                dragElement, eventDragZone;

            if (!isTopLevelEvent) {
                data = me.adjustResizeEvent(data);
            }

            me.isDragging = true;

            dragElement = _util_VDom_mjs__WEBPACK_IMPORTED_MODULE_3__.default.findVdomChild(owner.vdom, data.path[0].id).vdom;

            eventDragZone = me.getEventDragZone({
                dragElement,
                enableResizingAcrossOppositeEdge: modelData.events.enableResizingAcrossOppositeEdge,
                eventRecord                     : owner.eventStore.get(dragElement.flag),
                proxyParentId                   : data.path[1].id
            });

            if (isTopLevelEvent) {
                eventDragZone.addBodyCursorCls();
            } else {
                owner.getPlugin({flag:'resizable'}).onDragStart(data);
            }

            eventDragZone.dragStart(data);
        }
    }
}

Neo.applyClassConfig(DragDrop);




/***/ }),

/***/ "./src/plugin/Base.mjs":
/*!*****************************!*\
  !*** ./src/plugin/Base.mjs ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Base)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Base.mjs */ "./src/core/Base.mjs");


/**
 * Plugins are intended to get put into the plugins config of component.Base
 * to enhance them or add additional features
 * @class Neo.plugin.Base
 * @extends Neo.core.Base
 */
class Base extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__.default {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.plugin.Base'
         * @protected
         */
        className: 'Neo.plugin.Base',
        /**
         * @member {String} ntype='plugin'
         * @protected
         */
        ntype: 'plugin',
        /**
         * @member {Neo.component.Base} owner=null
         * @protected
         */
        owner: null
    }}

    /**
     *
     * @param {Object} config
     */
    constructor(config) {
        super(config);

        let me = this;

        me.owner.on('mounted', me.onOwnerMounted, me);
    }

    /**
     * Override this method to apply changes to the owner Component when it does get mounted
     */
    onOwnerMounted() {

    }
}

Neo.applyClassConfig(Base);




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2FwcC92ZW5kb3JzLXNyY19jYWxlbmRhcl92aWV3X3dlZWtfcGx1Z2luX0RyYWdEcm9wX21qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0Q7QUFDbUI7QUFDVjtBQUNSO0FBQ0Q7O0FBRXhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDREQUFRO0FBQ3BDLHdCQUF3QjtBQUN4QjtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixNQUFNO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsTUFBTTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFv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QUFDQTtBQUNBLG1CQUFtQixtREFBUTtBQUMzQix3QkFBd0I7QUFDeEI7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9CQUFvQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9jYWxlbmRhci92aWV3L3dlZWsvRXZlbnREcmFnWm9uZS5tanMiLCJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9jYWxlbmRhci92aWV3L3dlZWsvcGx1Z2luL0RyYWdEcm9wLm1qcyIsIndlYnBhY2s6Ly9uZW8ubWpzLy4vc3JjL3BsdWdpbi9CYXNlLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGF0ZVV0aWwgICAgICAgICAgIGZyb20gJy4uLy4uLy4uL3V0aWwvRGF0ZS5tanMnO1xuaW1wb3J0IERyYWdQcm94eUNvbXBvbmVudCBmcm9tICcuLi8uLi8uLi9kcmFnZ2FibGUvRHJhZ1Byb3h5Q29tcG9uZW50Lm1qcyc7XG5pbXBvcnQgRHJhZ1pvbmUgICAgICAgICAgIGZyb20gJy4uLy4uLy4uL2RyYWdnYWJsZS9EcmFnWm9uZS5tanMnO1xuaW1wb3J0IE5lb0FycmF5ICAgICAgICAgICBmcm9tICcuLi8uLi8uLi91dGlsL0FycmF5Lm1qcyc7XG5pbXBvcnQgVkRvbVV0aWwgICAgICAgICAgIGZyb20gJy4uLy4uLy4uL3V0aWwvVkRvbS5tanMnO1xuXG4vKipcbiAqIEBjbGFzcyBOZW8uY2FsZW5kYXIudmlldy53ZWVrLkV2ZW50RHJhZ1pvbmVcbiAqIEBleHRlbmRzIE5lby5kcmFnZ2FibGUuRHJhZ1pvbmVcbiAqL1xuY2xhc3MgRXZlbnREcmFnWm9uZSBleHRlbmRzIERyYWdab25lIHtcbiAgICBzdGF0aWMgZ2V0Q29uZmlnKCkge3JldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLmNhbGVuZGFyLnZpZXcud2Vlay5FdmVudERyYWdab25lJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8uY2FsZW5kYXIudmlldy53ZWVrLkV2ZW50RHJhZ1pvbmUnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gYWRkRHJhZ1Byb3h5Q2xzPWZhbHNlXG4gICAgICAgICAqL1xuICAgICAgICBhZGREcmFnUHJveHlDbHM6IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gZW5hYmxlUmVzaXppbmdBY3Jvc3NPcHBvc2l0ZUVkZ2U9dHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgZW5hYmxlUmVzaXppbmdBY3Jvc3NPcHBvc2l0ZUVkZ2U6IHRydWUsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IGF4aXNFbmRUaW1lPTBcbiAgICAgICAgICovXG4gICAgICAgIGF4aXNFbmRUaW1lOiAwLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBheGlzU3RhcnRUaW1lPTBcbiAgICAgICAgICovXG4gICAgICAgIGF4aXNTdGFydFRpbWU6IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IGNvbHVtbkhlaWdodD0wXG4gICAgICAgICAqL1xuICAgICAgICBjb2x1bW5IZWlnaHQ6IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IGNvbHVtblRvcD0wXG4gICAgICAgICAqL1xuICAgICAgICBjb2x1bW5Ub3A6IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IGN1cnJlbnRJbnRlcnZhbD0wXG4gICAgICAgICAqL1xuICAgICAgICBjdXJyZW50SW50ZXJ2YWw6IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0aW1lIGluIG1pbnV0ZXNcbiAgICAgICAgICogQG1lbWJlciB7TnVtYmVyfSBldmVudER1cmF0aW9uPTBcbiAgICAgICAgICovXG4gICAgICAgIGV2ZW50RHVyYXRpb246IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IGV2ZW50UmVjb3JkPW51bGxcbiAgICAgICAgICovXG4gICAgICAgIGV2ZW50UmVjb3JkOiBudWxsLFxuICAgICAgICAvKipcbiAgICAgICAgICogSW50ZXJuYWwgZmxhZy5cbiAgICAgICAgICogSWYgd2UgcmVzaXplIGFjcm9zcyB0aGUgb3Bwb3NpdGUgZWRnZSBhbmQgdGhlbiBiYWNrLCB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgcmVsYXRlZCBlZGdlIHBvc2l0aW9uIG9uY2UuXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGZvcmNlVXBkYXRlPWZhbHNlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIGZvcmNlVXBkYXRlOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEludGVybmFsIGZsYWdcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gaGFzT3ZlcmZsb3c9ZmFsc2VcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgaGFzT3ZlcmZsb3c6IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogdGltZSBpbiBtaW51dGVzXG4gICAgICAgICAqIEBtZW1iZXIge051bWJlcn0gaW50ZXJ2YWxTaXplPTE1XG4gICAgICAgICAqL1xuICAgICAgICBpbnRlcnZhbFNpemU6IDE1LFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0ga2VlcEVuZERhdGU9ZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGtlZXBFbmREYXRlOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IGtlZXBTdGFydERhdGU9ZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIGtlZXBTdGFydERhdGU6IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gbW92ZUhvcml6b250YWw9ZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIG1vdmVIb3Jpem9udGFsOiBmYWxzZSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IG1vdmVJbk1haW5UaHJlYWQ9ZmFsc2VcbiAgICAgICAgICovXG4gICAgICAgIG1vdmVJbk1haW5UaHJlYWQ6IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogSW50ZXJuYWwgZmxhZy5cbiAgICAgICAgICogQG1lbWJlciB7RGF0ZX0gbmV3RW5kRGF0ZT1udWxsXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIG5ld0VuZERhdGU6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnRlcm5hbCBmbGFnLlxuICAgICAgICAgKiBAbWVtYmVyIHtEYXRlfSBuZXdTdGFydERhdGU9bnVsbFxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBuZXdTdGFydERhdGU6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtOdW1iZXJ9IHNjcm9sbEZhY3RvckxlZnQ9M1xuICAgICAgICAgKi9cbiAgICAgICAgc2Nyb2xsRmFjdG9yTGVmdDogMyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IHVzZVByb3h5V3JhcHBlcj1mYWxzZVxuICAgICAgICAgKi9cbiAgICAgICAgdXNlUHJveHlXcmFwcGVyOiBmYWxzZVxuICAgIH19XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIGFkZEJvZHlDdXJzb3JDbHMoKSB7XG4gICAgICAgIE5lby5hcHBseURlbHRhcyh0aGlzLmFwcE5hbWUsIHtpZDogJ2RvY3VtZW50LmJvZHknLCBjbHM6IHthZGQ6IFsnbmVvLWN1cnNvci1tb3ZlJ119fSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZXMgdGhlIDI0OjAwIGlzc3VlLCB3aGVyZSBhbiBldmVudCB3b3VsZCBlbmQgb24gdGhlIG5leHQgZGF5XG4gICAgICogQHBhcmFtIHtEYXRlfSBkYXRlXG4gICAgICogQHJldHVybnMge0RhdGV9XG4gICAgICovXG4gICAgYWRqdXN0RW5kRGF0ZShkYXRlKSB7XG4gICAgICAgIGlmIChkYXRlLmdldEhvdXJzKCkgPT09IDAgJiYgZGF0ZS5nZXRNaW51dGVzKCkgPT09IDApIHtcbiAgICAgICAgICAgIC8vIGlmIGFuIGV2ZW50IGVuZHMgYXQgMjQ6MDAsIGNoYW5nZSBpdCB0byAyMzo1OSA9PiBvdGhlcndpc2UgdGhlIGRheSBpbmNyZWFzZXMgYnkgMVxuICAgICAgICAgICAgZGF0ZS5zZXRNaW51dGVzKGRhdGUuZ2V0TWludXRlcygpIC0gMSk7XG4gICAgICAgIH0gZWxzZSBpZiAoIShkYXRlLmdldEhvdXJzKCkgPT09IDIzICYmIGRhdGUuZ2V0TWludXRlcygpID09PSA1OSkgJiYgZGF0ZS5nZXRNaW51dGVzKCkgJSB0aGlzLmludGVydmFsU2l6ZSAhPT0gMCkge1xuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHN3aXRjaCBub24gaW50ZXJ2YWwgYmFzZWQgdmFsdWVzIGJhY2tcbiAgICAgICAgICAgIGRhdGUuc2V0TWludXRlcyhkYXRlLmdldE1pbnV0ZXMoKSArIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIGFmdGVyIHRoZSBwcm94eVBhcmVudElkIGNvbmZpZyBnb3QgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvbGRWYWx1ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBhZnRlclNldFByb3h5UGFyZW50SWQodmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAmJiBvbGRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsZXQgbWUgPSB0aGlzO1xuXG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgbm9kZSBkaWQgbm90IGdldCByZW1vdmVkIHlldFxuICAgICAgICAgICAgaWYgKG1lLmRyYWdQcm94eT8udmRvbS5jblswXS5pZCkge1xuICAgICAgICAgICAgICAgIE5lby5hcHBseURlbHRhcyhtZS5hcHBOYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiAgOiAnbW92ZU5vZGUnLFxuICAgICAgICAgICAgICAgICAgICBpZCAgICAgIDogbWUuZHJhZ1Byb3h5LmlkLFxuICAgICAgICAgICAgICAgICAgICBpbmRleCAgIDogMCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50SWQ6IHZhbHVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgY3JlYXRlRHJhZ1Byb3h5KGRhdGEpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBjb21wb25lbnQgPSBOZW8uZ2V0Q29tcG9uZW50KG1lLmdldERyYWdFbGVtZW50Um9vdCgpLmlkKSB8fCBtZS5vd25lcixcbiAgICAgICAgICAgIHZkb20gICAgICA9IG1lLmRyYWdQcm94eUNvbmZpZz8udmRvbSxcbiAgICAgICAgICAgIGNsb25lICAgICA9IFZEb21VdGlsLmNsb25lKHZkb20gPyB2ZG9tIDogbWUuZHJhZ0VsZW1lbnQpO1xuXG4gICAgICAgICAgICBjbG9uZS5jblsyXS5yZW1vdmVEb20gPSBmYWxzZTtcblxuICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICBtb2R1bGUgICAgICAgICAgOiBEcmFnUHJveHlDb21wb25lbnQsXG4gICAgICAgICAgICBhcHBOYW1lICAgICAgICAgOiBtZS5hcHBOYW1lLFxuICAgICAgICAgICAgbW92ZUluTWFpblRocmVhZDogbWUubW92ZUluTWFpblRocmVhZCxcbiAgICAgICAgICAgIHBhcmVudElkICAgICAgICA6IG1lLnByb3h5UGFyZW50SWQsXG5cbiAgICAgICAgICAgIC4uLm1lLmRyYWdQcm94eUNvbmZpZyxcblxuICAgICAgICAgICAgdmRvbTogbWUudXNlUHJveHlXcmFwcGVyID8ge2NuOiBbY2xvbmVdfSA6IGNsb25lIC8vIHdlIHdhbnQgdG8gb3ZlcnJpZGUgZHJhZ1Byb3h5Q29uZmlnLnZkb20gaWYgbmVlZGVkXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uZmlnLmNscyA9IGNvbmZpZy5jbHMgfHwgW107XG5cbiAgICAgICAgY29uZmlnLmNscy5wdXNoKCduZW8tZm9jdXMnKTtcblxuICAgICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgICBjb25maWcuY2xzLnB1c2goY29tcG9uZW50LmdldFRoZW1lKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNsb25lLmNscyAmJiAhbWUudXNlUHJveHlXcmFwcGVyKSB7XG4gICAgICAgICAgICBjb25maWcuY2xzLnB1c2goLi4uY2xvbmUuY2xzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZS5hZGREcmFnUHJveHlDbHMpIHtcbiAgICAgICAgICAgIE5lb0FycmF5LmFkZChjb25maWcuY2xzLCBtZS5kcmFnUHJveHlDbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihjb25maWcuc3R5bGUsIHtcbiAgICAgICAgICAgIGhlaWdodDogYCR7ZGF0YS5oZWlnaHR9cHhgLFxuICAgICAgICAgICAgdG9wICAgOiBgJHtkYXRhLnkgLSBtZS5jb2x1bW5Ub3B9cHhgLFxuICAgICAgICAgICAgd2lkdGggOiBgJHtkYXRhLndpZHRofXB4YFxuICAgICAgICB9KTtcblxuICAgICAgICBtZS5kcmFnUHJveHkgPSBOZW8uY3JlYXRlKGNvbmZpZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRHJhZ0VuZCBlcXVhbHMgZHJvcCwgc2luY2Ugd2UgY2FuIG9ubHkgZHJhZyB0byB2YWxpZCBwb3NpdGlvbnNcbiAgICAgKiB0b2RvOiBFU0Mga2V5XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBkcmFnRW5kKGRhdGEpIHtcbiAgICAgICAgc3VwZXIuZHJhZ0VuZChkYXRhKTtcblxuICAgICAgICBsZXQgbWUgICAgID0gdGhpcyxcbiAgICAgICAgICAgIG93bmVyICA9IG1lLm93bmVyLFxuICAgICAgICAgICAgcmVjb3JkID0gbWUuZXZlbnRSZWNvcmQsXG4gICAgICAgICAgICBlbmREYXRlLCBzdGFydERhdGU7XG5cbiAgICAgICAgaWYgKG1lLmtlZXBTdGFydERhdGUpIHtcbiAgICAgICAgICAgIGVuZERhdGUgICA9IG1lLm5ld0VuZERhdGU7XG4gICAgICAgICAgICBzdGFydERhdGUgPSBtZS5uZXdTdGFydERhdGUgfHwgcmVjb3JkLnN0YXJ0RGF0ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKFZEb21VdGlsLmZpbmRWZG9tQ2hpbGQob3duZXIudmRvbSwgbWUucHJveHlQYXJlbnRJZCkudmRvbS5mbGFnICsgJ1QwMDowMDowMCcpO1xuICAgICAgICAgICAgc3RhcnREYXRlLnNldEhvdXJzKG1lLmF4aXNTdGFydFRpbWUpO1xuICAgICAgICAgICAgc3RhcnREYXRlLnNldE1pbnV0ZXMobWUuY3VycmVudEludGVydmFsICogbWUuaW50ZXJ2YWxTaXplKTtcblxuICAgICAgICAgICAgaWYgKG1lLmtlZXBFbmREYXRlKSB7XG4gICAgICAgICAgICAgICAgZW5kRGF0ZSAgID0gbWUubmV3RW5kRGF0ZSAgIHx8IHJlY29yZC5lbmREYXRlO1xuICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IG1lLm5ld1N0YXJ0RGF0ZSB8fCBzdGFydERhdGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVuZERhdGUgPSBEYXRlVXRpbC5jbG9uZShzdGFydERhdGUpO1xuICAgICAgICAgICAgICAgIGVuZERhdGUuc2V0TWludXRlcyhlbmREYXRlLmdldE1pbnV0ZXMoKSArIG1lLmV2ZW50RHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZW5kRGF0ZSA9IG1lLmFkanVzdEVuZERhdGUoZW5kRGF0ZSk7XG5cbiAgICAgICAgcmVjb3JkLnNldFNpbGVudCh7XG4gICAgICAgICAgICBlbmREYXRlLFxuICAgICAgICAgICAgc3RhcnREYXRlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24obWUsIHtcbiAgICAgICAgICAgIGN1cnJlbnRJbnRlcnZhbDogMCxcbiAgICAgICAgICAgIGhhc092ZXJmbG93ICAgIDogZmFsc2UsXG4gICAgICAgICAgICBrZWVwRW5kRGF0ZSAgICA6IGZhbHNlLFxuICAgICAgICAgICAga2VlcFN0YXJ0RGF0ZSAgOiBmYWxzZSxcbiAgICAgICAgICAgIG5ld0VuZERhdGUgICAgIDogbnVsbCxcbiAgICAgICAgICAgIG5ld1N0YXJ0RGF0ZSAgIDogbnVsbCxcbiAgICAgICAgICAgIHByb3h5UGFyZW50SWQgIDogbnVsbFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyB0b2RvOiB1cGRhdGluZyBhIHJlY29yZCBmaWVsZCB3aGljaCBpcyBpbmNsdWRlZCBpbnNpZGUgYSBzb3J0ZXIgc2hvdWxkIHRyaWdnZXIgY29sbGVjdGlvbi5kb1NvcnQoKVxuICAgICAgICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9uZW9tanMvbmVvL2lzc3Vlcy8yMzkyXG5cbiAgICAgICAgb3duZXIuZ2V0TW9kZWwoKS5nZXRTdG9yZSgnZXZlbnRzJykuZG9Tb3J0KCk7XG4gICAgICAgIG93bmVyLnVwZGF0ZUV2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBkcmFnTW92ZShkYXRhKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgYXhpc0VuZFRpbWUgICAgID0gbWUuYXhpc0VuZFRpbWUsXG4gICAgICAgICAgICBheGlzU3RhcnRUaW1lICAgPSBtZS5heGlzU3RhcnRUaW1lLFxuICAgICAgICAgICAgY29sdW1uSGVpZ2h0ICAgID0gbWUuY29sdW1uSGVpZ2h0LFxuICAgICAgICAgICAgZXZlbnREdXJhdGlvbiAgID0gbWUuZXZlbnREdXJhdGlvbixcbiAgICAgICAgICAgIGkgICAgICAgICAgICAgICA9IDAsXG4gICAgICAgICAgICBpbnRlcnZhbFNpemUgICAgPSBtZS5pbnRlcnZhbFNpemUsXG4gICAgICAgICAgICBrZWVwRW5kRGF0ZSAgICAgPSBtZS5rZWVwRW5kRGF0ZSxcbiAgICAgICAgICAgIGtlZXBTdGFydERhdGUgICA9IG1lLmtlZXBTdGFydERhdGUsXG4gICAgICAgICAgICBwYXRoICAgICAgICAgICAgPSBkYXRhLnRhcmdldFBhdGgsXG4gICAgICAgICAgICBsZW4gICAgICAgICAgICAgPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICAgIG93bmVyICAgICAgICAgICA9IG1lLm93bmVyLFxuICAgICAgICAgICAgcmVjb3JkICAgICAgICAgID0gbWUuZXZlbnRSZWNvcmQsXG4gICAgICAgICAgICBzd2l0Y2hEaXJlY3Rpb24gPSBmYWxzZSxcbiAgICAgICAgICAgIHRpbWVBeGlzICAgICAgICA9IG93bmVyLnRpbWVBeGlzLFxuICAgICAgICAgICAgYXhpc1N0YXJ0RGF0ZSwgY3VycmVudEludGVydmFsLCBkZWx0YXMsIGR1cmF0aW9uLCBlbmREYXRlLCBldmVudEludGVydmFscywgaGVpZ2h0LCBpbnRlcnZhbEhlaWdodCxcbiAgICAgICAgICAgIGludGVydmFscywgbGltaXRJbnRlcnZhbCwgbWluaW11bUV2ZW50SW50ZXJ2YWxzLCBwb3NpdGlvbiwgc3RhcnREYXRlLCBzdGFydEludGVydmFsO1xuXG4gICAgICAgIGlmIChtZS5kcmFnUHJveHkpIHtcbiAgICAgICAgICAgIGlmICgha2VlcEVuZERhdGUgJiYgIWtlZXBTdGFydERhdGUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXRoW2ldLmNscy5pbmNsdWRlcygnbmVvLWMtdy1jb2x1bW4nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWUucHJveHlQYXJlbnRJZCA9IHBhdGhbaV0uaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaW50ZXJ2YWxzICAgICAgPSAoYXhpc0VuZFRpbWUgLSBheGlzU3RhcnRUaW1lKSAqIDYwIC8gaW50ZXJ2YWxTaXplOyAvLyAxNSBtaW51dGVzIGVhY2hcbiAgICAgICAgICAgIGludGVydmFsSGVpZ2h0ID0gY29sdW1uSGVpZ2h0IC8gaW50ZXJ2YWxzO1xuXG4gICAgICAgICAgICBwb3NpdGlvbiA9IE1hdGgubWluKGNvbHVtbkhlaWdodCwgZGF0YS5jbGllbnRZIC0gbWUub2Zmc2V0WSAtIG1lLmNvbHVtblRvcCk7XG5cbiAgICAgICAgICAgIGN1cnJlbnRJbnRlcnZhbCA9IE1hdGguZmxvb3IocG9zaXRpb24gLyBpbnRlcnZhbEhlaWdodCk7XG5cbiAgICAgICAgICAgIGVuZERhdGUgICA9IERhdGVVdGlsLmNsb25lKHJlY29yZC5lbmREYXRlKTtcbiAgICAgICAgICAgIHN0YXJ0RGF0ZSA9IERhdGVVdGlsLmNsb25lKHJlY29yZC5zdGFydERhdGUpO1xuXG4gICAgICAgICAgICAvLyBldmVudHMgY2FuIGhhdmUgYSBzbWFsbGVyIHN0YXJ0IHRpbWUgdGhhbiB0aGUgYXhpcyBtaW4gdmFsdWUuXG4gICAgICAgICAgICAvLyByZXNpemluZyB2aWEgdGhlIG5vcnRoIGhhbmRsZSBuZWVkcyB0byBhZGp1c3QgdGhlIGR1cmF0aW9uIHRvIGhvbm9yIHRoaXMuXG4gICAgICAgICAgICBpZiAoa2VlcEVuZERhdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXhpc1N0YXJ0VGltZSA+IHN0YXJ0RGF0ZS5nZXRIb3VycygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZS5zZXRIb3VycyhheGlzU3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlLnNldE1pbnV0ZXMoMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZXZlbnREdXJhdGlvbiA9IChlbmREYXRlIC0gc3RhcnREYXRlKSAvIDYwIC8gMTAwMDsgLy8gZHVyYXRpb24gaW4gbWludXRlc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZXZlbnRzIGNhbiBoYXZlIGEgYmlnZ2VyIGVuZCB0aW1lIHRoYW4gdGhlIGF4aXMgbWF4IHZhbHVlLlxuICAgICAgICAgICAgLy8gcmVzaXppbmcgdmlhIHRoZSBzb3V0aCBoYW5kbGUgbmVlZHMgdG8gYWRqdXN0IHRoZSBkdXJhdGlvbiB0byBob25vciB0aGlzLlxuICAgICAgICAgICAgaWYgKGtlZXBTdGFydERhdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXhpc0VuZFRpbWUgPCBlbmREYXRlLmdldEhvdXJzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kRGF0ZS5zZXRIb3VycyhheGlzRW5kVGltZSk7XG4gICAgICAgICAgICAgICAgICAgIGVuZERhdGUuc2V0TWludXRlcygwKTtcblxuICAgICAgICAgICAgICAgICAgICBldmVudER1cmF0aW9uID0gKGVuZERhdGUgLSBzdGFydERhdGUpIC8gNjAgLyAxMDAwOyAvLyBkdXJhdGlvbiBpbiBtaW51dGVzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWtlZXBFbmREYXRlKSB7XG4gICAgICAgICAgICAgICAgLy8gZXZlbnRzIG11c3Qgbm90IGVuZCBhZnRlciB0aGUgbGFzdCB2aXNpYmxlIGludGVydmFsXG4gICAgICAgICAgICAgICAgY3VycmVudEludGVydmFsID0gTWF0aC5taW4oY3VycmVudEludGVydmFsLCBpbnRlcnZhbHMgLSAoZXZlbnREdXJhdGlvbiAvIGludGVydmFsU2l6ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWx0YXMgPSBbe1xuICAgICAgICAgICAgICAgIGlkICAgOiBtZS5kcmFnUHJveHkuaWQsXG4gICAgICAgICAgICAgICAgc3R5bGU6IHt9XG4gICAgICAgICAgICB9XTtcblxuICAgICAgICAgICAgaWYgKGtlZXBFbmREYXRlIHx8IGtlZXBTdGFydERhdGUpIHtcbiAgICAgICAgICAgICAgICBheGlzU3RhcnREYXRlID0gRGF0ZVV0aWwuY2xvbmUocmVjb3JkLnN0YXJ0RGF0ZSk7XG4gICAgICAgICAgICAgICAgYXhpc1N0YXJ0RGF0ZS5zZXRIb3VycyhheGlzU3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICBheGlzU3RhcnREYXRlLnNldE1pbnV0ZXMoMCk7XG5cbiAgICAgICAgICAgICAgICBtaW5pbXVtRXZlbnRJbnRlcnZhbHMgPSBvd25lci5taW5pbXVtRXZlbnREdXJhdGlvbiAvIGludGVydmFsU2l6ZTtcbiAgICAgICAgICAgICAgICBzdGFydEludGVydmFsICAgICAgICAgPSAocmVjb3JkLnN0YXJ0RGF0ZSAtIGF4aXNTdGFydERhdGUpIC8gaW50ZXJ2YWxTaXplIC8gNjAgLyAxMDAwO1xuXG4gICAgICAgICAgICAgICAgaWYgKGtlZXBFbmREYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbWl0SW50ZXJ2YWwgPSBzdGFydEludGVydmFsICsgKGV2ZW50RHVyYXRpb24gLyBpbnRlcnZhbFNpemUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChtZS5lbmFibGVSZXNpemluZ0Fjcm9zc09wcG9zaXRlRWRnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lLmZvcmNlVXBkYXRlICYmIGN1cnJlbnRJbnRlcnZhbCA+IGxpbWl0SW50ZXJ2YWwgLW1pbmltdW1FdmVudEludGVydmFscyAmJiBjdXJyZW50SW50ZXJ2YWwgPCBsaW1pdEludGVydmFsICsgbWluaW11bUV2ZW50SW50ZXJ2YWxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB3ZSByZXNpemUgYmFjayB0byB0aGUgb3JpZ2luYWwgZGlyZWN0aW9uLCBrZWVwIHRoZSBtaW4gaW50ZXJ2YWwgdW50aWwgd2Ugc25hcCBiYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50SW50ZXJ2YWwgPj0gbGltaXRJbnRlcnZhbCArIG1pbmltdW1FdmVudEludGVydmFscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaERpcmVjdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuZm9yY2VVcGRhdGUgID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZERhdGUuc2V0SG91cnMoYXhpc1N0YXJ0VGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kRGF0ZS5zZXRNaW51dGVzKGN1cnJlbnRJbnRlcnZhbCAqIGludGVydmFsU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kRGF0ZSA9IG1lLmFkanVzdEVuZERhdGUoZW5kRGF0ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5uZXdFbmREYXRlID0gZW5kRGF0ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZS5zZXRIb3VycyhheGlzU3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydERhdGUuc2V0TWludXRlcyhsaW1pdEludGVydmFsICogaW50ZXJ2YWxTaXplKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLm5ld1N0YXJ0RGF0ZSA9IHN0YXJ0RGF0ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gKGVuZERhdGUgLSBzdGFydERhdGUpIC8gNjAgLyA2MCAvIDEwMDA7IC8vIGR1cmF0aW9uIGluIGhvdXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFzWzBdLnN0eWxlLnRvcCA9IGBjYWxjKCR7bGltaXRJbnRlcnZhbCAqIGludGVydmFsSGVpZ2h0IC8gY29sdW1uSGVpZ2h0ICogMTAwfSUgKyAxcHgpYDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuZm9yY2VVcGRhdGUgID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUubmV3U3RhcnREYXRlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghc3dpdGNoRGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW50ZXJ2YWwgPSBNYXRoLm1pbihjdXJyZW50SW50ZXJ2YWwsIGxpbWl0SW50ZXJ2YWwgLSBtaW5pbXVtRXZlbnRJbnRlcnZhbHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtlZXBTdGFydERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGltaXRJbnRlcnZhbCA9IHN0YXJ0SW50ZXJ2YWwgLSAoZXZlbnREdXJhdGlvbiAvIGludGVydmFsU2l6ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lLmVuYWJsZVJlc2l6aW5nQWNyb3NzT3Bwb3NpdGVFZGdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBldmVudHMgbXVzdCBub3Qgc3RhcnQgYmVmb3JlIHRoZSBmaXJzdCB2aXNpYmxlIGludGVydmFsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW50ZXJ2YWwgPSBNYXRoLm1heCgtKGV2ZW50RHVyYXRpb24gLyBpbnRlcnZhbFNpemUpLCBjdXJyZW50SW50ZXJ2YWwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudEludGVydmFsIDw9IGxpbWl0SW50ZXJ2YWwgLSBtaW5pbXVtRXZlbnRJbnRlcnZhbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2hEaXJlY3Rpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLmZvcmNlVXBkYXRlICA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmREYXRlLnNldEhvdXJzKGF4aXNTdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZERhdGUuc2V0TWludXRlcyhldmVudER1cmF0aW9uICsgbGltaXRJbnRlcnZhbCAqIGludGVydmFsU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kRGF0ZSA9IG1lLmFkanVzdEVuZERhdGUoZW5kRGF0ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5uZXdFbmREYXRlID0gZW5kRGF0ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZS5zZXRIb3VycyhheGlzU3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydERhdGUuc2V0TWludXRlcyhldmVudER1cmF0aW9uICsgY3VycmVudEludGVydmFsICogaW50ZXJ2YWxTaXplKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLm5ld1N0YXJ0RGF0ZSA9IHN0YXJ0RGF0ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gKGVuZERhdGUgLSBzdGFydERhdGUpIC8gNjAgLyA2MCAvIDEwMDA7IC8vIGR1cmF0aW9uIGluIGhvdXJzXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IChldmVudER1cmF0aW9uIC8gaW50ZXJ2YWxTaXplICsgY3VycmVudEludGVydmFsKSAqIGludGVydmFsSGVpZ2h0OyAvLyBzbmFwIHRvIHZhbGlkIGludGVydmFsc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gLyBjb2x1bW5IZWlnaHQgKiAxMDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWx0YXNbMF0uc3R5bGUudG9wID0gYGNhbGMoJHtwb3NpdGlvbn0lICsgMXB4KWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1lLmZvcmNlVXBkYXRlICYmIGN1cnJlbnRJbnRlcnZhbCA8IGxpbWl0SW50ZXJ2YWwgKyBtaW5pbXVtRXZlbnRJbnRlcnZhbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHdlIHJlc2l6ZSBiYWNrIHRvIHRoZSBvcmlnaW5hbCBkaXJlY3Rpb24sIGtlZXAgdGhlIG1pbiBpbnRlcnZhbCB1bnRpbCB3ZSBzbmFwIGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1lLmZvcmNlVXBkYXRlICYmIGN1cnJlbnRJbnRlcnZhbCA+PSBsaW1pdEludGVydmFsICsgbWluaW11bUV2ZW50SW50ZXJ2YWxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lLmN1cnJlbnRJbnRlcnZhbCAhPT0gY3VycmVudEludGVydmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLmZvcmNlVXBkYXRlICA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5uZXdTdGFydERhdGUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWx0YXNbMF0uc3R5bGUudG9wID0gYGNhbGMoJHtzdGFydEludGVydmFsICogaW50ZXJ2YWxIZWlnaHQgLyBjb2x1bW5IZWlnaHQgKiAxMDB9JSArIDFweClgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghc3dpdGNoRGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW50ZXJ2YWwgPSBNYXRoLm1heChjdXJyZW50SW50ZXJ2YWwsIGxpbWl0SW50ZXJ2YWwgKyBtaW5pbXVtRXZlbnRJbnRlcnZhbHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWtlZXBTdGFydERhdGUpIHtcbiAgICAgICAgICAgICAgICAvLyBldmVudHMgbXVzdCBub3Qgc3RhcnQgYmVmb3JlIHRoZSBmaXJzdCB2aXNpYmxlIGludGVydmFsXG4gICAgICAgICAgICAgICAgY3VycmVudEludGVydmFsID0gTWF0aC5tYXgoMCwgY3VycmVudEludGVydmFsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1lLmN1cnJlbnRJbnRlcnZhbCAhPT0gY3VycmVudEludGVydmFsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzd2l0Y2hEaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFrZWVwRW5kRGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5kRGF0ZS5zZXRIb3VycyhheGlzU3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZERhdGUuc2V0TWludXRlcyhldmVudER1cmF0aW9uICsgY3VycmVudEludGVydmFsICogaW50ZXJ2YWxTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZWVwU3RhcnREYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZS5uZXdFbmREYXRlID0gZW5kRGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gKGVuZERhdGUgLSByZWNvcmQuc3RhcnREYXRlKSAvIDYwIC8gNjAgLyAxMDAwOyAvLyBkdXJhdGlvbiBpbiBob3Vyc1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlLnNldEhvdXJzKGF4aXNTdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlLnNldE1pbnV0ZXMoY3VycmVudEludGVydmFsICogaW50ZXJ2YWxTaXplKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSBjdXJyZW50SW50ZXJ2YWwgKiBpbnRlcnZhbEhlaWdodDsgLy8gc25hcCB0byB2YWxpZCBpbnRlcnZhbHNcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gLyBjb2x1bW5IZWlnaHQgKiAxMDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhc1swXS5zdHlsZS50b3AgPSBgY2FsYygke3Bvc2l0aW9ufSUgKyAxcHgpYDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZWVwRW5kRGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSAocmVjb3JkLmVuZERhdGUgLSBzdGFydERhdGUpIC8gNjAgLyA2MCAvIDEwMDA7IC8vIGR1cmF0aW9uIGluIGhvdXJzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbmREYXRlID0gbWUuYWRqdXN0RW5kRGF0ZShlbmREYXRlKTtcblxuICAgICAgICAgICAgICAgIGRlbHRhcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgaWQgICAgICAgOiBtZS5kcmFnUHJveHkudmRvbS5jblsyXS5pZCxcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJIVE1MOiBvd25lci5pbnRsRm9ybWF0X3RpbWUuZm9ybWF0KGVuZERhdGUpXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoa2VlcEVuZERhdGUgfHwga2VlcFN0YXJ0RGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBNYXRoLnJvdW5kKGR1cmF0aW9uIC8gKGF4aXNFbmRUaW1lIC0gYXhpc1N0YXJ0VGltZSkgKiAxMDAgKiAxMDAwKSAvIDEwMDA7XG4gICAgICAgICAgICAgICAgICAgIGRlbHRhc1swXS5zdHlsZS5oZWlnaHQgPSBgY2FsYygke2hlaWdodH0lIC0gMnB4KWA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGVsdGFzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBpZCAgICAgICA6IG1lLmRyYWdQcm94eS52ZG9tLmNuWzBdLmlkLFxuICAgICAgICAgICAgICAgICAgICBpbm5lckhUTUw6IG93bmVyLmludGxGb3JtYXRfdGltZS5mb3JtYXQoc3RhcnREYXRlKVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIG5vZGUgZ290IGFkZGVkIHlldFxuICAgICAgICAgICAgICAgIGlmIChtZS5kcmFnUHJveHkudmRvbS5jblswXS5pZCkge1xuICAgICAgICAgICAgICAgICAgICBldmVudEludGVydmFscyA9IChkdXJhdGlvbiAmJiBkdXJhdGlvbiAqIDYwIHx8IGV2ZW50RHVyYXRpb24pIC8gdGltZUF4aXMuaW50ZXJ2YWw7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50SW50ZXJ2YWxzIDw9IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aW1lQXhpcy5yb3dIZWlnaHQgLyBldmVudEludGVydmFscyA8IDI1ICYmICFtZS5oYXNPdmVyZmxvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQgOiBtZS5kcmFnUHJveHkuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsczoge2FkZDogWyduZW8tb3ZlcmZsb3cnXX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLmhhc092ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtZS5oYXNPdmVyZmxvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkIDogbWUuZHJhZ1Byb3h5LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsczoge3JlbW92ZTogWyduZW8tb3ZlcmZsb3cnXX1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBtZS5oYXNPdmVyZmxvdyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgTmVvLmFwcGx5RGVsdGFzKG1lLmFwcE5hbWUsIGRlbHRhcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtZS5jdXJyZW50SW50ZXJ2YWwgPSBjdXJyZW50SW50ZXJ2YWw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgZHJhZ1N0YXJ0KGRhdGEpIHtcbiAgICAgICAgbGV0IG1lID0gdGhpcyxcbiAgICAgICAgICAgIGV2ZW50RHVyYXRpb24sIG9mZnNldFgsIG9mZnNldFk7XG5cbiAgICAgICAgTmVvLm1haW4uRG9tQWNjZXNzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCh7XG4gICAgICAgICAgICBpZDogW21lLmdldERyYWdFbGVtZW50Um9vdCgpLmlkLCBkYXRhLnBhdGhbMV0uaWRdXG4gICAgICAgIH0pLnRoZW4ocmVjdHMgPT4ge1xuICAgICAgICAgICAgZXZlbnREdXJhdGlvbiA9IChtZS5ldmVudFJlY29yZC5lbmREYXRlIC0gbWUuZXZlbnRSZWNvcmQuc3RhcnREYXRlKSAvIDYwIC8gMTAwMDtcbiAgICAgICAgICAgIG9mZnNldFggICAgICAgPSBkYXRhLmNsaWVudFggLSByZWN0c1swXS5sZWZ0O1xuICAgICAgICAgICAgb2Zmc2V0WSAgICAgICA9IGRhdGEuY2xpZW50WSAtIHJlY3RzWzBdLnRvcDtcblxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihtZSwge1xuICAgICAgICAgICAgICAgIGNvbHVtbkhlaWdodCAgIDogcmVjdHNbMV0uaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGNvbHVtblRvcCAgICAgIDogcmVjdHNbMV0udG9wLFxuICAgICAgICAgICAgICAgIGRyYWdFbGVtZW50UmVjdDogcmVjdHNbMF0sXG4gICAgICAgICAgICAgICAgZXZlbnREdXJhdGlvbiAgOiBNYXRoLnJvdW5kKGV2ZW50RHVyYXRpb24gLyBtZS5pbnRlcnZhbFNpemUpICogbWUuaW50ZXJ2YWxTaXplLFxuICAgICAgICAgICAgICAgIG9mZnNldFgsXG4gICAgICAgICAgICAgICAgb2Zmc2V0WVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG1lLmNyZWF0ZURyYWdQcm94eShyZWN0c1swXSk7XG5cbiAgICAgICAgICAgIG1lLmZpcmUoJ2RyYWdTdGFydCcsIHtcbiAgICAgICAgICAgICAgICBkcmFnRWxlbWVudFJlY3Q6IHJlY3RzWzBdLFxuICAgICAgICAgICAgICAgIGlkICAgICAgICAgICAgIDogbWUuaWQsXG4gICAgICAgICAgICAgICAgb2Zmc2V0WCxcbiAgICAgICAgICAgICAgICBvZmZzZXRZXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbWUuZHJhZ01vdmUoZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgcmVtb3ZlQm9keUN1cnNvckNscygpIHtcbiAgICAgICAgTmVvLmFwcGx5RGVsdGFzKHRoaXMuYXBwTmFtZSwge2lkOiAnZG9jdW1lbnQuYm9keScsIGNsczoge3JlbW92ZTogWyduZW8tY3Vyc29yLW1vdmUnXX19KTtcbiAgICB9XG59XG5cbk5lby5hcHBseUNsYXNzQ29uZmlnKEV2ZW50RHJhZ1pvbmUpO1xuXG5leHBvcnQge0V2ZW50RHJhZ1pvbmUgYXMgZGVmYXVsdH07XG4iLCJpbXBvcnQgQmFzZSAgICAgICAgICBmcm9tICcuLi8uLi8uLi8uLi9wbHVnaW4vQmFzZS5tanMnO1xuaW1wb3J0IERhdGVVdGlsICAgICAgZnJvbSAnLi4vLi4vLi4vLi4vdXRpbC9EYXRlLm1qcyc7XG5pbXBvcnQgRXZlbnREcmFnWm9uZSBmcm9tICcuLi9FdmVudERyYWdab25lLm1qcyc7XG5pbXBvcnQgVkRvbVV0aWwgICAgICBmcm9tICcuLi8uLi8uLi8uLi91dGlsL1ZEb20ubWpzJztcblxuLyoqXG4gKiBAY2xhc3MgTmVvLmNhbGVuZGFyLnZpZXcud2Vlay5wbHVnaW4uRHJhZ0Ryb3BcbiAqIEBleHRlbmRzIE5lby5wbHVnaW4uQmFzZVxuICovXG5jbGFzcyBEcmFnRHJvcCBleHRlbmRzIEJhc2Uge1xuICAgIHN0YXRpYyBnZXRDb25maWcoKSB7cmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gY2xhc3NOYW1lPSdOZW8uY2FsZW5kYXIudmlldy53ZWVrLnBsdWdpbi5EcmFnRHJvcCdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLmNhbGVuZGFyLnZpZXcud2Vlay5wbHVnaW4uRHJhZ0Ryb3AnLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7Qm9vbGVhbn0gaXNEcmFnZ2luZz1mYWxzZVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBpc0RyYWdnaW5nOiBmYWxzZVxuICAgIH19XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgc3VwZXIoY29uZmlnKTtcblxuICAgICAgICBsZXQgbWUgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgIGNvbHVtbk9wdHMgICA9IHtzY29wZTogbWUsIGRlbGVnYXRlOiAnLm5lby1jLXctY29sdW1uJ30sXG4gICAgICAgICAgICBldmVudE9wdHMgICAgPSB7c2NvcGU6IG1lLCBkZWxlZ2F0ZTogJy5uZW8tZXZlbnQnfSxcbiAgICAgICAgICAgIG93bmVyICAgICAgICA9IG1lLm93bmVyLFxuICAgICAgICAgICAgZG9tTGlzdGVuZXJzID0gb3duZXIuZG9tTGlzdGVuZXJzO1xuXG4gICAgICAgIGRvbUxpc3RlbmVycy5wdXNoKFxuICAgICAgICAgICAgeydkcmFnOmVuZCcgIDogbWUub25Db2x1bW5EcmFnRW5kLCAgIC4uLmNvbHVtbk9wdHN9LFxuICAgICAgICAgICAgeydkcmFnOmVuZCcgIDogbWUub25FdmVudERyYWdFbmQsICAgIC4uLmV2ZW50T3B0c30sXG4gICAgICAgICAgICB7J2RyYWc6bW92ZScgOiBtZS5vbkNvbHVtbkRyYWdNb3ZlLCAgLi4uY29sdW1uT3B0c30sXG4gICAgICAgICAgICB7J2RyYWc6bW92ZScgOiBtZS5vbkV2ZW50RHJhZ01vdmUsICAgLi4uZXZlbnRPcHRzfSxcbiAgICAgICAgICAgIHsnZHJhZzpzdGFydCc6IG1lLm9uQ29sdW1uRHJhZ1N0YXJ0LCAuLi5jb2x1bW5PcHRzfSxcbiAgICAgICAgICAgIHsnZHJhZzpzdGFydCc6IG1lLm9uRXZlbnREcmFnU3RhcnQsICAuLi5ldmVudE9wdHN9XG4gICAgICAgICk7XG5cbiAgICAgICAgb3duZXIuZG9tTGlzdGVuZXJzID0gZG9tTGlzdGVuZXJzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkanVzdHMgZHJhZyBldmVudHMgd2hpY2ggc3RhcnQgb24gYW4gZXZlbnQgcmVzaXplIGhhbmRsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKi9cbiAgICBhZGp1c3RSZXNpemVFdmVudChkYXRhKSB7XG4gICAgICAgIGRhdGEucGF0aC5zaGlmdCgpO1xuICAgICAgICBkYXRhLnRhcmdldFBhdGguc2hpZnQoKTtcbiAgICAgICAgZGF0YS50YXJnZXQgPSBkYXRhLnBhdGhbMF07XG5cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzLmRyYWdFbGVtZW50XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvcHRzLmVuYWJsZVJlc2l6aW5nQWNyb3NzT3Bwb3NpdGVFZGdlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMuZXZlbnRSZWNvcmRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5wcm94eVBhcmVudElkXG4gICAgICogQHJldHVybnMge05lby5jYWxlbmRhci52aWV3LndlZWsuRXZlbnREcmFnWm9uZX1cbiAgICAgKi9cbiAgICBnZXRFdmVudERyYWdab25lKG9wdHMpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgb3duZXIgICAgICAgICA9IG1lLm93bmVyLFxuICAgICAgICAgICAgZXZlbnREcmFnWm9uZSA9IG93bmVyLmV2ZW50RHJhZ1pvbmUsXG4gICAgICAgICAgICB0aW1lQXhpcyAgICAgID0gb3duZXIudGltZUF4aXMsXG5cbiAgICAgICAgICAgIGNvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICBheGlzRW5kVGltZSAgICAgICAgICAgICAgICAgICAgIDogdGltZUF4aXMuZ2V0VGltZShvd25lci5lbmRUaW1lKSxcbiAgICAgICAgICAgICAgICBheGlzU3RhcnRUaW1lICAgICAgICAgICAgICAgICAgIDogdGltZUF4aXMuZ2V0VGltZShvd25lci5zdGFydFRpbWUpLFxuICAgICAgICAgICAgICAgIGRyYWdFbGVtZW50ICAgICAgICAgICAgICAgICAgICAgOiBvcHRzLmRyYWdFbGVtZW50LFxuICAgICAgICAgICAgICAgIGVuYWJsZVJlc2l6aW5nQWNyb3NzT3Bwb3NpdGVFZGdlOiBvcHRzLmVuYWJsZVJlc2l6aW5nQWNyb3NzT3Bwb3NpdGVFZGdlLFxuICAgICAgICAgICAgICAgIGV2ZW50UmVjb3JkICAgICAgICAgICAgICAgICAgICAgOiBvcHRzLmV2ZW50UmVjb3JkLFxuICAgICAgICAgICAgICAgIHByb3h5UGFyZW50SWQgICAgICAgICAgICAgICAgICAgOiBvcHRzLnByb3h5UGFyZW50SWRcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFldmVudERyYWdab25lKSB7XG4gICAgICAgICAgICBvd25lci5ldmVudERyYWdab25lID0gZXZlbnREcmFnWm9uZSA9IE5lby5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIG1vZHVsZSAgICAgICAgICAgOiBFdmVudERyYWdab25lLFxuICAgICAgICAgICAgICAgIGFwcE5hbWUgICAgICAgICAgOiBtZS5hcHBOYW1lLFxuICAgICAgICAgICAgICAgIG93bmVyICAgICAgICAgICAgOiBvd25lcixcbiAgICAgICAgICAgICAgICBzY3JvbGxDb250YWluZXJJZDogb3duZXIuZ2V0U2Nyb2xsQ29udGFpbmVyKCkuaWQsXG4gICAgICAgICAgICAgICAgLi4uY29uZmlnLFxuXG4gICAgICAgICAgICAgICAgZHJhZ1Byb3h5Q29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWxsQ2hhbmdlOiAnaGVpZ2h0J1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBldmVudERyYWdab25lLnNldChjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV2ZW50RHJhZ1pvbmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGF0aFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGlzVG9wTGV2ZWxDb2x1bW4ocGF0aCkge1xuICAgICAgICByZXR1cm4gcGF0aFswXS5jbHMuaW5jbHVkZXMoJ25lby1jLXctY29sdW1uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnREYXRhXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNUb3BMZXZlbEV2ZW50KGV2ZW50RGF0YSkge1xuICAgICAgICByZXR1cm4gZXZlbnREYXRhLnBhdGhbMF0uY2xzLmluY2x1ZGVzKCduZW8tZXZlbnQnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgb25Db2x1bW5EcmFnRW5kKGRhdGEpIHtcbiAgICAgICAgbGV0IG1lICAgICAgICAgICA9IHRoaXMsXG4gICAgICAgICAgICBvd25lciAgICAgICAgPSBtZS5vd25lcixcbiAgICAgICAgICAgIHJlY29yZFN5bWJvbCA9IFN5bWJvbC5mb3IoJ2FkZGVkUmVjb3JkJyksXG4gICAgICAgICAgICByZWNvcmQgICAgICAgPSBtZVtyZWNvcmRTeW1ib2xdO1xuXG4gICAgICAgIGlmIChyZWNvcmQgJiYgbWUuaXNUb3BMZXZlbENvbHVtbihkYXRhLnBhdGgpKSB7XG4gICAgICAgICAgICBtZS5pc0RyYWdnaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGRlbGV0ZSBtZVtyZWNvcmRTeW1ib2xdO1xuXG4gICAgICAgICAgICBOZW8uYXBwbHlEZWx0YXMobWUuYXBwTmFtZSwge1xuICAgICAgICAgICAgICAgIGlkICAgOiBvd25lci5nZXRFdmVudElkKHJlY29yZC5pZCksXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtvcGFjaXR5OiAxfVxuICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgb3duZXIuZXZlbnREcmFnWm9uZS5kcmFnRW5kKCk7XG4gICAgICAgICAgICAgICAgb3duZXIuZ2V0UGx1Z2luKHtmbGFnOidyZXNpemFibGUnfSkub25EcmFnRW5kKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgb25Db2x1bW5EcmFnTW92ZShkYXRhKSB7XG4gICAgICAgIGlmICh0aGlzLmlzVG9wTGV2ZWxDb2x1bW4oZGF0YS5wYXRoKSkge1xuICAgICAgICAgICAgdGhpcy5vd25lci5ldmVudERyYWdab25lPy5kcmFnTW92ZShkYXRhKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBvbkNvbHVtbkRyYWdTdGFydChkYXRhKSB7XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKG1lLmlzVG9wTGV2ZWxDb2x1bW4oZGF0YS50YXJnZXRQYXRoKSkge1xuICAgICAgICAgICAgbGV0IG93bmVyICAgICAgICAgICA9IG1lLm93bmVyLFxuICAgICAgICAgICAgICAgIGF4aXNTdGFydFRpbWUgICA9IG93bmVyLnRpbWVBeGlzLmdldFRpbWUob3duZXIuc3RhcnRUaW1lKSxcbiAgICAgICAgICAgICAgICBjYWxlbmRhclN0b3JlICAgPSBvd25lci5jYWxlbmRhclN0b3JlLFxuICAgICAgICAgICAgICAgIGNvbHVtblJlY3QgICAgICA9IGRhdGEucGF0aFswXS5yZWN0LFxuICAgICAgICAgICAgICAgIGludGVydmFsU2l6ZSAgICA9IDE1LFxuICAgICAgICAgICAgICAgIGludGVydmFscyAgICAgICA9IChvd25lci50aW1lQXhpcy5nZXRUaW1lKG93bmVyLmVuZFRpbWUpIC0gYXhpc1N0YXJ0VGltZSkgKiA2MCAvIGludGVydmFsU2l6ZSxcbiAgICAgICAgICAgICAgICBpbnRlcnZhbEhlaWdodCAgPSBjb2x1bW5SZWN0LmhlaWdodCAvIGludGVydmFscyxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiAgICAgICAgPSBNYXRoLm1pbihjb2x1bW5SZWN0LmhlaWdodCwgZGF0YS5jbGllbnRZIC0gY29sdW1uUmVjdC50b3ApLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRJbnRlcnZhbCA9IE1hdGguZmxvb3IocG9zaXRpb24gLyBpbnRlcnZhbEhlaWdodCksXG4gICAgICAgICAgICAgICAgc3RhcnREYXRlICAgICAgID0gbmV3IERhdGUoVkRvbVV0aWwuZmluZFZkb21DaGlsZChvd25lci52ZG9tLCBkYXRhLnBhdGhbMF0uaWQpLnZkb20uZmxhZyArICdUMDA6MDA6MDAnKSxcbiAgICAgICAgICAgICAgICBkcmFnRWxlbWVudCwgZW5kRGF0ZSwgZXZlbnREcmFnWm9uZSwgZXZlbnRJZCwgcmVjb3JkO1xuXG4gICAgICAgICAgICBtZS5pc0RyYWdnaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgc3RhcnREYXRlLnNldEhvdXJzKGF4aXNTdGFydFRpbWUpO1xuICAgICAgICAgICAgc3RhcnREYXRlLnNldE1pbnV0ZXMoTWF0aC5taW4oY3VycmVudEludGVydmFsICogaW50ZXJ2YWxTaXplLCBpbnRlcnZhbHMgKiBpbnRlcnZhbFNpemUgLSBvd25lci5taW5pbXVtRXZlbnREdXJhdGlvbikpO1xuXG4gICAgICAgICAgICBlbmREYXRlID0gRGF0ZVV0aWwuY2xvbmUoc3RhcnREYXRlKTtcblxuICAgICAgICAgICAgZW5kRGF0ZS5zZXRNaW51dGVzKGVuZERhdGUuZ2V0TWludXRlcygpICsgb3duZXIubWluaW11bUV2ZW50RHVyYXRpb24pO1xuXG4gICAgICAgICAgICAvLyAyNDowMCBmaXhcbiAgICAgICAgICAgIGVuZERhdGUuZ2V0SG91cnMoKSA9PT0gMCAmJiBlbmREYXRlLmdldE1pbnV0ZXMoKSA9PT0gMCAmJiBlbmREYXRlLnNldE1pbnV0ZXMoZW5kRGF0ZS5nZXRNaW51dGVzKCkgLSAxKTtcblxuICAgICAgICAgICAgcmVjb3JkID0gb3duZXIuZXZlbnRTdG9yZS5hZGQoe1xuICAgICAgICAgICAgICAgIGNhbGVuZGFySWQ6IG93bmVyLmRhdGEuYWN0aXZlQ2FsZW5kYXJJZCB8fCBjYWxlbmRhclN0b3JlLmdldEF0KDApW2NhbGVuZGFyU3RvcmUua2V5UHJvcGVydHldLFxuICAgICAgICAgICAgICAgIGVuZERhdGUsXG4gICAgICAgICAgICAgICAgc3RhcnREYXRlLFxuICAgICAgICAgICAgICAgIHRpdGxlICAgICA6ICdOZXcgRXZlbnQnXG4gICAgICAgICAgICB9KVswXTtcblxuICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBjYWNoZSBhIHJlZmVyZW5jZSB0byBtYWtlIHRoZSByZWNvcmQgYWNjZXNzaWJsZSBmb3Igb25Db2x1bW5EcmFnRW5kKClcbiAgICAgICAgICAgIG1lW1N5bWJvbC5mb3IoJ2FkZGVkUmVjb3JkJyldID0gcmVjb3JkO1xuXG4gICAgICAgICAgICAvLyB3YWl0IHVudGlsIHRoZSBuZXcgZXZlbnQgZ290IG1vdW50ZWRcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGV2ZW50SWQgICAgID0gb3duZXIuZ2V0RXZlbnRJZChyZWNvcmQuaWQpO1xuICAgICAgICAgICAgICAgIGRyYWdFbGVtZW50ID0gVkRvbVV0aWwuZmluZFZkb21DaGlsZChvd25lci52ZG9tLCBldmVudElkKS52ZG9tO1xuXG4gICAgICAgICAgICAgICAgZXZlbnREcmFnWm9uZSA9IG1lLmdldEV2ZW50RHJhZ1pvbmUoe1xuICAgICAgICAgICAgICAgICAgICBkcmFnRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlUmVzaXppbmdBY3Jvc3NPcHBvc2l0ZUVkZ2U6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50UmVjb3JkICAgICAgICAgICAgICAgICAgICAgOiByZWNvcmQsXG4gICAgICAgICAgICAgICAgICAgIHByb3h5UGFyZW50SWQgICAgICAgICAgICAgICAgICAgOiBkYXRhLnBhdGhbMF0uaWRcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIG93bmVyLmdldFBsdWdpbih7ZmxhZzoncmVzaXphYmxlJ30pLm9uRHJhZ1N0YXJ0KGRhdGEpO1xuICAgICAgICAgICAgICAgIGV2ZW50RHJhZ1pvbmUuZHJhZ1N0YXJ0KGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG1lLmlzRHJhZ2dpbmcgJiYgTmVvLmFwcGx5RGVsdGFzKG1lLmFwcE5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkICAgOiBldmVudElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtvcGFjaXR5OiAwfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCA1MCk7XG4gICAgICAgICAgICB9LCA1MCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgb25FdmVudERyYWdFbmQoZGF0YSkge1xuICAgICAgICBsZXQgbWUgICAgPSB0aGlzLFxuICAgICAgICAgICAgb3duZXIgPSBtZS5vd25lcjtcblxuICAgICAgICBpZiAob3duZXIuZW5hYmxlRHJhZykge1xuICAgICAgICAgICAgb3duZXIuZXZlbnREcmFnWm9uZS5kcmFnRW5kKCk7XG5cbiAgICAgICAgICAgIGlmICghbWUuaXNUb3BMZXZlbEV2ZW50KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IG1lLmFkanVzdFJlc2l6ZUV2ZW50KGRhdGEpO1xuICAgICAgICAgICAgICAgIG93bmVyLmdldFBsdWdpbih7ZmxhZzoncmVzaXphYmxlJ30pLm9uRHJhZ0VuZChkYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3duZXIuZXZlbnREcmFnWm9uZS5yZW1vdmVCb2R5Q3Vyc29yQ2xzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1lLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBvbkV2ZW50RHJhZ01vdmUoZGF0YSkge1xuICAgICAgICBsZXQgbWUgICAgPSB0aGlzLFxuICAgICAgICAgICAgb3duZXIgPSBtZS5vd25lcjtcblxuICAgICAgICBpZiAob3duZXIuZW5hYmxlRHJhZykge1xuICAgICAgICAgICAgaWYgKCFtZS5pc1RvcExldmVsRXZlbnQoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gbWUuYWRqdXN0UmVzaXplRXZlbnQoZGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG93bmVyLmV2ZW50RHJhZ1pvbmUuZHJhZ01vdmUoZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgb25FdmVudERyYWdTdGFydChkYXRhKSB7XG4gICAgICAgIGxldCBtZSAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgb3duZXIgICAgID0gbWUub3duZXIsXG4gICAgICAgICAgICBtb2RlbERhdGEgPSBvd25lci5kYXRhO1xuXG4gICAgICAgIGlmIChvd25lci5lbmFibGVEcmFnKSB7XG4gICAgICAgICAgICBsZXQgaXNUb3BMZXZlbEV2ZW50ID0gbWUuaXNUb3BMZXZlbEV2ZW50KGRhdGEpLFxuICAgICAgICAgICAgICAgIGRyYWdFbGVtZW50LCBldmVudERyYWdab25lO1xuXG4gICAgICAgICAgICBpZiAoIWlzVG9wTGV2ZWxFdmVudCkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBtZS5hZGp1c3RSZXNpemVFdmVudChkYXRhKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWUuaXNEcmFnZ2luZyA9IHRydWU7XG5cbiAgICAgICAgICAgIGRyYWdFbGVtZW50ID0gVkRvbVV0aWwuZmluZFZkb21DaGlsZChvd25lci52ZG9tLCBkYXRhLnBhdGhbMF0uaWQpLnZkb207XG5cbiAgICAgICAgICAgIGV2ZW50RHJhZ1pvbmUgPSBtZS5nZXRFdmVudERyYWdab25lKHtcbiAgICAgICAgICAgICAgICBkcmFnRWxlbWVudCxcbiAgICAgICAgICAgICAgICBlbmFibGVSZXNpemluZ0Fjcm9zc09wcG9zaXRlRWRnZTogbW9kZWxEYXRhLmV2ZW50cy5lbmFibGVSZXNpemluZ0Fjcm9zc09wcG9zaXRlRWRnZSxcbiAgICAgICAgICAgICAgICBldmVudFJlY29yZCAgICAgICAgICAgICAgICAgICAgIDogb3duZXIuZXZlbnRTdG9yZS5nZXQoZHJhZ0VsZW1lbnQuZmxhZyksXG4gICAgICAgICAgICAgICAgcHJveHlQYXJlbnRJZCAgICAgICAgICAgICAgICAgICA6IGRhdGEucGF0aFsxXS5pZFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChpc1RvcExldmVsRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBldmVudERyYWdab25lLmFkZEJvZHlDdXJzb3JDbHMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3duZXIuZ2V0UGx1Z2luKHtmbGFnOidyZXNpemFibGUnfSkub25EcmFnU3RhcnQoZGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGV2ZW50RHJhZ1pvbmUuZHJhZ1N0YXJ0KGRhdGEpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5OZW8uYXBwbHlDbGFzc0NvbmZpZyhEcmFnRHJvcCk7XG5cbmV4cG9ydCB7RHJhZ0Ryb3AgYXMgZGVmYXVsdH07XG4iLCJpbXBvcnQgQ29yZUJhc2UgZnJvbSAnLi4vY29yZS9CYXNlLm1qcyc7XG5cbi8qKlxuICogUGx1Z2lucyBhcmUgaW50ZW5kZWQgdG8gZ2V0IHB1dCBpbnRvIHRoZSBwbHVnaW5zIGNvbmZpZyBvZiBjb21wb25lbnQuQmFzZVxuICogdG8gZW5oYW5jZSB0aGVtIG9yIGFkZCBhZGRpdGlvbmFsIGZlYXR1cmVzXG4gKiBAY2xhc3MgTmVvLnBsdWdpbi5CYXNlXG4gKiBAZXh0ZW5kcyBOZW8uY29yZS5CYXNlXG4gKi9cbmNsYXNzIEJhc2UgZXh0ZW5kcyBDb3JlQmFzZSB7XG4gICAgc3RhdGljIGdldENvbmZpZygpIHtyZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5wbHVnaW4uQmFzZSdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLnBsdWdpbi5CYXNlJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge1N0cmluZ30gbnR5cGU9J3BsdWdpbidcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgbnR5cGU6ICdwbHVnaW4nLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7TmVvLmNvbXBvbmVudC5CYXNlfSBvd25lcj1udWxsXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIG93bmVyOiBudWxsXG4gICAgfX1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICBzdXBlcihjb25maWcpO1xuXG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG5cbiAgICAgICAgbWUub3duZXIub24oJ21vdW50ZWQnLCBtZS5vbk93bmVyTW91bnRlZCwgbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGFwcGx5IGNoYW5nZXMgdG8gdGhlIG93bmVyIENvbXBvbmVudCB3aGVuIGl0IGRvZXMgZ2V0IG1vdW50ZWRcbiAgICAgKi9cbiAgICBvbk93bmVyTW91bnRlZCgpIHtcblxuICAgIH1cbn1cblxuTmVvLmFwcGx5Q2xhc3NDb25maWcoQmFzZSk7XG5cbmV4cG9ydCB7QmFzZSBhcyBkZWZhdWx0fTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==