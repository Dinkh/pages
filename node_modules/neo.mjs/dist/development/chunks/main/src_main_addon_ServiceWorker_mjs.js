"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_main_addon_ServiceWorker_mjs"],{

/***/ "./src/main/addon/ServiceWorker.mjs":
/*!******************************************!*\
  !*** ./src/main/addon/ServiceWorker.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");
/* harmony import */ var _worker_mixin_RemoteMethodAccess_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../worker/mixin/RemoteMethodAccess.mjs */ "./src/worker/mixin/RemoteMethodAccess.mjs");
/* harmony import */ var _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../worker/Manager.mjs */ "./src/worker/Manager.mjs");




/**
 * Creates a ServiceWorker instance, in case Neo.config.useServiceWorker is set to true
 * @class Neo.main.addon.ServiceWorker
 * @extends Neo.core.Base
 * @singleton
 */
class ServiceWorker extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.main.addon.ServiceWorker'
         * @protected
         */
        className: 'Neo.main.addon.ServiceWorker',
        /**
         * @member {String[]|Neo.core.Base[]|null} mixins=[RemoteMethodAccess]
         */
        mixins: [_worker_mixin_RemoteMethodAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"]],
        /**
         * @member {ServiceWorkerRegistration|null} registration=null
         * @protected
         */
        registration: null,
        /**
         * @member {Boolean} singleton=true
         * @protected
         */
        singleton: true
    }}

    /**
     * @param {Object} config
     */
    construct(config) {
        if ('serviceWorker' in navigator) {
            let me            = this,
                config        = Neo.config,
                devMode       = config.environment === 'development',
                fileName      = devMode ? 'ServiceWorker.mjs' : 'serviceworker.js',
                folder        = window.location.pathname.includes('/examples/') ? 'examples/' : 'apps/',
                opts          = devMode ? {type: 'module'} : {},
                path          = (devMode ? config.basePath : config.workerBasePath) + (devMode ? folder : '') + fileName,
                serviceWorker = navigator.serviceWorker;

            serviceWorker.register(path, opts)
                .then(registration => {
                    me.registration = registration;

                    serviceWorker.ready.then(() => {
                        serviceWorker.onmessage = _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].onWorkerMessage.bind(_worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_2__["default"]);

                        _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_2__["default"].sendMessage('service', {
                            action     : 'registerNeoConfig',
                            channelPort: registration.active,
                            data       : config
                        });
                    });
                })
        }
    }
}

Neo.applyClassConfig(ServiceWorker);

let instance = Neo.create(ServiceWorker);

Neo.applyToGlobalNs(instance);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (instance);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL21haW4vc3JjX21haW5fYWRkb25fU2VydmljZVdvcmtlcl9tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFxRDtBQUNzQjtBQUNqQjs7QUFFMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHNEQUFJO0FBQ2hDLHdCQUF3QjtBQUN4QjtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLCtCQUErQjtBQUNuRDtBQUNBLGlCQUFpQiw0RUFBa0I7QUFDbkM7QUFDQSxvQkFBb0IsZ0NBQWdDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxnQkFBZ0IsSUFBSTtBQUMvRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtEQUFrRCxnRkFBa0MsQ0FBQywyREFBYTs7QUFFbEcsd0JBQXdCLHVFQUF5QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsaUVBQWUsUUFBUSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9tYWluL2FkZG9uL1NlcnZpY2VXb3JrZXIubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlICAgICAgICAgICAgICAgZnJvbSAnLi4vLi4vY29yZS9CYXNlLm1qcyc7XG5pbXBvcnQgUmVtb3RlTWV0aG9kQWNjZXNzIGZyb20gJy4uLy4uL3dvcmtlci9taXhpbi9SZW1vdGVNZXRob2RBY2Nlc3MubWpzJztcbmltcG9ydCBXb3JrZXJNYW5hZ2VyICAgICAgZnJvbSAnLi4vLi4vd29ya2VyL01hbmFnZXIubWpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgU2VydmljZVdvcmtlciBpbnN0YW5jZSwgaW4gY2FzZSBOZW8uY29uZmlnLnVzZVNlcnZpY2VXb3JrZXIgaXMgc2V0IHRvIHRydWVcbiAqIEBjbGFzcyBOZW8ubWFpbi5hZGRvbi5TZXJ2aWNlV29ya2VyXG4gKiBAZXh0ZW5kcyBOZW8uY29yZS5CYXNlXG4gKiBAc2luZ2xldG9uXG4gKi9cbmNsYXNzIFNlcnZpY2VXb3JrZXIgZXh0ZW5kcyBCYXNlIHtcbiAgICBzdGF0aWMgZ2V0Q29uZmlnKCkge3JldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLm1haW4uYWRkb24uU2VydmljZVdvcmtlcidcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLm1haW4uYWRkb24uU2VydmljZVdvcmtlcicsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmdbXXxOZW8uY29yZS5CYXNlW118bnVsbH0gbWl4aW5zPVtSZW1vdGVNZXRob2RBY2Nlc3NdXG4gICAgICAgICAqL1xuICAgICAgICBtaXhpbnM6IFtSZW1vdGVNZXRob2RBY2Nlc3NdLFxuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbnxudWxsfSByZWdpc3RyYXRpb249bnVsbFxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICByZWdpc3RyYXRpb246IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBzaW5nbGV0b249dHJ1ZVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBzaW5nbGV0b246IHRydWVcbiAgICB9fVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdChjb25maWcpIHtcbiAgICAgICAgaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHtcbiAgICAgICAgICAgIGxldCBtZSAgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgICAgICBjb25maWcgICAgICAgID0gTmVvLmNvbmZpZyxcbiAgICAgICAgICAgICAgICBkZXZNb2RlICAgICAgID0gY29uZmlnLmVudmlyb25tZW50ID09PSAnZGV2ZWxvcG1lbnQnLFxuICAgICAgICAgICAgICAgIGZpbGVOYW1lICAgICAgPSBkZXZNb2RlID8gJ1NlcnZpY2VXb3JrZXIubWpzJyA6ICdzZXJ2aWNld29ya2VyLmpzJyxcbiAgICAgICAgICAgICAgICBmb2xkZXIgICAgICAgID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLmluY2x1ZGVzKCcvZXhhbXBsZXMvJykgPyAnZXhhbXBsZXMvJyA6ICdhcHBzLycsXG4gICAgICAgICAgICAgICAgb3B0cyAgICAgICAgICA9IGRldk1vZGUgPyB7dHlwZTogJ21vZHVsZSd9IDoge30sXG4gICAgICAgICAgICAgICAgcGF0aCAgICAgICAgICA9IChkZXZNb2RlID8gY29uZmlnLmJhc2VQYXRoIDogY29uZmlnLndvcmtlckJhc2VQYXRoKSArIChkZXZNb2RlID8gZm9sZGVyIDogJycpICsgZmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgc2VydmljZVdvcmtlciA9IG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyO1xuXG4gICAgICAgICAgICBzZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKHBhdGgsIG9wdHMpXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVnaXN0cmF0aW9uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbWUucmVnaXN0cmF0aW9uID0gcmVnaXN0cmF0aW9uO1xuXG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2VXb3JrZXIucmVhZHkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlV29ya2VyLm9ubWVzc2FnZSA9IFdvcmtlck1hbmFnZXIub25Xb3JrZXJNZXNzYWdlLmJpbmQoV29ya2VyTWFuYWdlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIFdvcmtlck1hbmFnZXIuc2VuZE1lc3NhZ2UoJ3NlcnZpY2UnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uICAgICA6ICdyZWdpc3Rlck5lb0NvbmZpZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbm5lbFBvcnQ6IHJlZ2lzdHJhdGlvbi5hY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSAgICAgICA6IGNvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG59XG5cbk5lby5hcHBseUNsYXNzQ29uZmlnKFNlcnZpY2VXb3JrZXIpO1xuXG5sZXQgaW5zdGFuY2UgPSBOZW8uY3JlYXRlKFNlcnZpY2VXb3JrZXIpO1xuXG5OZW8uYXBwbHlUb0dsb2JhbE5zKGluc3RhbmNlKTtcblxuZXhwb3J0IGRlZmF1bHQgaW5zdGFuY2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=