"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_main_addon_ServiceWorker_mjs"],{

/***/ "./src/main/addon/ServiceWorker.mjs":
/*!******************************************!*\
  !*** ./src/main/addon/ServiceWorker.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");
/* harmony import */ var _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../worker/Manager.mjs */ "./src/worker/Manager.mjs");



/**
 * Creates a ServiceWorker instance, in case Neo.config.useServiceWorker is set to true
 * @class Neo.main.addon.ServiceWorker
 * @extends Neo.core.Base
 * @singleton
 */
class ServiceWorker extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.main.addon.ServiceWorker'
         * @protected
         */
        className: 'Neo.main.addon.ServiceWorker',
        /**
         * @member {Boolean} singleton=true
         * @protected
         */
        singleton: true
    }}

    /**
     * @param {Object} config
     */
    construct(config) {
        if ('serviceWorker' in navigator) {
            let me            = this,
                config        = Neo.config,
                devMode       = config.environment === 'development',
                fileName      = devMode ? 'ServiceWorker.mjs' : 'serviceworker.js',
                folder        = window.location.pathname.includes('/examples/') ? 'examples/' : 'apps/',
                opts          = devMode ? {type: 'module'} : {},
                path          = (devMode ? config.basePath : config.workerBasePath) + (devMode ? folder : '') + fileName,
                serviceWorker = navigator.serviceWorker;

            window.addEventListener('beforeunload', me.onBeforeUnload.bind(me));

            serviceWorker.register(path, opts)
                .then(registration => {
                    serviceWorker.ready.then(() => {
                        serviceWorker.onmessage = _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].onWorkerMessage.bind(_worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"]);

                        if (!_worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getWorker('service')) {
                            /*
                             * navigator.serviceWorker.controller can be null in case we load a page for the first time
                             * or in case of a force refresh.
                             * See: https://www.w3.org/TR/service-workers/#navigator-service-worker-controller
                             */
                            _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].serviceWorker = registration.active;
                        }

                        _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].sendMessage('service', {
                            action: 'registerNeoConfig',
                            data  : config
                        })
                    });
                })
        }
    }

    /**
     *
     */
    onBeforeUnload() {
        _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].sendMessage('service', {
            action: 'unregisterPort'
        });
    }
}

let instance = Neo.applyClassConfig(ServiceWorker);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (instance);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL21haW4vc3JjX21haW5fYWRkb25fU2VydmljZVdvcmtlcl9tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQWdEO0FBQ0s7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixzREFBSTtBQUNoQyx3QkFBd0I7QUFDeEI7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsZ0JBQWdCLElBQUk7QUFDL0Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsZ0ZBQWtDLENBQUMsMkRBQWE7O0FBRWxHLDZCQUE2QixxRUFBdUI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix5RUFBMkI7QUFDdkQ7O0FBRUEsd0JBQXdCLHVFQUF5QjtBQUNqRDtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUVBQXlCO0FBQ2pDO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7O0FBRUEsaUVBQWUsUUFBUSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmVvLm1qcy8uL3NyYy9tYWluL2FkZG9uL1NlcnZpY2VXb3JrZXIubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlICAgICAgICAgIGZyb20gJy4uLy4uL2NvcmUvQmFzZS5tanMnO1xuaW1wb3J0IFdvcmtlck1hbmFnZXIgZnJvbSAnLi4vLi4vd29ya2VyL01hbmFnZXIubWpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgU2VydmljZVdvcmtlciBpbnN0YW5jZSwgaW4gY2FzZSBOZW8uY29uZmlnLnVzZVNlcnZpY2VXb3JrZXIgaXMgc2V0IHRvIHRydWVcbiAqIEBjbGFzcyBOZW8ubWFpbi5hZGRvbi5TZXJ2aWNlV29ya2VyXG4gKiBAZXh0ZW5kcyBOZW8uY29yZS5CYXNlXG4gKiBAc2luZ2xldG9uXG4gKi9cbmNsYXNzIFNlcnZpY2VXb3JrZXIgZXh0ZW5kcyBCYXNlIHtcbiAgICBzdGF0aWMgZ2V0Q29uZmlnKCkge3JldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLm1haW4uYWRkb24uU2VydmljZVdvcmtlcidcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLm1haW4uYWRkb24uU2VydmljZVdvcmtlcicsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBzaW5nbGV0b249dHJ1ZVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBzaW5nbGV0b246IHRydWVcbiAgICB9fVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdChjb25maWcpIHtcbiAgICAgICAgaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHtcbiAgICAgICAgICAgIGxldCBtZSAgICAgICAgICAgID0gdGhpcyxcbiAgICAgICAgICAgICAgICBjb25maWcgICAgICAgID0gTmVvLmNvbmZpZyxcbiAgICAgICAgICAgICAgICBkZXZNb2RlICAgICAgID0gY29uZmlnLmVudmlyb25tZW50ID09PSAnZGV2ZWxvcG1lbnQnLFxuICAgICAgICAgICAgICAgIGZpbGVOYW1lICAgICAgPSBkZXZNb2RlID8gJ1NlcnZpY2VXb3JrZXIubWpzJyA6ICdzZXJ2aWNld29ya2VyLmpzJyxcbiAgICAgICAgICAgICAgICBmb2xkZXIgICAgICAgID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLmluY2x1ZGVzKCcvZXhhbXBsZXMvJykgPyAnZXhhbXBsZXMvJyA6ICdhcHBzLycsXG4gICAgICAgICAgICAgICAgb3B0cyAgICAgICAgICA9IGRldk1vZGUgPyB7dHlwZTogJ21vZHVsZSd9IDoge30sXG4gICAgICAgICAgICAgICAgcGF0aCAgICAgICAgICA9IChkZXZNb2RlID8gY29uZmlnLmJhc2VQYXRoIDogY29uZmlnLndvcmtlckJhc2VQYXRoKSArIChkZXZNb2RlID8gZm9sZGVyIDogJycpICsgZmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgc2VydmljZVdvcmtlciA9IG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyO1xuXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgbWUub25CZWZvcmVVbmxvYWQuYmluZChtZSkpO1xuXG4gICAgICAgICAgICBzZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKHBhdGgsIG9wdHMpXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVnaXN0cmF0aW9uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZVdvcmtlci5yZWFkeS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VXb3JrZXIub25tZXNzYWdlID0gV29ya2VyTWFuYWdlci5vbldvcmtlck1lc3NhZ2UuYmluZChXb3JrZXJNYW5hZ2VyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFXb3JrZXJNYW5hZ2VyLmdldFdvcmtlcignc2VydmljZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyIGNhbiBiZSBudWxsIGluIGNhc2Ugd2UgbG9hZCBhIHBhZ2UgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogb3IgaW4gY2FzZSBvZiBhIGZvcmNlIHJlZnJlc2guXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICogU2VlOiBodHRwczovL3d3dy53My5vcmcvVFIvc2VydmljZS13b3JrZXJzLyNuYXZpZ2F0b3Itc2VydmljZS13b3JrZXItY29udHJvbGxlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdvcmtlck1hbmFnZXIuc2VydmljZVdvcmtlciA9IHJlZ2lzdHJhdGlvbi5hY3RpdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIFdvcmtlck1hbmFnZXIuc2VuZE1lc3NhZ2UoJ3NlcnZpY2UnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAncmVnaXN0ZXJOZW9Db25maWcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgIDogY29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBvbkJlZm9yZVVubG9hZCgpIHtcbiAgICAgICAgV29ya2VyTWFuYWdlci5zZW5kTWVzc2FnZSgnc2VydmljZScsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ3VucmVnaXN0ZXJQb3J0J1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmxldCBpbnN0YW5jZSA9IE5lby5hcHBseUNsYXNzQ29uZmlnKFNlcnZpY2VXb3JrZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBpbnN0YW5jZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==