"use strict";
(self["webpackChunkneo_mjs"] = self["webpackChunkneo_mjs"] || []).push([["src_main_addon_CesiumJS_mjs"],{

/***/ "./src/main/addon/CesiumJS.mjs":
/*!*************************************!*\
  !*** ./src/main/addon/CesiumJS.mjs ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./src/core/Base.mjs");
/* harmony import */ var _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../DomAccess.mjs */ "./src/main/DomAccess.mjs");



/**
 * See: https://github.com/CesiumGS/cesium
 * @class Neo.main.addon.CesiumJS
 * @extends Neo.core.Base
 * @singleton
 */
class CesiumJS extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.CesiumJS'
         * @protected
         */
        className: 'Neo.main.addon.CesiumJS',
        /**
         * Remote method access for other workers
         * @member {Object} remote
         * @protected
         */
        remote: {
            app: [
                'create',
                'createOsmBuildings',
                'destroy',
                'flyTo'
            ]
        },
        /**
         * @member {Boolean} singleton=true
         * @protected
         */
        singleton: true
    }

    /**
     * @member {Object} viewers={}
     * @protected
     */
    viewers = {}

    /**
     * @param {Object} config
     */
    construct(config) {
        super.construct(config);
        this.loadFiles();
    }

    /**
     * @param {Object} data
     * @param {Boolean} data.createOsmBuildings
     * @param {String} data.id
     */
    create(data) {
        this.viewers[data.id] = new Cesium.Viewer(data.id, {
            terrainProvider: Cesium.createWorldTerrain()
        });

        data.createOsmBuildings && this.createOsmBuildings({
            id: data.id
        });
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     */
    createOsmBuildings(data) {
        this.viewers[data.id].scene.primitives.add(Cesium.createOsmBuildings());
    }

    /**
     * @param {Object} data
     * @param {String} data.id
     */
    destroy(data) {
        // todo
        console.log('main.addon.CesiumJS: destroy()', data);
    }

    /**
     * @param {Object} data
     * @param {Number[]} data.destination
     * @param {Number} data.heading
     * @param {String} data.id
     * @param {Number} data.pitch
     */
    flyTo(data) {
        this.viewers[data.id].camera.flyTo({
            destination: Cesium.Cartesian3.fromDegrees(...data.destination),
            orientation: {
                heading: Cesium.Math.toRadians(data.heading),
                pitch  : Cesium.Math.toRadians(data.pitch),
            }
        });
    }

    /**
     * @protected
     */
    loadFiles() {
        Promise.all([
            _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].loadScript(    'https://cesium.com/downloads/cesiumjs/releases/1.92/Build/Cesium/Cesium.js'),
            _DomAccess_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].loadStylesheet('https://cesium.com/downloads/cesiumjs/releases/1.92/Build/Cesium/Widgets/widgets.css')
        ]).then(() => {
            this.onFilesLoaded();
        });
    }

    /**
     *
     */
    onFilesLoaded() {
        Cesium.Ion.defaultAccessToken = Neo.config.cesiumJsToken;
    }
}

let instance = Neo.applyClassConfig(CesiumJS);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (instance);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL21haW4vc3JjX21haW5fYWRkb25fQ2VzaXVtSlNfbWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUE0QztBQUNIOztBQUV6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0RBQUk7QUFDM0I7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsU0FBUztBQUN4QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsVUFBVTtBQUN6QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGlFQUFvQjtBQUNoQyxZQUFZLHFFQUF3QjtBQUNwQztBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGlFQUFlLFFBQVEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25lby5tanMvLi9zcmMvbWFpbi9hZGRvbi9DZXNpdW1KUy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2UgICAgICBmcm9tICcuLi8uLi9jb3JlL0Jhc2UubWpzJztcbmltcG9ydCBEb21BY2Nlc3MgZnJvbSAnLi4vRG9tQWNjZXNzLm1qcyc7XG5cbi8qKlxuICogU2VlOiBodHRwczovL2dpdGh1Yi5jb20vQ2VzaXVtR1MvY2VzaXVtXG4gKiBAY2xhc3MgTmVvLm1haW4uYWRkb24uQ2VzaXVtSlNcbiAqIEBleHRlbmRzIE5lby5jb3JlLkJhc2VcbiAqIEBzaW5nbGV0b25cbiAqL1xuY2xhc3MgQ2VzaXVtSlMgZXh0ZW5kcyBCYXNlIHtcbiAgICBzdGF0aWMgY29uZmlnID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5tYWluLmFkZG9uLkNlc2l1bUpTJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8ubWFpbi5hZGRvbi5DZXNpdW1KUycsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdGUgbWV0aG9kIGFjY2VzcyBmb3Igb3RoZXIgd29ya2Vyc1xuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IHJlbW90ZVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdGU6IHtcbiAgICAgICAgICAgIGFwcDogW1xuICAgICAgICAgICAgICAgICdjcmVhdGUnLFxuICAgICAgICAgICAgICAgICdjcmVhdGVPc21CdWlsZGluZ3MnLFxuICAgICAgICAgICAgICAgICdkZXN0cm95JyxcbiAgICAgICAgICAgICAgICAnZmx5VG8nXG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBzaW5nbGV0b249dHJ1ZVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBzaW5nbGV0b246IHRydWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyIHtPYmplY3R9IHZpZXdlcnM9e31cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgdmlld2VycyA9IHt9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICovXG4gICAgY29uc3RydWN0KGNvbmZpZykge1xuICAgICAgICBzdXBlci5jb25zdHJ1Y3QoY29uZmlnKTtcbiAgICAgICAgdGhpcy5sb2FkRmlsZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZGF0YS5jcmVhdGVPc21CdWlsZGluZ3NcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5pZFxuICAgICAqL1xuICAgIGNyZWF0ZShkYXRhKSB7XG4gICAgICAgIHRoaXMudmlld2Vyc1tkYXRhLmlkXSA9IG5ldyBDZXNpdW0uVmlld2VyKGRhdGEuaWQsIHtcbiAgICAgICAgICAgIHRlcnJhaW5Qcm92aWRlcjogQ2VzaXVtLmNyZWF0ZVdvcmxkVGVycmFpbigpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRhdGEuY3JlYXRlT3NtQnVpbGRpbmdzICYmIHRoaXMuY3JlYXRlT3NtQnVpbGRpbmdzKHtcbiAgICAgICAgICAgIGlkOiBkYXRhLmlkXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuaWRcbiAgICAgKi9cbiAgICBjcmVhdGVPc21CdWlsZGluZ3MoZGF0YSkge1xuICAgICAgICB0aGlzLnZpZXdlcnNbZGF0YS5pZF0uc2NlbmUucHJpbWl0aXZlcy5hZGQoQ2VzaXVtLmNyZWF0ZU9zbUJ1aWxkaW5ncygpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLmlkXG4gICAgICovXG4gICAgZGVzdHJveShkYXRhKSB7XG4gICAgICAgIC8vIHRvZG9cbiAgICAgICAgY29uc29sZS5sb2coJ21haW4uYWRkb24uQ2VzaXVtSlM6IGRlc3Ryb3koKScsIGRhdGEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICogQHBhcmFtIHtOdW1iZXJbXX0gZGF0YS5kZXN0aW5hdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkYXRhLmhlYWRpbmdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5pZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkYXRhLnBpdGNoXG4gICAgICovXG4gICAgZmx5VG8oZGF0YSkge1xuICAgICAgICB0aGlzLnZpZXdlcnNbZGF0YS5pZF0uY2FtZXJhLmZseVRvKHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uOiBDZXNpdW0uQ2FydGVzaWFuMy5mcm9tRGVncmVlcyguLi5kYXRhLmRlc3RpbmF0aW9uKSxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiB7XG4gICAgICAgICAgICAgICAgaGVhZGluZzogQ2VzaXVtLk1hdGgudG9SYWRpYW5zKGRhdGEuaGVhZGluZyksXG4gICAgICAgICAgICAgICAgcGl0Y2ggIDogQ2VzaXVtLk1hdGgudG9SYWRpYW5zKGRhdGEucGl0Y2gpLFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgbG9hZEZpbGVzKCkge1xuICAgICAgICBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICBEb21BY2Nlc3MubG9hZFNjcmlwdCggICAgJ2h0dHBzOi8vY2VzaXVtLmNvbS9kb3dubG9hZHMvY2VzaXVtanMvcmVsZWFzZXMvMS45Mi9CdWlsZC9DZXNpdW0vQ2VzaXVtLmpzJyksXG4gICAgICAgICAgICBEb21BY2Nlc3MubG9hZFN0eWxlc2hlZXQoJ2h0dHBzOi8vY2VzaXVtLmNvbS9kb3dubG9hZHMvY2VzaXVtanMvcmVsZWFzZXMvMS45Mi9CdWlsZC9DZXNpdW0vV2lkZ2V0cy93aWRnZXRzLmNzcycpXG4gICAgICAgIF0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkZpbGVzTG9hZGVkKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgb25GaWxlc0xvYWRlZCgpIHtcbiAgICAgICAgQ2VzaXVtLklvbi5kZWZhdWx0QWNjZXNzVG9rZW4gPSBOZW8uY29uZmlnLmNlc2l1bUpzVG9rZW47XG4gICAgfVxufVxuXG5sZXQgaW5zdGFuY2UgPSBOZW8uYXBwbHlDbGFzc0NvbmZpZyhDZXNpdW1KUyk7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3RhbmNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9